/* Generated by Cython 3.0.0a10 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include\\numpy\\arrayscalars.h",
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include\\numpy\\ndarrayobject.h",
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include\\numpy\\ndarraytypes.h",
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include\\numpy\\ufuncobject.h",
            "atpy\\core\\physics\\beamline\\cppbeamline.h",
            "atpy\\core\\physics\\beamline\\cppcomponent.h",
            "atpy\\core\\physics\\elements\\cppdipole.h",
            "atpy\\core\\physics\\elements\\cppdrift.h",
            "atpy\\core\\physics\\elements\\cppelement.h",
            "atpy\\core\\physics\\elements\\cppelementfactory.h",
            "atpy\\core\\physics\\elements\\cppmarker.h",
            "atpy\\core\\physics\\elements\\cppoctupole.h",
            "atpy\\core\\physics\\elements\\cppquadrupole.h",
            "atpy\\core\\physics\\elements\\cppsextupole.h",
            "atpy\\core\\physics\\elements\\cpptuning.h",
            "atpy\\core\\physics\\utils\\cppast.h",
            "atpy\\core\\physics\\utils\\cppconstants.h",
            "atpy\\core\\physics\\utils\\cppoptimization.h",
            "atpy\\core\\physics\\utils\\cppstructures.h"
        ],
        "extra_compile_args": [
            "/O2",
            "/w",
            "/std:c++14",
            "/openmp"
        ],
        "include_dirs": [
            "atpy\\core\\interface",
            "atpy",
            "atpy/core",
            "atpy/core/interface",
            "atpy/core/physics",
            "atpy/core/physics/elements",
            "atpy/core/physics/beamline",
            "atpy/core/physics/utils",
            "C:\\Users\\LT\\AppData\\Roaming\\Python\\Python39\\site-packages\\numpy\\core\\include"
        ],
        "language": "c++",
        "libraries": [
            "BeamLine"
        ],
        "library_dirs": [
            "atpy/core",
            "atpy/core/Release"
        ],
        "name": "atpy.core.parser.parser",
        "sources": [
            "atpy/core/parser/parser.pyx"
        ]
    },
    "module_name": "atpy.core.parser.parser"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0a10"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000AA
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS 1
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__atpy__core__parser__parser
#define __PYX_HAVE_API__atpy__core__parser__parser
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <algorithm>
#include <map>
#include <unordered_map>
#include <string.h>
#include <string>
#include <complex>
#include <set>
#include "physics/utils/cppconstants.h"
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "../physics/utils/cppstructures.h"
#include "../physics/elements/cppelement.h"
#include "../physics/elements/cppmarker.h"
#include "../physics/elements/cppdrift.h"
#include "../physics/elements/cpptuning.h"
#include "../physics/elements/cppdipole.h"
#include "../physics/elements/cppquadrupole.h"
#include "../physics/elements/cppsextupole.h"
#include "../physics/elements/cppoctupole.h"
#include "../physics/elements/cppelementfactory.h"
#include "../physics/beamline/cppcomponent.h"
#include "../utils/cppast.h"
#include "../utils/cppoptimization.h"
#include "../physics/beamline/cppbeamline.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "atpy\\\\core\\\\parser\\\\parser.pyx",
  "atpy\\\\core\\\\parser\\\\parser.pxd",
  "<stringsource>",
  "__init__.cython-30.pxd",
  "type.pxd",
  "atpy\\\\core\\\\parser\\\\lexer.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":731
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":732
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":733
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":738
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":739
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":740
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":745
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":746
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":755
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":756
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":757
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":759
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":760
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":761
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":763
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":764
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":766
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":767
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":768
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_4atpy_4core_6parser_5lexer_Token;
struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer;
struct __pyx_obj_4atpy_4core_6parser_6parser_Parser;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":770
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":771
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":772
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":774
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "atpy/core/parser/parser.pxd":13
 * # from  interface.constants cimport*
 * 
 * ctypedef pair[string,AST* ] newpair             # <<<<<<<<<<<<<<
 * 
 * cdef dict value2enum
 */
typedef std::pair<std::string,AST *>  __pyx_t_4atpy_4core_6parser_6parser_newpair;

/* "lexer.pxd":7
 * cdef dict enum_token
 * 
 * cdef class Token:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly str kind #TWS,KWD, LOC, GLB,FUN,ID,ASSIGN,DELAY,
 */
struct __pyx_obj_4atpy_4core_6parser_5lexer_Token {
  PyObject_HEAD
  PyObject *kind;
  PyObject *value;
  int line;
  int column;
};


/* "lexer.pxd":14
 *         readonly int column
 * 
 * cdef class Lexer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t count
 */
struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer {
  PyObject_HEAD
  struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *__pyx_vtab;
  size_t count;
  size_t token_num;
  size_t line_num;
  size_t column;
  PyObject *tokens;
  PyObject *elems_index;
  PyObject *codes;
};


/* "atpy/core/parser/parser.pxd":17
 * cdef dict value2enum
 * 
 * cdef class Parser:  #             # <<<<<<<<<<<<<<
 *     cdef:
 *         CppBeamLine* line
 */
struct __pyx_obj_4atpy_4core_6parser_6parser_Parser {
  PyObject_HEAD
  struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *__pyx_vtab;
  CppBeamLine *line;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *lexer;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *current_token;
  PyObject *elems_name;
  PyObject *eids;
  PyObject *id_table;
  int isdatabase;
  PyObject *vars_name;
  PyObject *vars_elem_name;
  PyObject *tokens;
  PyObject *codes;
  PyObject *term_names;
  PyObject *ordered_var_positions;
};



/* "lexer.pxd":14
 *         readonly int column
 * 
 * cdef class Lexer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t count
 */

struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *(*get_current_token)(struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *);
  PyObject *(*get_next_token)(struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *);
  PyObject *(*check_next_token)(struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *);
  int (*tokenize)(struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *, PyObject *);
};
static struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *__pyx_vtabptr_4atpy_4core_6parser_5lexer_Lexer;


/* "atpy/core/parser/parser.pyx":24
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")
 * 
 * cdef class Parser:  #             # <<<<<<<<<<<<<<
 *     def __cinit__(self, dict eids):
 *         self.lexer = Lexer()  #
 */

struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser {
  void (*_set_database)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, CppBeamLine *);
  void (*eat)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *);
  int (*position)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  PyObject *(*parameter)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  PyObject *(*get_bounds)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  int (*get_eid)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  void (*set_Identity)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  void (*set_variable)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  void (*set_constraint)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  void (*set_optimize)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  void (*set_chromaticity)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  AST *(*property)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  AST *(*function)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *);
  AST *(*factor)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  AST *(*term)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  AST *(*expr)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *);
  double (*eval)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *);
};
static struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *__pyx_vtabptr_4atpy_4core_6parser_6parser_Parser;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // !CYTHON_VECTORCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* MoveIfSupported.proto */
#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyUnicodeContains.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_ContainsTF(PyObject* substring, PyObject* text, int eq) {
    int result = PyUnicode_Contains(text, substring);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
static CYTHON_UNUSED int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* RegisterModuleCleanup.proto */
static void __pyx_module_cleanup(PyObject *self);
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static int __Pyx_RegisterCleanup(void);
#else
#define __Pyx_RegisterCleanup() (0)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* VoidPtrExport.proto */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser__set_database(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, CppBeamLine *__pyx_v_line); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_eat(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_kind); /* proto*/
static int __pyx_f_4atpy_4core_6parser_6parser_6Parser_position(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_4atpy_4core_6parser_6parser_6Parser_parameter(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_function(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_func); /* proto*/
static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_property(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_factor(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_term(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_expr(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_4atpy_4core_6parser_6parser_6Parser_get_bounds(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static int __pyx_f_4atpy_4core_6parser_6parser_6Parser_get_eid(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_Identity(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_variable(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_constraint(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_optimize(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_chromaticity(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto*/
static double __pyx_f_4atpy_4core_6parser_6parser_6Parser_eval(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_code); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libcpp.vector" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.algorithm" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.map" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.complex" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.set" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.interface.constants" */
#if !CYTHON_USE_MODULE_STATE
#endif
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_KWD_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_KWD_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_KWD_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_INDEX_KWD = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_INDEX_KWD (*__pyx_vp_4atpy_4core_9interface_9constants_INDEX_KWD)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_TWS_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_TWS_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_TWS_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_INDEX_TWS = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_INDEX_TWS (*__pyx_vp_4atpy_4core_9interface_9constants_INDEX_TWS)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_LOC_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_LOC_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_LOC_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_INDEX_LOC = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_INDEX_LOC (*__pyx_vp_4atpy_4core_9interface_9constants_INDEX_LOC)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_GLB_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_GLB_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_GLB_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_INDEX_GLB = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_INDEX_GLB (*__pyx_vp_4atpy_4core_9interface_9constants_INDEX_GLB)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_ALL_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_ALL_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_ALL_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_ELEM_INDEX = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_ELEM_INDEX (*__pyx_vp_4atpy_4core_9interface_9constants_ELEM_INDEX)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_INDEX_ELEM = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_INDEX_ELEM (*__pyx_vp_4atpy_4core_9interface_9constants_INDEX_ELEM)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_POSITION_DEPEND_NAMES = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_POSITION_DEPEND_NAMES (*__pyx_vp_4atpy_4core_9interface_9constants_POSITION_DEPEND_NAMES)
static PyObject **__pyx_vp_4atpy_4core_9interface_9constants_DEFAULT_ELEM_KARGS = 0;
#define __pyx_v_4atpy_4core_9interface_9constants_DEFAULT_ELEM_KARGS (*__pyx_vp_4atpy_4core_9interface_9constants_DEFAULT_ELEM_KARGS)

/* Module declarations from "libc.stdio" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "numpy" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "numpy" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif

/* Module declarations from "atpy.core.interface.cppstructures" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.interface.cppelements" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.interface.cppcomponent" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.interface.cppast" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.parser.lexer" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_4atpy_4core_6parser_5lexer_Token = 0;
static PyTypeObject *__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer = 0;
#endif
static PyObject **__pyx_vp_4atpy_4core_6parser_5lexer_token_enum = 0;
#define __pyx_v_4atpy_4core_6parser_5lexer_token_enum (*__pyx_vp_4atpy_4core_6parser_5lexer_token_enum)
static PyObject **__pyx_vp_4atpy_4core_6parser_5lexer_enum_token = 0;
#define __pyx_v_4atpy_4core_6parser_5lexer_enum_token (*__pyx_vp_4atpy_4core_6parser_5lexer_enum_token)

/* Module declarations from "atpy.core.interface.cppoptimization" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.interface.cppbeamline" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.pair" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "atpy.core.parser.parser" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_4atpy_4core_6parser_6parser_Parser = 0;
#endif
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_value2enum = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_chromatic_terms = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_driving_terms = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms = 0;
static PyObject *__pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &); /*proto*/
static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::set<size_t>  __pyx_convert_set_from_py_size_t(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "atpy.core.parser.parser"
extern int __pyx_module_is_main_atpy__core__parser__parser;
int __pyx_module_is_main_atpy__core__parser__parser = 0;

/* Implementation of "atpy.core.parser.parser" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_SyntaxError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_NameError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = " :\n \"";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_DA[] = "DA";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k_MA[] = "MA";
static const char __pyx_k_Wx[] = "Wx";
static const char __pyx_k_Wy[] = "Wy";
static const char __pyx_k__2[] = "!";
static const char __pyx_k__3[] = "(";
static const char __pyx_k__4[] = ",";
static const char __pyx_k__5[] = ")";
static const char __pyx_k__6[] = ".";
static const char __pyx_k__7[] = "-";
static const char __pyx_k__8[] = "+";
static const char __pyx_k__9[] = "**";
static const char __pyx_k_at[] = " at ";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_ABS[] = "ABS";
static const char __pyx_k_DIM[] = "DIM";
static const char __pyx_k_END[] = "END";
static const char __pyx_k_EOF[] = "EOF";
static const char __pyx_k_FUN[] = "FUN";
static const char __pyx_k_GLB[] = "GLB";
static const char __pyx_k_KWD[] = "KWD";
static const char __pyx_k_LOC[] = "LOC";
static const char __pyx_k_MAX[] = "MAX";
static const char __pyx_k_MIN[] = "MIN";
static const char __pyx_k_TWS[] = "TWS";
static const char __pyx_k_VAR[] = "VAR";
static const char __pyx_k__10[] = "//";
static const char __pyx_k__11[] = "%";
static const char __pyx_k__12[] = "*";
static const char __pyx_k__13[] = "/";
static const char __pyx_k__14[] = "[";
static const char __pyx_k__15[] = "]";
static const char __pyx_k__16[] = "^";
static const char __pyx_k__17[] = "].";
static const char __pyx_k__18[] = "";
static const char __pyx_k__34[] = "?";
static const char __pyx_k_dQx[] = "dQx";
static const char __pyx_k_dQy[] = "dQy";
static const char __pyx_k_EXPR[] = "EXPR";
static const char __pyx_k_KNOB[] = "KNOB";
static const char __pyx_k_NAME[] = "NAME";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_SQRT[] = "SQRT";
static const char __pyx_k_STEP[] = "STEP";
static const char __pyx_k_d2Qx[] = "d2Qx";
static const char __pyx_k_d2Qy[] = "d2Qy";
static const char __pyx_k_d3Qx[] = "d3Qx";
static const char __pyx_k_d3Qy[] = "d3Qy";
static const char __pyx_k_eids[] = "eids";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_with[] = " with ";
static const char __pyx_k_CHROM[] = "CHROM";
static const char __pyx_k_DELAY[] = "DELAY";
static const char __pyx_k_LOWER[] = "LOWER";
static const char __pyx_k_REGEX[] = "REGEX";
static const char __pyx_k_UPPER[] = "UPPER";
static const char __pyx_k_detax[] = "detax";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_ASSIGN[] = "ASSIGN";
static const char __pyx_k_H00220[] = "H00220";
static const char __pyx_k_H00310[] = "H00310";
static const char __pyx_k_H00400[] = "H00400";
static const char __pyx_k_H11110[] = "H11110";
static const char __pyx_k_H11200[] = "H11200";
static const char __pyx_k_H20020[] = "H20020";
static const char __pyx_k_H20110[] = "H20110";
static const char __pyx_k_H20200[] = "H20200";
static const char __pyx_k_H22000[] = "H22000";
static const char __pyx_k_H31000[] = "H31000";
static const char __pyx_k_H40000[] = "H40000";
static const char __pyx_k_NUMBER[] = "NUMBER";
static const char __pyx_k_Parser[] = "Parser";
static const char __pyx_k_column[] = " column ";
static const char __pyx_k_dbetax[] = "dbetax";
static const char __pyx_k_ddetax[] = "ddetax";
static const char __pyx_k_detapx[] = "detapx";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_AIM_DQX[] = "AIM_DQX";
static const char __pyx_k_AIM_DQY[] = "AIM_DQY";
static const char __pyx_k_Co_KNOB[] = "Co-KNOB ";
static const char __pyx_k_at_line[] = " at line ";
static const char __pyx_k_but_got[] = ", but got ";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_dalphax[] = "dalphax";
static const char __pyx_k_ddbetax[] = "ddbetax";
static const char __pyx_k_ddbetay[] = "ddbetay";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_high_Qy[] = "high_Qy";
static const char __pyx_k_in_line[] = " in line ";
static const char __pyx_k_DA_SIGMA[] = "DA_SIGMA";
static const char __pyx_k_H00220_0[] = "H00220@0";
static const char __pyx_k_H00310_0[] = "H00310@0";
static const char __pyx_k_H00400_0[] = "H00400@0";
static const char __pyx_k_H11110_0[] = "H11110@0";
static const char __pyx_k_H11200_0[] = "H11200@0";
static const char __pyx_k_H20020_0[] = "H20020@0";
static const char __pyx_k_H20110_0[] = "H20110@0";
static const char __pyx_k_H20200_0[] = "H20200@0";
static const char __pyx_k_H22000_0[] = "H22000@0";
static const char __pyx_k_H31000_0[] = "H31000@0";
static const char __pyx_k_H40000_0[] = "H40000@0";
static const char __pyx_k_Identity[] = "Identity ";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_MAXIMIZE[] = "MAXIMIZE";
static const char __pyx_k_MA_SIGMA[] = "MA_SIGMA";
static const char __pyx_k_MINIMIZE[] = "MINIMIZE";
static const char __pyx_k_OPTIMIZE[] = "OPTIMIZE";
static const char __pyx_k_column_2[] = ", column ";
static const char __pyx_k_dnux_dJx[] = "dnux_dJx";
static const char __pyx_k_dnux_dJy[] = "dnux_dJy";
static const char __pyx_k_dnuy_dJy[] = "dnuy_dJy";
static const char __pyx_k_function[] = " function!";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_lower_Qx[] = "lower_Qx";
static const char __pyx_k_pyx_capi[] = "__pyx_capi__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_NameError[] = "NameError";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_at_column[] = "\"\n at column ";
static const char __pyx_k_at_line_2[] = "  at line ";
static const char __pyx_k_at_line_3[] = " at  line ";
static const char __pyx_k_fullmatch[] = "fullmatch";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_CONSTRAINT[] = "CONSTRAINT";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_dnux_dJx_0[] = "dnux_dJx@0";
static const char __pyx_k_dnux_dJy_0[] = "dnux_dJy@0";
static const char __pyx_k_dnuy_dJy_0[] = "dnuy_dJy@0";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sum_sqr_Qx[] = "sum_sqr_Qx";
static const char __pyx_k_sum_sqr_Qy[] = "sum_sqr_Qy";
static const char __pyx_k_value2enum[] = "value2enum";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_SyntaxError[] = "SyntaxError";
static const char __pyx_k_Parser_parse[] = "Parser.parse";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Undefined_ID[] = "Undefined ID ";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_Redefined_Var[] = "Redefined Var ";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_dalphaydbetay[] = "dalphaydbetay";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Unknown_syntax[] = "Unknown syntax ";
static const char __pyx_k_Global_property[] = "Global property  ";
static const char __pyx_k_Number_args_for[] = "Number args for ";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Parser_eat_Expect[] = "Parser.eat:Expect ";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_is_invalid_at_line[] = " is invalid at line ";
static const char __pyx_k_Unknown_element_name[] = "Unknown element name ";
static const char __pyx_k_is_redefined_at_line[] = " is redefined at line ";
static const char __pyx_k_Parser___reduce_cython[] = "Parser.__reduce_cython__";
static const char __pyx_k_is_invalid_keyword_for[] = " is invalid keyword for ";
static const char __pyx_k_atpy_core_parser_parser[] = "atpy.core.parser.parser";
static const char __pyx_k_function_is_not_correct[] = " function  is not correct!";
static const char __pyx_k_out_or_range_of_element[] = " out or range of element ";
static const char __pyx_k_Parser___setstate_cython[] = "Parser.__setstate_cython__";
static const char __pyx_k_shouldn_t_be_the_same_as[] = " shouldn't be the same as ";
static const char __pyx_k_Redefined_AIM_DQX_at_line[] = "Redefined AIM_DQX at line ";
static const char __pyx_k_Redefined_AIM_DQY_at_line[] = "Redefined AIM_DQY at line ";
static const char __pyx_k_is_invalid_keyword_at_line[] = " is invalid keyword at line ";
static const char __pyx_k_atpy_core_parser_parser_pyx[] = "atpy\\core\\parser\\parser.pyx";
static const char __pyx_k_is_not_allowed_with_position_at[] = "  is not allowed with position at line ";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_which_might_cause_error_depende[] = ", which might cause error dependences!";
static const char __pyx_k_Co_KNOB_should_be_bind_to_KNOB_a[] = "Co-KNOB should be bind to KNOB at  line ";
static const char __pyx_k_Global_property_is_not_allowed_i[] = "Global property is not allowed in ";
static const char __pyx_k_KNOB_must_be_name_of_Sextupole_e[] = "KNOB must be name of Sextupole element at line ";
static const char __pyx_k_KNOB_should_be_name_of_Sextupole[] = "KNOB should be name of Sextupole element at line ";
static const char __pyx_k_Parser_is_not_linked_to_database[] = "Parser is not linked to database!";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_n_u_ABS;
static PyObject *__pyx_n_u_AIM_DQX;
static PyObject *__pyx_n_u_AIM_DQY;
static PyObject *__pyx_n_u_ASSIGN;
static PyObject *__pyx_n_u_CHROM;
static PyObject *__pyx_n_u_CONSTRAINT;
static PyObject *__pyx_kp_u_Co_KNOB;
static PyObject *__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a;
static PyObject *__pyx_n_u_DA;
static PyObject *__pyx_n_u_DA_SIGMA;
static PyObject *__pyx_n_u_DELAY;
static PyObject *__pyx_n_u_DIM;
static PyObject *__pyx_n_u_END;
static PyObject *__pyx_n_u_EOF;
static PyObject *__pyx_n_u_EXPR;
static PyObject *__pyx_n_u_FUN;
static PyObject *__pyx_n_u_GLB;
static PyObject *__pyx_kp_u_Global_property;
static PyObject *__pyx_kp_u_Global_property_is_not_allowed_i;
static PyObject *__pyx_n_u_H00220;
static PyObject *__pyx_kp_u_H00220_0;
static PyObject *__pyx_n_u_H00310;
static PyObject *__pyx_kp_u_H00310_0;
static PyObject *__pyx_n_u_H00400;
static PyObject *__pyx_kp_u_H00400_0;
static PyObject *__pyx_n_u_H11110;
static PyObject *__pyx_kp_u_H11110_0;
static PyObject *__pyx_n_u_H11200;
static PyObject *__pyx_kp_u_H11200_0;
static PyObject *__pyx_n_u_H20020;
static PyObject *__pyx_kp_u_H20020_0;
static PyObject *__pyx_n_u_H20110;
static PyObject *__pyx_kp_u_H20110_0;
static PyObject *__pyx_n_u_H20200;
static PyObject *__pyx_kp_u_H20200_0;
static PyObject *__pyx_n_u_H22000;
static PyObject *__pyx_kp_u_H22000_0;
static PyObject *__pyx_n_u_H31000;
static PyObject *__pyx_kp_u_H31000_0;
static PyObject *__pyx_n_u_H40000;
static PyObject *__pyx_kp_u_H40000_0;
static PyObject *__pyx_n_u_ID;
static PyObject *__pyx_kp_u_Identity;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_u_KNOB;
static PyObject *__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e;
static PyObject *__pyx_kp_u_KNOB_should_be_name_of_Sextupole;
static PyObject *__pyx_n_u_KWD;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_u_LOC;
static PyObject *__pyx_n_u_LOWER;
static PyObject *__pyx_n_u_MA;
static PyObject *__pyx_n_u_MAX;
static PyObject *__pyx_n_u_MAXIMIZE;
static PyObject *__pyx_n_u_MA_SIGMA;
static PyObject *__pyx_n_u_MIN;
static PyObject *__pyx_n_u_MINIMIZE;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_u_NAME;
static PyObject *__pyx_n_u_NUMBER;
static PyObject *__pyx_n_s_NameError;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_kp_u_Number_args_for;
static PyObject *__pyx_n_u_OPTIMIZE;
static PyObject *__pyx_n_s_Parser;
static PyObject *__pyx_n_s_Parser___reduce_cython;
static PyObject *__pyx_n_s_Parser___setstate_cython;
static PyObject *__pyx_kp_u_Parser_eat_Expect;
static PyObject *__pyx_kp_u_Parser_is_not_linked_to_database;
static PyObject *__pyx_n_s_Parser_parse;
static PyObject *__pyx_n_u_REGEX;
static PyObject *__pyx_kp_u_Redefined_AIM_DQX_at_line;
static PyObject *__pyx_kp_u_Redefined_AIM_DQY_at_line;
static PyObject *__pyx_kp_u_Redefined_Var;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_u_SQRT;
static PyObject *__pyx_n_u_STEP;
static PyObject *__pyx_n_s_SyntaxError;
static PyObject *__pyx_n_u_TWS;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_u_UPPER;
static PyObject *__pyx_kp_u_Undefined_ID;
static PyObject *__pyx_kp_u_Unknown_element_name;
static PyObject *__pyx_kp_u_Unknown_syntax;
static PyObject *__pyx_n_u_VAR;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_u_Wx;
static PyObject *__pyx_n_u_Wy;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__11;
static PyObject *__pyx_n_s__12;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_u__18;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s__34;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_kp_u_at;
static PyObject *__pyx_kp_u_at_column;
static PyObject *__pyx_kp_u_at_line;
static PyObject *__pyx_kp_u_at_line_2;
static PyObject *__pyx_kp_u_at_line_3;
static PyObject *__pyx_n_s_atpy_core_parser_parser;
static PyObject *__pyx_kp_s_atpy_core_parser_parser_pyx;
static PyObject *__pyx_kp_u_but_got;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_u_column;
static PyObject *__pyx_kp_u_column_2;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_u_d2Qx;
static PyObject *__pyx_n_u_d2Qy;
static PyObject *__pyx_n_u_d3Qx;
static PyObject *__pyx_n_u_d3Qy;
static PyObject *__pyx_n_u_dQx;
static PyObject *__pyx_n_u_dQy;
static PyObject *__pyx_n_u_dalphax;
static PyObject *__pyx_n_u_dalphaydbetay;
static PyObject *__pyx_n_u_dbetax;
static PyObject *__pyx_n_u_ddbetax;
static PyObject *__pyx_n_u_ddbetay;
static PyObject *__pyx_n_u_ddetax;
static PyObject *__pyx_n_u_detapx;
static PyObject *__pyx_n_u_detax;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_u_dnux_dJx;
static PyObject *__pyx_kp_u_dnux_dJx_0;
static PyObject *__pyx_n_u_dnux_dJy;
static PyObject *__pyx_kp_u_dnux_dJy_0;
static PyObject *__pyx_n_u_dnuy_dJy;
static PyObject *__pyx_kp_u_dnuy_dJy_0;
static PyObject *__pyx_n_s_eids;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_fullmatch;
static PyObject *__pyx_kp_u_function;
static PyObject *__pyx_kp_u_function_is_not_correct;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_high_Qy;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_in_line;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_kp_u_is_invalid_at_line;
static PyObject *__pyx_kp_u_is_invalid_keyword_at_line;
static PyObject *__pyx_kp_u_is_invalid_keyword_for;
static PyObject *__pyx_kp_u_is_not_allowed_with_position_at;
static PyObject *__pyx_kp_u_is_redefined_at_line;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_u_lower_Qx;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_kp_u_out_or_range_of_element;
static PyObject *__pyx_n_s_parse;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_u_shouldn_t_be_the_same_as;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_u_sum_sqr_Qx;
static PyObject *__pyx_n_u_sum_sqr_Qy;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value2enum;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_kp_u_which_might_cause_error_depende;
static PyObject *__pyx_kp_u_with;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_4atpy_4core_6parser_6parser_6Parser___cinit__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_eids); /* proto */
static void __pyx_pf_4atpy_4core_6parser_6parser_6Parser_2__dealloc__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_4parse(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_5lexer___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_13current_token___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10elems_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_4eids___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_8id_table___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10isdatabase___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_9vars_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_6tokens___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_5codes___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10term_names___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4atpy_4core_6parser_6parser_Parser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
#endif
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_USE_MODULE_STATE
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_4atpy_4core_6parser_5lexer_Token;
  PyTypeObject *__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer;
  PyTypeObject *__pyx_ptype_4atpy_4core_6parser_6parser_Parser;
  PyObject *__pyx_type_4atpy_4core_6parser_6parser_Parser;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_1;
  PyObject *__pyx_n_u_ABS;
  PyObject *__pyx_n_u_AIM_DQX;
  PyObject *__pyx_n_u_AIM_DQY;
  PyObject *__pyx_n_u_ASSIGN;
  PyObject *__pyx_n_u_CHROM;
  PyObject *__pyx_n_u_CONSTRAINT;
  PyObject *__pyx_kp_u_Co_KNOB;
  PyObject *__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a;
  PyObject *__pyx_n_u_DA;
  PyObject *__pyx_n_u_DA_SIGMA;
  PyObject *__pyx_n_u_DELAY;
  PyObject *__pyx_n_u_DIM;
  PyObject *__pyx_n_u_END;
  PyObject *__pyx_n_u_EOF;
  PyObject *__pyx_n_u_EXPR;
  PyObject *__pyx_n_u_FUN;
  PyObject *__pyx_n_u_GLB;
  PyObject *__pyx_kp_u_Global_property;
  PyObject *__pyx_kp_u_Global_property_is_not_allowed_i;
  PyObject *__pyx_n_u_H00220;
  PyObject *__pyx_kp_u_H00220_0;
  PyObject *__pyx_n_u_H00310;
  PyObject *__pyx_kp_u_H00310_0;
  PyObject *__pyx_n_u_H00400;
  PyObject *__pyx_kp_u_H00400_0;
  PyObject *__pyx_n_u_H11110;
  PyObject *__pyx_kp_u_H11110_0;
  PyObject *__pyx_n_u_H11200;
  PyObject *__pyx_kp_u_H11200_0;
  PyObject *__pyx_n_u_H20020;
  PyObject *__pyx_kp_u_H20020_0;
  PyObject *__pyx_n_u_H20110;
  PyObject *__pyx_kp_u_H20110_0;
  PyObject *__pyx_n_u_H20200;
  PyObject *__pyx_kp_u_H20200_0;
  PyObject *__pyx_n_u_H22000;
  PyObject *__pyx_kp_u_H22000_0;
  PyObject *__pyx_n_u_H31000;
  PyObject *__pyx_kp_u_H31000_0;
  PyObject *__pyx_n_u_H40000;
  PyObject *__pyx_kp_u_H40000_0;
  PyObject *__pyx_n_u_ID;
  PyObject *__pyx_kp_u_Identity;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_n_u_KNOB;
  PyObject *__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e;
  PyObject *__pyx_kp_u_KNOB_should_be_name_of_Sextupole;
  PyObject *__pyx_n_u_KWD;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_n_u_LOC;
  PyObject *__pyx_n_u_LOWER;
  PyObject *__pyx_n_u_MA;
  PyObject *__pyx_n_u_MAX;
  PyObject *__pyx_n_u_MAXIMIZE;
  PyObject *__pyx_n_u_MA_SIGMA;
  PyObject *__pyx_n_u_MIN;
  PyObject *__pyx_n_u_MINIMIZE;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_u_NAME;
  PyObject *__pyx_n_u_NUMBER;
  PyObject *__pyx_n_s_NameError;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_kp_u_Number_args_for;
  PyObject *__pyx_n_u_OPTIMIZE;
  PyObject *__pyx_n_s_Parser;
  PyObject *__pyx_n_s_Parser___reduce_cython;
  PyObject *__pyx_n_s_Parser___setstate_cython;
  PyObject *__pyx_kp_u_Parser_eat_Expect;
  PyObject *__pyx_kp_u_Parser_is_not_linked_to_database;
  PyObject *__pyx_n_s_Parser_parse;
  PyObject *__pyx_n_u_REGEX;
  PyObject *__pyx_kp_u_Redefined_AIM_DQX_at_line;
  PyObject *__pyx_kp_u_Redefined_AIM_DQY_at_line;
  PyObject *__pyx_kp_u_Redefined_Var;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_u_SQRT;
  PyObject *__pyx_n_u_STEP;
  PyObject *__pyx_n_s_SyntaxError;
  PyObject *__pyx_n_u_TWS;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_u_UPPER;
  PyObject *__pyx_kp_u_Undefined_ID;
  PyObject *__pyx_kp_u_Unknown_element_name;
  PyObject *__pyx_kp_u_Unknown_syntax;
  PyObject *__pyx_n_u_VAR;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_u_Wx;
  PyObject *__pyx_n_u_Wy;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_kp_u__11;
  PyObject *__pyx_n_s__12;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__13;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_kp_u__15;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_kp_u__17;
  PyObject *__pyx_kp_u__18;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_n_s__34;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_kp_u__9;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_kp_u_at;
  PyObject *__pyx_kp_u_at_column;
  PyObject *__pyx_kp_u_at_line;
  PyObject *__pyx_kp_u_at_line_2;
  PyObject *__pyx_kp_u_at_line_3;
  PyObject *__pyx_n_s_atpy_core_parser_parser;
  PyObject *__pyx_kp_s_atpy_core_parser_parser_pyx;
  PyObject *__pyx_kp_u_but_got;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_kp_u_column;
  PyObject *__pyx_kp_u_column_2;
  PyObject *__pyx_n_s_compile;
  PyObject *__pyx_n_u_d2Qx;
  PyObject *__pyx_n_u_d2Qy;
  PyObject *__pyx_n_u_d3Qx;
  PyObject *__pyx_n_u_d3Qy;
  PyObject *__pyx_n_u_dQx;
  PyObject *__pyx_n_u_dQy;
  PyObject *__pyx_n_u_dalphax;
  PyObject *__pyx_n_u_dalphaydbetay;
  PyObject *__pyx_n_u_dbetax;
  PyObject *__pyx_n_u_ddbetax;
  PyObject *__pyx_n_u_ddbetay;
  PyObject *__pyx_n_u_ddetax;
  PyObject *__pyx_n_u_detapx;
  PyObject *__pyx_n_u_detax;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_u_dnux_dJx;
  PyObject *__pyx_kp_u_dnux_dJx_0;
  PyObject *__pyx_n_u_dnux_dJy;
  PyObject *__pyx_kp_u_dnux_dJy_0;
  PyObject *__pyx_n_u_dnuy_dJy;
  PyObject *__pyx_kp_u_dnuy_dJy_0;
  PyObject *__pyx_n_s_eids;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_fullmatch;
  PyObject *__pyx_kp_u_function;
  PyObject *__pyx_kp_u_function_is_not_correct;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_u_high_Qy;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_kp_u_in_line;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_is_invalid_at_line;
  PyObject *__pyx_kp_u_is_invalid_keyword_at_line;
  PyObject *__pyx_kp_u_is_invalid_keyword_for;
  PyObject *__pyx_kp_u_is_not_allowed_with_position_at;
  PyObject *__pyx_kp_u_is_redefined_at_line;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_u_lower_Qx;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_node;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_kp_u_out_or_range_of_element;
  PyObject *__pyx_n_s_parse;
  PyObject *__pyx_n_s_pyx_capi;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_kp_u_shouldn_t_be_the_same_as;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_u_sum_sqr_Qx;
  PyObject *__pyx_n_u_sum_sqr_Qy;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_value2enum;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_warn;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_kp_u_which_might_cause_error_depende;
  PyObject *__pyx_kp_u_with;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_4atpy_4core_6parser_5lexer_Token);
  Py_CLEAR(clear_module_state->__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer);
  Py_CLEAR(clear_module_state->__pyx_ptype_4atpy_4core_6parser_6parser_Parser);
  Py_CLEAR(clear_module_state->__pyx_type_4atpy_4core_6parser_6parser_Parser);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1);
  Py_CLEAR(clear_module_state->__pyx_n_u_ABS);
  Py_CLEAR(clear_module_state->__pyx_n_u_AIM_DQX);
  Py_CLEAR(clear_module_state->__pyx_n_u_AIM_DQY);
  Py_CLEAR(clear_module_state->__pyx_n_u_ASSIGN);
  Py_CLEAR(clear_module_state->__pyx_n_u_CHROM);
  Py_CLEAR(clear_module_state->__pyx_n_u_CONSTRAINT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Co_KNOB);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a);
  Py_CLEAR(clear_module_state->__pyx_n_u_DA);
  Py_CLEAR(clear_module_state->__pyx_n_u_DA_SIGMA);
  Py_CLEAR(clear_module_state->__pyx_n_u_DELAY);
  Py_CLEAR(clear_module_state->__pyx_n_u_DIM);
  Py_CLEAR(clear_module_state->__pyx_n_u_END);
  Py_CLEAR(clear_module_state->__pyx_n_u_EOF);
  Py_CLEAR(clear_module_state->__pyx_n_u_EXPR);
  Py_CLEAR(clear_module_state->__pyx_n_u_FUN);
  Py_CLEAR(clear_module_state->__pyx_n_u_GLB);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Global_property);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Global_property_is_not_allowed_i);
  Py_CLEAR(clear_module_state->__pyx_n_u_H00220);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H00220_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H00310);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H00310_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H00400);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H00400_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H11110);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H11110_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H11200);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H11200_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H20020);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H20020_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H20110);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H20110_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H20200);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H20200_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H22000);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H22000_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H31000);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H31000_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_H40000);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H40000_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_ID);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Identity);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_n_u_KNOB);
  Py_CLEAR(clear_module_state->__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
  Py_CLEAR(clear_module_state->__pyx_n_u_KWD);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_n_u_LOC);
  Py_CLEAR(clear_module_state->__pyx_n_u_LOWER);
  Py_CLEAR(clear_module_state->__pyx_n_u_MA);
  Py_CLEAR(clear_module_state->__pyx_n_u_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_u_MAXIMIZE);
  Py_CLEAR(clear_module_state->__pyx_n_u_MA_SIGMA);
  Py_CLEAR(clear_module_state->__pyx_n_u_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_u_MINIMIZE);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_u_NAME);
  Py_CLEAR(clear_module_state->__pyx_n_u_NUMBER);
  Py_CLEAR(clear_module_state->__pyx_n_s_NameError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_args_for);
  Py_CLEAR(clear_module_state->__pyx_n_u_OPTIMIZE);
  Py_CLEAR(clear_module_state->__pyx_n_s_Parser);
  Py_CLEAR(clear_module_state->__pyx_n_s_Parser___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Parser___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Parser_eat_Expect);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Parser_is_not_linked_to_database);
  Py_CLEAR(clear_module_state->__pyx_n_s_Parser_parse);
  Py_CLEAR(clear_module_state->__pyx_n_u_REGEX);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Redefined_AIM_DQX_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Redefined_AIM_DQY_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Redefined_Var);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_u_SQRT);
  Py_CLEAR(clear_module_state->__pyx_n_u_STEP);
  Py_CLEAR(clear_module_state->__pyx_n_s_SyntaxError);
  Py_CLEAR(clear_module_state->__pyx_n_u_TWS);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_u_UPPER);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Undefined_ID);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_element_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_syntax);
  Py_CLEAR(clear_module_state->__pyx_n_u_VAR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_u_Wx);
  Py_CLEAR(clear_module_state->__pyx_n_u_Wy);
  Py_CLEAR(clear_module_state->__pyx_kp_u__10);
  Py_CLEAR(clear_module_state->__pyx_kp_u__11);
  Py_CLEAR(clear_module_state->__pyx_n_s__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__13);
  Py_CLEAR(clear_module_state->__pyx_kp_u__14);
  Py_CLEAR(clear_module_state->__pyx_kp_u__15);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__18);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__34);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_kp_u__9);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at_column);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at_line_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at_line_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_atpy_core_parser_parser);
  Py_CLEAR(clear_module_state->__pyx_kp_s_atpy_core_parser_parser_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_u_but_got);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_kp_u_column);
  Py_CLEAR(clear_module_state->__pyx_kp_u_column_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_compile);
  Py_CLEAR(clear_module_state->__pyx_n_u_d2Qx);
  Py_CLEAR(clear_module_state->__pyx_n_u_d2Qy);
  Py_CLEAR(clear_module_state->__pyx_n_u_d3Qx);
  Py_CLEAR(clear_module_state->__pyx_n_u_d3Qy);
  Py_CLEAR(clear_module_state->__pyx_n_u_dQx);
  Py_CLEAR(clear_module_state->__pyx_n_u_dQy);
  Py_CLEAR(clear_module_state->__pyx_n_u_dalphax);
  Py_CLEAR(clear_module_state->__pyx_n_u_dalphaydbetay);
  Py_CLEAR(clear_module_state->__pyx_n_u_dbetax);
  Py_CLEAR(clear_module_state->__pyx_n_u_ddbetax);
  Py_CLEAR(clear_module_state->__pyx_n_u_ddbetay);
  Py_CLEAR(clear_module_state->__pyx_n_u_ddetax);
  Py_CLEAR(clear_module_state->__pyx_n_u_detapx);
  Py_CLEAR(clear_module_state->__pyx_n_u_detax);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_u_dnux_dJx);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dnux_dJx_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_dnux_dJy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dnux_dJy_0);
  Py_CLEAR(clear_module_state->__pyx_n_u_dnuy_dJy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_dnuy_dJy_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_eids);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_fullmatch);
  Py_CLEAR(clear_module_state->__pyx_kp_u_function);
  Py_CLEAR(clear_module_state->__pyx_kp_u_function_is_not_correct);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_u_high_Qy);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_kp_u_in_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_invalid_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_invalid_keyword_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_invalid_keyword_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_allowed_with_position_at);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_redefined_at_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_u_lower_Qx);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_node);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_out_or_range_of_element);
  Py_CLEAR(clear_module_state->__pyx_n_s_parse);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_capi);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_shouldn_t_be_the_same_as);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_u_sum_sqr_Qx);
  Py_CLEAR(clear_module_state->__pyx_n_u_sum_sqr_Qy);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_value2enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_warn);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_kp_u_which_might_cause_error_depende);
  Py_CLEAR(clear_module_state->__pyx_kp_u_with);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_4atpy_4core_6parser_5lexer_Token);
  Py_VISIT(traverse_module_state->__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer);
  Py_VISIT(traverse_module_state->__pyx_ptype_4atpy_4core_6parser_6parser_Parser);
  Py_VISIT(traverse_module_state->__pyx_type_4atpy_4core_6parser_6parser_Parser);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1);
  Py_VISIT(traverse_module_state->__pyx_n_u_ABS);
  Py_VISIT(traverse_module_state->__pyx_n_u_AIM_DQX);
  Py_VISIT(traverse_module_state->__pyx_n_u_AIM_DQY);
  Py_VISIT(traverse_module_state->__pyx_n_u_ASSIGN);
  Py_VISIT(traverse_module_state->__pyx_n_u_CHROM);
  Py_VISIT(traverse_module_state->__pyx_n_u_CONSTRAINT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Co_KNOB);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a);
  Py_VISIT(traverse_module_state->__pyx_n_u_DA);
  Py_VISIT(traverse_module_state->__pyx_n_u_DA_SIGMA);
  Py_VISIT(traverse_module_state->__pyx_n_u_DELAY);
  Py_VISIT(traverse_module_state->__pyx_n_u_DIM);
  Py_VISIT(traverse_module_state->__pyx_n_u_END);
  Py_VISIT(traverse_module_state->__pyx_n_u_EOF);
  Py_VISIT(traverse_module_state->__pyx_n_u_EXPR);
  Py_VISIT(traverse_module_state->__pyx_n_u_FUN);
  Py_VISIT(traverse_module_state->__pyx_n_u_GLB);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Global_property);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Global_property_is_not_allowed_i);
  Py_VISIT(traverse_module_state->__pyx_n_u_H00220);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H00220_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H00310);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H00310_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H00400);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H00400_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H11110);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H11110_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H11200);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H11200_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H20020);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H20020_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H20110);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H20110_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H20200);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H20200_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H22000);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H22000_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H31000);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H31000_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_H40000);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H40000_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_ID);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Identity);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_n_u_KNOB);
  Py_VISIT(traverse_module_state->__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
  Py_VISIT(traverse_module_state->__pyx_n_u_KWD);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_n_u_LOC);
  Py_VISIT(traverse_module_state->__pyx_n_u_LOWER);
  Py_VISIT(traverse_module_state->__pyx_n_u_MA);
  Py_VISIT(traverse_module_state->__pyx_n_u_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_u_MAXIMIZE);
  Py_VISIT(traverse_module_state->__pyx_n_u_MA_SIGMA);
  Py_VISIT(traverse_module_state->__pyx_n_u_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_u_MINIMIZE);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_u_NAME);
  Py_VISIT(traverse_module_state->__pyx_n_u_NUMBER);
  Py_VISIT(traverse_module_state->__pyx_n_s_NameError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_args_for);
  Py_VISIT(traverse_module_state->__pyx_n_u_OPTIMIZE);
  Py_VISIT(traverse_module_state->__pyx_n_s_Parser);
  Py_VISIT(traverse_module_state->__pyx_n_s_Parser___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Parser___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Parser_eat_Expect);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Parser_is_not_linked_to_database);
  Py_VISIT(traverse_module_state->__pyx_n_s_Parser_parse);
  Py_VISIT(traverse_module_state->__pyx_n_u_REGEX);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Redefined_AIM_DQX_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Redefined_AIM_DQY_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Redefined_Var);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_u_SQRT);
  Py_VISIT(traverse_module_state->__pyx_n_u_STEP);
  Py_VISIT(traverse_module_state->__pyx_n_s_SyntaxError);
  Py_VISIT(traverse_module_state->__pyx_n_u_TWS);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_u_UPPER);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Undefined_ID);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_element_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_syntax);
  Py_VISIT(traverse_module_state->__pyx_n_u_VAR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_u_Wx);
  Py_VISIT(traverse_module_state->__pyx_n_u_Wy);
  Py_VISIT(traverse_module_state->__pyx_kp_u__10);
  Py_VISIT(traverse_module_state->__pyx_kp_u__11);
  Py_VISIT(traverse_module_state->__pyx_n_s__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__13);
  Py_VISIT(traverse_module_state->__pyx_kp_u__14);
  Py_VISIT(traverse_module_state->__pyx_kp_u__15);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__18);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__34);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_kp_u__9);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at_column);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at_line_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at_line_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_atpy_core_parser_parser);
  Py_VISIT(traverse_module_state->__pyx_kp_s_atpy_core_parser_parser_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_u_but_got);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_kp_u_column);
  Py_VISIT(traverse_module_state->__pyx_kp_u_column_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_compile);
  Py_VISIT(traverse_module_state->__pyx_n_u_d2Qx);
  Py_VISIT(traverse_module_state->__pyx_n_u_d2Qy);
  Py_VISIT(traverse_module_state->__pyx_n_u_d3Qx);
  Py_VISIT(traverse_module_state->__pyx_n_u_d3Qy);
  Py_VISIT(traverse_module_state->__pyx_n_u_dQx);
  Py_VISIT(traverse_module_state->__pyx_n_u_dQy);
  Py_VISIT(traverse_module_state->__pyx_n_u_dalphax);
  Py_VISIT(traverse_module_state->__pyx_n_u_dalphaydbetay);
  Py_VISIT(traverse_module_state->__pyx_n_u_dbetax);
  Py_VISIT(traverse_module_state->__pyx_n_u_ddbetax);
  Py_VISIT(traverse_module_state->__pyx_n_u_ddbetay);
  Py_VISIT(traverse_module_state->__pyx_n_u_ddetax);
  Py_VISIT(traverse_module_state->__pyx_n_u_detapx);
  Py_VISIT(traverse_module_state->__pyx_n_u_detax);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_u_dnux_dJx);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dnux_dJx_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_dnux_dJy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dnux_dJy_0);
  Py_VISIT(traverse_module_state->__pyx_n_u_dnuy_dJy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_dnuy_dJy_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_eids);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_fullmatch);
  Py_VISIT(traverse_module_state->__pyx_kp_u_function);
  Py_VISIT(traverse_module_state->__pyx_kp_u_function_is_not_correct);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_u_high_Qy);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_kp_u_in_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_invalid_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_invalid_keyword_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_invalid_keyword_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_allowed_with_position_at);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_redefined_at_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_u_lower_Qx);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_node);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_out_or_range_of_element);
  Py_VISIT(traverse_module_state->__pyx_n_s_parse);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_capi);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_shouldn_t_be_the_same_as);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_u_sum_sqr_Qx);
  Py_VISIT(traverse_module_state->__pyx_n_u_sum_sqr_Qy);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_value2enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_warn);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_kp_u_which_might_cause_error_depende);
  Py_VISIT(traverse_module_state->__pyx_kp_u_with);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_USE_MODULE_STATE
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_ptype_4atpy_4core_6parser_5lexer_Token __pyx_mstate_global->__pyx_ptype_4atpy_4core_6parser_5lexer_Token
#define __pyx_ptype_4atpy_4core_6parser_5lexer_Lexer __pyx_mstate_global->__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer
#define __pyx_ptype_4atpy_4core_6parser_6parser_Parser __pyx_mstate_global->__pyx_ptype_4atpy_4core_6parser_6parser_Parser
#define __pyx_type_4atpy_4core_6parser_6parser_Parser __pyx_mstate_global->__pyx_type_4atpy_4core_6parser_6parser_Parser
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_1 __pyx_mstate_global->__pyx_kp_u_1
#define __pyx_n_u_ABS __pyx_mstate_global->__pyx_n_u_ABS
#define __pyx_n_u_AIM_DQX __pyx_mstate_global->__pyx_n_u_AIM_DQX
#define __pyx_n_u_AIM_DQY __pyx_mstate_global->__pyx_n_u_AIM_DQY
#define __pyx_n_u_ASSIGN __pyx_mstate_global->__pyx_n_u_ASSIGN
#define __pyx_n_u_CHROM __pyx_mstate_global->__pyx_n_u_CHROM
#define __pyx_n_u_CONSTRAINT __pyx_mstate_global->__pyx_n_u_CONSTRAINT
#define __pyx_kp_u_Co_KNOB __pyx_mstate_global->__pyx_kp_u_Co_KNOB
#define __pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a __pyx_mstate_global->__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a
#define __pyx_n_u_DA __pyx_mstate_global->__pyx_n_u_DA
#define __pyx_n_u_DA_SIGMA __pyx_mstate_global->__pyx_n_u_DA_SIGMA
#define __pyx_n_u_DELAY __pyx_mstate_global->__pyx_n_u_DELAY
#define __pyx_n_u_DIM __pyx_mstate_global->__pyx_n_u_DIM
#define __pyx_n_u_END __pyx_mstate_global->__pyx_n_u_END
#define __pyx_n_u_EOF __pyx_mstate_global->__pyx_n_u_EOF
#define __pyx_n_u_EXPR __pyx_mstate_global->__pyx_n_u_EXPR
#define __pyx_n_u_FUN __pyx_mstate_global->__pyx_n_u_FUN
#define __pyx_n_u_GLB __pyx_mstate_global->__pyx_n_u_GLB
#define __pyx_kp_u_Global_property __pyx_mstate_global->__pyx_kp_u_Global_property
#define __pyx_kp_u_Global_property_is_not_allowed_i __pyx_mstate_global->__pyx_kp_u_Global_property_is_not_allowed_i
#define __pyx_n_u_H00220 __pyx_mstate_global->__pyx_n_u_H00220
#define __pyx_kp_u_H00220_0 __pyx_mstate_global->__pyx_kp_u_H00220_0
#define __pyx_n_u_H00310 __pyx_mstate_global->__pyx_n_u_H00310
#define __pyx_kp_u_H00310_0 __pyx_mstate_global->__pyx_kp_u_H00310_0
#define __pyx_n_u_H00400 __pyx_mstate_global->__pyx_n_u_H00400
#define __pyx_kp_u_H00400_0 __pyx_mstate_global->__pyx_kp_u_H00400_0
#define __pyx_n_u_H11110 __pyx_mstate_global->__pyx_n_u_H11110
#define __pyx_kp_u_H11110_0 __pyx_mstate_global->__pyx_kp_u_H11110_0
#define __pyx_n_u_H11200 __pyx_mstate_global->__pyx_n_u_H11200
#define __pyx_kp_u_H11200_0 __pyx_mstate_global->__pyx_kp_u_H11200_0
#define __pyx_n_u_H20020 __pyx_mstate_global->__pyx_n_u_H20020
#define __pyx_kp_u_H20020_0 __pyx_mstate_global->__pyx_kp_u_H20020_0
#define __pyx_n_u_H20110 __pyx_mstate_global->__pyx_n_u_H20110
#define __pyx_kp_u_H20110_0 __pyx_mstate_global->__pyx_kp_u_H20110_0
#define __pyx_n_u_H20200 __pyx_mstate_global->__pyx_n_u_H20200
#define __pyx_kp_u_H20200_0 __pyx_mstate_global->__pyx_kp_u_H20200_0
#define __pyx_n_u_H22000 __pyx_mstate_global->__pyx_n_u_H22000
#define __pyx_kp_u_H22000_0 __pyx_mstate_global->__pyx_kp_u_H22000_0
#define __pyx_n_u_H31000 __pyx_mstate_global->__pyx_n_u_H31000
#define __pyx_kp_u_H31000_0 __pyx_mstate_global->__pyx_kp_u_H31000_0
#define __pyx_n_u_H40000 __pyx_mstate_global->__pyx_n_u_H40000
#define __pyx_kp_u_H40000_0 __pyx_mstate_global->__pyx_kp_u_H40000_0
#define __pyx_n_u_ID __pyx_mstate_global->__pyx_n_u_ID
#define __pyx_kp_u_Identity __pyx_mstate_global->__pyx_kp_u_Identity
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_n_u_KNOB __pyx_mstate_global->__pyx_n_u_KNOB
#define __pyx_kp_u_KNOB_must_be_name_of_Sextupole_e __pyx_mstate_global->__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e
#define __pyx_kp_u_KNOB_should_be_name_of_Sextupole __pyx_mstate_global->__pyx_kp_u_KNOB_should_be_name_of_Sextupole
#define __pyx_n_u_KWD __pyx_mstate_global->__pyx_n_u_KWD
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_n_u_LOC __pyx_mstate_global->__pyx_n_u_LOC
#define __pyx_n_u_LOWER __pyx_mstate_global->__pyx_n_u_LOWER
#define __pyx_n_u_MA __pyx_mstate_global->__pyx_n_u_MA
#define __pyx_n_u_MAX __pyx_mstate_global->__pyx_n_u_MAX
#define __pyx_n_u_MAXIMIZE __pyx_mstate_global->__pyx_n_u_MAXIMIZE
#define __pyx_n_u_MA_SIGMA __pyx_mstate_global->__pyx_n_u_MA_SIGMA
#define __pyx_n_u_MIN __pyx_mstate_global->__pyx_n_u_MIN
#define __pyx_n_u_MINIMIZE __pyx_mstate_global->__pyx_n_u_MINIMIZE
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_u_NAME __pyx_mstate_global->__pyx_n_u_NAME
#define __pyx_n_u_NUMBER __pyx_mstate_global->__pyx_n_u_NUMBER
#define __pyx_n_s_NameError __pyx_mstate_global->__pyx_n_s_NameError
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_kp_u_Number_args_for __pyx_mstate_global->__pyx_kp_u_Number_args_for
#define __pyx_n_u_OPTIMIZE __pyx_mstate_global->__pyx_n_u_OPTIMIZE
#define __pyx_n_s_Parser __pyx_mstate_global->__pyx_n_s_Parser
#define __pyx_n_s_Parser___reduce_cython __pyx_mstate_global->__pyx_n_s_Parser___reduce_cython
#define __pyx_n_s_Parser___setstate_cython __pyx_mstate_global->__pyx_n_s_Parser___setstate_cython
#define __pyx_kp_u_Parser_eat_Expect __pyx_mstate_global->__pyx_kp_u_Parser_eat_Expect
#define __pyx_kp_u_Parser_is_not_linked_to_database __pyx_mstate_global->__pyx_kp_u_Parser_is_not_linked_to_database
#define __pyx_n_s_Parser_parse __pyx_mstate_global->__pyx_n_s_Parser_parse
#define __pyx_n_u_REGEX __pyx_mstate_global->__pyx_n_u_REGEX
#define __pyx_kp_u_Redefined_AIM_DQX_at_line __pyx_mstate_global->__pyx_kp_u_Redefined_AIM_DQX_at_line
#define __pyx_kp_u_Redefined_AIM_DQY_at_line __pyx_mstate_global->__pyx_kp_u_Redefined_AIM_DQY_at_line
#define __pyx_kp_u_Redefined_Var __pyx_mstate_global->__pyx_kp_u_Redefined_Var
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_u_SQRT __pyx_mstate_global->__pyx_n_u_SQRT
#define __pyx_n_u_STEP __pyx_mstate_global->__pyx_n_u_STEP
#define __pyx_n_s_SyntaxError __pyx_mstate_global->__pyx_n_s_SyntaxError
#define __pyx_n_u_TWS __pyx_mstate_global->__pyx_n_u_TWS
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_u_UPPER __pyx_mstate_global->__pyx_n_u_UPPER
#define __pyx_kp_u_Undefined_ID __pyx_mstate_global->__pyx_kp_u_Undefined_ID
#define __pyx_kp_u_Unknown_element_name __pyx_mstate_global->__pyx_kp_u_Unknown_element_name
#define __pyx_kp_u_Unknown_syntax __pyx_mstate_global->__pyx_kp_u_Unknown_syntax
#define __pyx_n_u_VAR __pyx_mstate_global->__pyx_n_u_VAR
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_u_Wx __pyx_mstate_global->__pyx_n_u_Wx
#define __pyx_n_u_Wy __pyx_mstate_global->__pyx_n_u_Wy
#define __pyx_kp_u__10 __pyx_mstate_global->__pyx_kp_u__10
#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11
#define __pyx_n_s__12 __pyx_mstate_global->__pyx_n_s__12
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__13 __pyx_mstate_global->__pyx_kp_u__13
#define __pyx_kp_u__14 __pyx_mstate_global->__pyx_kp_u__14
#define __pyx_kp_u__15 __pyx_mstate_global->__pyx_kp_u__15
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17
#define __pyx_kp_u__18 __pyx_mstate_global->__pyx_kp_u__18
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_n_s__34 __pyx_mstate_global->__pyx_n_s__34
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_kp_u__9 __pyx_mstate_global->__pyx_kp_u__9
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_kp_u_at __pyx_mstate_global->__pyx_kp_u_at
#define __pyx_kp_u_at_column __pyx_mstate_global->__pyx_kp_u_at_column
#define __pyx_kp_u_at_line __pyx_mstate_global->__pyx_kp_u_at_line
#define __pyx_kp_u_at_line_2 __pyx_mstate_global->__pyx_kp_u_at_line_2
#define __pyx_kp_u_at_line_3 __pyx_mstate_global->__pyx_kp_u_at_line_3
#define __pyx_n_s_atpy_core_parser_parser __pyx_mstate_global->__pyx_n_s_atpy_core_parser_parser
#define __pyx_kp_s_atpy_core_parser_parser_pyx __pyx_mstate_global->__pyx_kp_s_atpy_core_parser_parser_pyx
#define __pyx_kp_u_but_got __pyx_mstate_global->__pyx_kp_u_but_got
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_kp_u_column __pyx_mstate_global->__pyx_kp_u_column
#define __pyx_kp_u_column_2 __pyx_mstate_global->__pyx_kp_u_column_2
#define __pyx_n_s_compile __pyx_mstate_global->__pyx_n_s_compile
#define __pyx_n_u_d2Qx __pyx_mstate_global->__pyx_n_u_d2Qx
#define __pyx_n_u_d2Qy __pyx_mstate_global->__pyx_n_u_d2Qy
#define __pyx_n_u_d3Qx __pyx_mstate_global->__pyx_n_u_d3Qx
#define __pyx_n_u_d3Qy __pyx_mstate_global->__pyx_n_u_d3Qy
#define __pyx_n_u_dQx __pyx_mstate_global->__pyx_n_u_dQx
#define __pyx_n_u_dQy __pyx_mstate_global->__pyx_n_u_dQy
#define __pyx_n_u_dalphax __pyx_mstate_global->__pyx_n_u_dalphax
#define __pyx_n_u_dalphaydbetay __pyx_mstate_global->__pyx_n_u_dalphaydbetay
#define __pyx_n_u_dbetax __pyx_mstate_global->__pyx_n_u_dbetax
#define __pyx_n_u_ddbetax __pyx_mstate_global->__pyx_n_u_ddbetax
#define __pyx_n_u_ddbetay __pyx_mstate_global->__pyx_n_u_ddbetay
#define __pyx_n_u_ddetax __pyx_mstate_global->__pyx_n_u_ddetax
#define __pyx_n_u_detapx __pyx_mstate_global->__pyx_n_u_detapx
#define __pyx_n_u_detax __pyx_mstate_global->__pyx_n_u_detax
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_u_dnux_dJx __pyx_mstate_global->__pyx_n_u_dnux_dJx
#define __pyx_kp_u_dnux_dJx_0 __pyx_mstate_global->__pyx_kp_u_dnux_dJx_0
#define __pyx_n_u_dnux_dJy __pyx_mstate_global->__pyx_n_u_dnux_dJy
#define __pyx_kp_u_dnux_dJy_0 __pyx_mstate_global->__pyx_kp_u_dnux_dJy_0
#define __pyx_n_u_dnuy_dJy __pyx_mstate_global->__pyx_n_u_dnuy_dJy
#define __pyx_kp_u_dnuy_dJy_0 __pyx_mstate_global->__pyx_kp_u_dnuy_dJy_0
#define __pyx_n_s_eids __pyx_mstate_global->__pyx_n_s_eids
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_fullmatch __pyx_mstate_global->__pyx_n_s_fullmatch
#define __pyx_kp_u_function __pyx_mstate_global->__pyx_kp_u_function
#define __pyx_kp_u_function_is_not_correct __pyx_mstate_global->__pyx_kp_u_function_is_not_correct
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_u_high_Qy __pyx_mstate_global->__pyx_n_u_high_Qy
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_kp_u_in_line __pyx_mstate_global->__pyx_kp_u_in_line
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_is_invalid_at_line __pyx_mstate_global->__pyx_kp_u_is_invalid_at_line
#define __pyx_kp_u_is_invalid_keyword_at_line __pyx_mstate_global->__pyx_kp_u_is_invalid_keyword_at_line
#define __pyx_kp_u_is_invalid_keyword_for __pyx_mstate_global->__pyx_kp_u_is_invalid_keyword_for
#define __pyx_kp_u_is_not_allowed_with_position_at __pyx_mstate_global->__pyx_kp_u_is_not_allowed_with_position_at
#define __pyx_kp_u_is_redefined_at_line __pyx_mstate_global->__pyx_kp_u_is_redefined_at_line
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_u_lower_Qx __pyx_mstate_global->__pyx_n_u_lower_Qx
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_node __pyx_mstate_global->__pyx_n_s_node
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_kp_u_out_or_range_of_element __pyx_mstate_global->__pyx_kp_u_out_or_range_of_element
#define __pyx_n_s_parse __pyx_mstate_global->__pyx_n_s_parse
#define __pyx_n_s_pyx_capi __pyx_mstate_global->__pyx_n_s_pyx_capi
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_re __pyx_mstate_global->__pyx_n_s_re
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_kp_u_shouldn_t_be_the_same_as __pyx_mstate_global->__pyx_kp_u_shouldn_t_be_the_same_as
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_u_sum_sqr_Qx __pyx_mstate_global->__pyx_n_u_sum_sqr_Qx
#define __pyx_n_u_sum_sqr_Qy __pyx_mstate_global->__pyx_n_u_sum_sqr_Qy
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_value2enum __pyx_mstate_global->__pyx_n_s_value2enum
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_warn __pyx_mstate_global->__pyx_n_s_warn
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_kp_u_which_might_cause_error_depende __pyx_mstate_global->__pyx_kp_u_which_might_cause_error_depende
#define __pyx_kp_u_with __pyx_mstate_global->__pyx_kp_u_with
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#endif
/* #### Code section: module_code ### */

/* "atpy/core/parser/parser.pyx":25
 * 
 * cdef class Parser:  #
 *     def __cinit__(self, dict eids):             # <<<<<<<<<<<<<<
 *         self.lexer = Lexer()  #
 *         self.eids = eids
 */

/* Python wrapper */
static int __pyx_pw_4atpy_4core_6parser_6parser_6Parser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_4core_6parser_6parser_6Parser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eids = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eids,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eids,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_eids)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 25, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_eids = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 25, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eids), (&PyDict_Type), 1, "eids", 1))) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser___cinit__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self), __pyx_v_eids);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_4core_6parser_6parser_6Parser___cinit__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_eids) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "atpy/core/parser/parser.pyx":26
 * cdef class Parser:  #
 *     def __cinit__(self, dict eids):
 *         self.lexer = Lexer()  #             # <<<<<<<<<<<<<<
 *         self.eids = eids
 *         self.elems_name = list(eids.keys() )
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->lexer);
  __Pyx_DECREF((PyObject *)__pyx_v_self->lexer);
  __pyx_v_self->lexer = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":27
 *     def __cinit__(self, dict eids):
 *         self.lexer = Lexer()  #
 *         self.eids = eids             # <<<<<<<<<<<<<<
 *         self.elems_name = list(eids.keys() )
 *         self.isdatabase = False
 */
  __Pyx_INCREF(__pyx_v_eids);
  __Pyx_GIVEREF(__pyx_v_eids);
  __Pyx_GOTREF(__pyx_v_self->eids);
  __Pyx_DECREF(__pyx_v_self->eids);
  __pyx_v_self->eids = __pyx_v_eids;

  /* "atpy/core/parser/parser.pyx":28
 *         self.lexer = Lexer()  #
 *         self.eids = eids
 *         self.elems_name = list(eids.keys() )             # <<<<<<<<<<<<<<
 *         self.isdatabase = False
 *         self.vars_name = []
 */
  if (unlikely(__pyx_v_eids == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 28, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_eids); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->elems_name);
  __Pyx_DECREF(__pyx_v_self->elems_name);
  __pyx_v_self->elems_name = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":29
 *         self.eids = eids
 *         self.elems_name = list(eids.keys() )
 *         self.isdatabase = False             # <<<<<<<<<<<<<<
 *         self.vars_name = []
 *         self.vars_elem_name = []
 */
  __pyx_v_self->isdatabase = 0;

  /* "atpy/core/parser/parser.pyx":30
 *         self.elems_name = list(eids.keys() )
 *         self.isdatabase = False
 *         self.vars_name = []             # <<<<<<<<<<<<<<
 *         self.vars_elem_name = []
 *         self.id_table=[]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->vars_name);
  __Pyx_DECREF(__pyx_v_self->vars_name);
  __pyx_v_self->vars_name = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":31
 *         self.isdatabase = False
 *         self.vars_name = []
 *         self.vars_elem_name = []             # <<<<<<<<<<<<<<
 *         self.id_table=[]
 *         self.tokens = []
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->vars_elem_name);
  __Pyx_DECREF(__pyx_v_self->vars_elem_name);
  __pyx_v_self->vars_elem_name = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":32
 *         self.vars_name = []
 *         self.vars_elem_name = []
 *         self.id_table=[]             # <<<<<<<<<<<<<<
 *         self.tokens = []
 *         self.term_names=[]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->id_table);
  __Pyx_DECREF(__pyx_v_self->id_table);
  __pyx_v_self->id_table = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":33
 *         self.vars_elem_name = []
 *         self.id_table=[]
 *         self.tokens = []             # <<<<<<<<<<<<<<
 *         self.term_names=[]
 *         self.ordered_var_positions=[]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->tokens);
  __Pyx_DECREF(__pyx_v_self->tokens);
  __pyx_v_self->tokens = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":34
 *         self.id_table=[]
 *         self.tokens = []
 *         self.term_names=[]             # <<<<<<<<<<<<<<
 *         self.ordered_var_positions=[]
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->term_names);
  __Pyx_DECREF(__pyx_v_self->term_names);
  __pyx_v_self->term_names = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":35
 *         self.tokens = []
 *         self.term_names=[]
 *         self.ordered_var_positions=[]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->ordered_var_positions);
  __Pyx_DECREF(__pyx_v_self->ordered_var_positions);
  __pyx_v_self->ordered_var_positions = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":25
 * 
 * cdef class Parser:  #
 *     def __cinit__(self, dict eids):             # <<<<<<<<<<<<<<
 *         self.lexer = Lexer()  #
 *         self.eids = eids
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":38
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #print("Parser.__dealloc__")
 *         self.line=NULL
 */

/* Python wrapper */
static void __pyx_pw_4atpy_4core_6parser_6parser_6Parser_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4atpy_4core_6parser_6parser_6Parser_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4atpy_4core_6parser_6parser_6Parser_2__dealloc__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4atpy_4core_6parser_6parser_6Parser_2__dealloc__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "atpy/core/parser/parser.pyx":40
 *     def __dealloc__(self):
 *         #print("Parser.__dealloc__")
 *         self.line=NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->line = NULL;

  /* "atpy/core/parser/parser.pyx":38
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #print("Parser.__dealloc__")
 *         self.line=NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":43
 * 
 * 
 *     cdef void _set_database(self,CppBeamLine* line)except*:             # <<<<<<<<<<<<<<
 *         self.line = line
 *         self.isdatabase = True
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser__set_database(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, CppBeamLine *__pyx_v_line) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_database", 0);

  /* "atpy/core/parser/parser.pyx":44
 * 
 *     cdef void _set_database(self,CppBeamLine* line)except*:
 *         self.line = line             # <<<<<<<<<<<<<<
 *         self.isdatabase = True
 * 
 */
  __pyx_v_self->line = __pyx_v_line;

  /* "atpy/core/parser/parser.pyx":45
 *     cdef void _set_database(self,CppBeamLine* line)except*:
 *         self.line = line
 *         self.isdatabase = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->isdatabase = 1;

  /* "atpy/core/parser/parser.pyx":43
 * 
 * 
 *     cdef void _set_database(self,CppBeamLine* line)except*:             # <<<<<<<<<<<<<<
 *         self.line = line
 *         self.isdatabase = True
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":49
 * 
 * 
 *     cdef void eat(self,  str kind)except*:             # <<<<<<<<<<<<<<
 *         if self.current_token.kind == kind:
 *             self.term_names.append(self.current_token.value)
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_eat(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_kind) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eat", 0);

  /* "atpy/core/parser/parser.pyx":50
 * 
 *     cdef void eat(self,  str kind)except*:
 *         if self.current_token.kind == kind:             # <<<<<<<<<<<<<<
 *             self.term_names.append(self.current_token.value)
 *             self.current_token = self.lexer.get_next_token()
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_v_kind, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":51
 *     cdef void eat(self,  str kind)except*:
 *         if self.current_token.kind == kind:
 *             self.term_names.append(self.current_token.value)             # <<<<<<<<<<<<<<
 *             self.current_token = self.lexer.get_next_token()
 *         else:
 */
    if (unlikely(__pyx_v_self->term_names == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 51, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_v_self->current_token->value;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->term_names, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "atpy/core/parser/parser.pyx":52
 *         if self.current_token.kind == kind:
 *             self.term_names.append(self.current_token.value)
 *             self.current_token = self.lexer.get_next_token()             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f'Parser.eat:Expect {kind }, but got {self.current_token.value} in line {self.current_token.line} :\n "{self.lexer.codes[self.current_token.line-1] }"\n at column {self.current_token.column}!')
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->get_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_4atpy_4core_6parser_5lexer_Token))))) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->current_token);
    __Pyx_DECREF((PyObject *)__pyx_v_self->current_token);
    __pyx_v_self->current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "atpy/core/parser/parser.pyx":50
 * 
 *     cdef void eat(self,  str kind)except*:
 *         if self.current_token.kind == kind:             # <<<<<<<<<<<<<<
 *             self.term_names.append(self.current_token.value)
 *             self.current_token = self.lexer.get_next_token()
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":54
 *             self.current_token = self.lexer.get_next_token()
 *         else:
 *             raise ValueError(f'Parser.eat:Expect {kind }, but got {self.current_token.value} in line {self.current_token.line} :\n "{self.lexer.codes[self.current_token.line-1] }"\n at column {self.current_token.column}!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_Parser_eat_Expect);
    __pyx_t_5 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_Parser_eat_Expect);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Parser_eat_Expect);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_kind); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_5 += 10;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_in_line);
    __pyx_t_5 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_in_line);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_in_line);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_5 += 5;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_);
    if (unlikely(__pyx_v_self->lexer->codes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 54, __pyx_L1_error)
    }
    __pyx_t_8 = (__pyx_v_self->current_token->line - 1);
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_self->lexer->codes, __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_column);
    __pyx_t_5 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_at_column);
    PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u_at_column);
    __pyx_t_9 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_kp_u__2);
    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_3, 11, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 54, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":49
 * 
 * 
 *     cdef void eat(self,  str kind)except*:             # <<<<<<<<<<<<<<
 *         if self.current_token.kind == kind:
 *             self.term_names.append(self.current_token.value)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.eat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":57
 * 
 * 
 *     cdef int position(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

static int __pyx_f_4atpy_4core_6parser_6parser_6Parser_position(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  PyObject *__pyx_v_position = 0;
  PyObject *__pyx_v_n_th = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("position", 0);

  /* "atpy/core/parser/parser.pyx":60
 *         cdef:
 *             Token token
 *             position=0,n_th=0             # <<<<<<<<<<<<<<
 *         token=self.current_token
 *         if token.kind != "ID" or token.value not in self.elems_name:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_position = __pyx_int_0;
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_n_th = __pyx_int_0;

  /* "atpy/core/parser/parser.pyx":61
 *             Token token
 *             position=0,n_th=0
 *         token=self.current_token             # <<<<<<<<<<<<<<
 *         if token.kind != "ID" or token.value not in self.elems_name:
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":62
 *             position=0,n_th=0
 *         token=self.current_token
 *         if token.kind != "ID" or token.value not in self.elems_name:             # <<<<<<<<<<<<<<
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 *         self.eat("ID")
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_n_u_ID, Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_token->value, __pyx_v_self->elems_name, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":63
 *         token=self.current_token
 *         if token.kind != "ID" or token.value not in self.elems_name:
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")             # <<<<<<<<<<<<<<
 *         self.eat("ID")
 *         n_th=self.get_eid()
 */
    __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_element_name);
    __pyx_t_5 += 21;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_element_name);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unknown_element_name);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_line);
    __pyx_t_5 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_at_line);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at_line);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_5 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_column);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 63, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":62
 *             position=0,n_th=0
 *         token=self.current_token
 *         if token.kind != "ID" or token.value not in self.elems_name:             # <<<<<<<<<<<<<<
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 *         self.eat("ID")
 */
  }

  /* "atpy/core/parser/parser.pyx":64
 *         if token.kind != "ID" or token.value not in self.elems_name:
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 *         self.eat("ID")             # <<<<<<<<<<<<<<
 *         n_th=self.get_eid()
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 64, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":65
 *             raise SyntaxError(f"Unknown element name {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 *         self.eat("ID")
 *         n_th=self.get_eid()             # <<<<<<<<<<<<<<
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->get_eid(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_n_th, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":66
 *         self.eat("ID")
 *         n_th=self.get_eid()
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):             # <<<<<<<<<<<<<<
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")
 *         position=self.eids[token.value][n_th]
 */
  if (unlikely(__pyx_v_self->eids == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_5 - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_RichCompare(__pyx_v_n_th, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_self->eids == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t((-__pyx_t_5)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_n_th, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":67
 *         n_th=self.get_eid()
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")             # <<<<<<<<<<<<<<
 *         position=self.eids[token.value][n_th]
 *         return position
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_n_th, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_out_or_range_of_element);
    __pyx_t_5 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_out_or_range_of_element);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_out_or_range_of_element);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__2);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 67, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":66
 *         self.eat("ID")
 *         n_th=self.get_eid()
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):             # <<<<<<<<<<<<<<
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")
 *         position=self.eids[token.value][n_th]
 */
  }

  /* "atpy/core/parser/parser.pyx":68
 *         if n_th>len(self.eids[token.value] )-1 or n_th<-len(self.eids[token.value]):
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")
 *         position=self.eids[token.value][n_th]             # <<<<<<<<<<<<<<
 *         return position
 * 
 */
  if (unlikely(__pyx_v_self->eids == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 68, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_n_th); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_position, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "atpy/core/parser/parser.pyx":69
 *             raise IndexError(f"{n_th} out or range of element {token.value}!")
 *         position=self.eids[token.value][n_th]
 *         return position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_position); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_t_8;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":57
 * 
 * 
 *     cdef int position(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_XDECREF(__pyx_v_position);
  __Pyx_XDECREF(__pyx_v_n_th);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":73
 * 
 * 
 *     cdef tuple parameter(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

static PyObject *__pyx_f_4atpy_4core_6parser_6parser_6Parser_parameter(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  int __pyx_v_kind;
  int __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parameter", 0);

  /* "atpy/core/parser/parser.pyx":77
 *             Token token
 *             int kind,index
 *         token=self.current_token             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="KWD":
 *             kind=KWD
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":78
 *             int kind,index
 *         token=self.current_token
 *         if self.current_token.kind=="KWD":             # <<<<<<<<<<<<<<
 *             kind=KWD
 *             index = KWD_INDEX[ token.value ]
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_KWD, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":79
 *         token=self.current_token
 *         if self.current_token.kind=="KWD":
 *             kind=KWD             # <<<<<<<<<<<<<<
 *             index = KWD_INDEX[ token.value ]
 *             self.eat("KWD")
 */
    __pyx_v_kind = KWD;

    /* "atpy/core/parser/parser.pyx":80
 *         if self.current_token.kind=="KWD":
 *             kind=KWD
 *             index = KWD_INDEX[ token.value ]             # <<<<<<<<<<<<<<
 *             self.eat("KWD")
 *         elif self.current_token.kind=="TWS":
 */
    if (unlikely(__pyx_v_4atpy_4core_9interface_9constants_KWD_INDEX == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 80, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_9interface_9constants_KWD_INDEX, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_index = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":81
 *             kind=KWD
 *             index = KWD_INDEX[ token.value ]
 *             self.eat("KWD")             # <<<<<<<<<<<<<<
 *         elif self.current_token.kind=="TWS":
 *             kind=TWS
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_KWD); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":78
 *             int kind,index
 *         token=self.current_token
 *         if self.current_token.kind=="KWD":             # <<<<<<<<<<<<<<
 *             kind=KWD
 *             index = KWD_INDEX[ token.value ]
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":82
 *             index = KWD_INDEX[ token.value ]
 *             self.eat("KWD")
 *         elif self.current_token.kind=="TWS":             # <<<<<<<<<<<<<<
 *             kind=TWS
 *             self.eat("TWS")
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_TWS, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":83
 *             self.eat("KWD")
 *         elif self.current_token.kind=="TWS":
 *             kind=TWS             # <<<<<<<<<<<<<<
 *             self.eat("TWS")
 *             index = TWS_INDEX[ token.value ]
 */
    __pyx_v_kind = TWS;

    /* "atpy/core/parser/parser.pyx":84
 *         elif self.current_token.kind=="TWS":
 *             kind=TWS
 *             self.eat("TWS")             # <<<<<<<<<<<<<<
 *             index = TWS_INDEX[ token.value ]
 *         elif self.current_token.kind=="LOC":
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_TWS); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":85
 *             kind=TWS
 *             self.eat("TWS")
 *             index = TWS_INDEX[ token.value ]             # <<<<<<<<<<<<<<
 *         elif self.current_token.kind=="LOC":
 *             self.eat("LOC")
 */
    if (unlikely(__pyx_v_4atpy_4core_9interface_9constants_TWS_INDEX == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 85, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_9interface_9constants_TWS_INDEX, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_index = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":82
 *             index = KWD_INDEX[ token.value ]
 *             self.eat("KWD")
 *         elif self.current_token.kind=="TWS":             # <<<<<<<<<<<<<<
 *             kind=TWS
 *             self.eat("TWS")
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":86
 *             self.eat("TWS")
 *             index = TWS_INDEX[ token.value ]
 *         elif self.current_token.kind=="LOC":             # <<<<<<<<<<<<<<
 *             self.eat("LOC")
 *             kind=LOC
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_LOC, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":87
 *             index = TWS_INDEX[ token.value ]
 *         elif self.current_token.kind=="LOC":
 *             self.eat("LOC")             # <<<<<<<<<<<<<<
 *             kind=LOC
 *             index = LOC_INDEX[ token.value ]
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_LOC); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":88
 *         elif self.current_token.kind=="LOC":
 *             self.eat("LOC")
 *             kind=LOC             # <<<<<<<<<<<<<<
 *             index = LOC_INDEX[ token.value ]
 *         elif self.current_token.kind=="GLB":
 */
    __pyx_v_kind = LOC;

    /* "atpy/core/parser/parser.pyx":89
 *             self.eat("LOC")
 *             kind=LOC
 *             index = LOC_INDEX[ token.value ]             # <<<<<<<<<<<<<<
 *         elif self.current_token.kind=="GLB":
 *             self.eat("GLB")
 */
    if (unlikely(__pyx_v_4atpy_4core_9interface_9constants_LOC_INDEX == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 89, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_9interface_9constants_LOC_INDEX, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_index = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":86
 *             self.eat("TWS")
 *             index = TWS_INDEX[ token.value ]
 *         elif self.current_token.kind=="LOC":             # <<<<<<<<<<<<<<
 *             self.eat("LOC")
 *             kind=LOC
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":90
 *             kind=LOC
 *             index = LOC_INDEX[ token.value ]
 *         elif self.current_token.kind=="GLB":             # <<<<<<<<<<<<<<
 *             self.eat("GLB")
 *             kind=GLB
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_GLB, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":91
 *             index = LOC_INDEX[ token.value ]
 *         elif self.current_token.kind=="GLB":
 *             self.eat("GLB")             # <<<<<<<<<<<<<<
 *             kind=GLB
 *             index = GLB_INDEX[ token.value ]
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_GLB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":92
 *         elif self.current_token.kind=="GLB":
 *             self.eat("GLB")
 *             kind=GLB             # <<<<<<<<<<<<<<
 *             index = GLB_INDEX[ token.value ]
 *         else:
 */
    __pyx_v_kind = GLB;

    /* "atpy/core/parser/parser.pyx":93
 *             self.eat("GLB")
 *             kind=GLB
 *             index = GLB_INDEX[ token.value ]             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError(f"Unknown syntax {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 */
    if (unlikely(__pyx_v_4atpy_4core_9interface_9constants_GLB_INDEX == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 93, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_9interface_9constants_GLB_INDEX, __pyx_v_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_index = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":90
 *             kind=LOC
 *             index = LOC_INDEX[ token.value ]
 *         elif self.current_token.kind=="GLB":             # <<<<<<<<<<<<<<
 *             self.eat("GLB")
 *             kind=GLB
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":95
 *             index = GLB_INDEX[ token.value ]
 *         else:
 *             raise SyntaxError(f"Unknown syntax {token.value} at line {self.current_token.line} column {self.current_token.column}!")             # <<<<<<<<<<<<<<
 *         return kind, index
 * 
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_5 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_line);
    __pyx_t_5 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_at_line);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at_line);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_5 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_column);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 95, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":96
 *         else:
 *             raise SyntaxError(f"Unknown syntax {token.value} at line {self.current_token.line} column {self.current_token.column}!")
 *         return kind, index             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_kind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_r = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":73
 * 
 * 
 *     cdef tuple parameter(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":100
 * 
 * 
 *     cdef AST* function(self, str func)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int start,end, kind, index, n_th,position
 */

static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_function(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_func) {
  int __pyx_v_kind;
  int __pyx_v_index;
  int __pyx_v_position;
  PyObject *__pyx_v_positions = 0;
  AST *__pyx_v_node;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  CYTHON_UNUSED long __pyx_v_i;
  AST *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int __pyx_t_14;
  RangeFunction *__pyx_t_15;
  AST *__pyx_t_16;
  BiFunction *__pyx_t_17;
  int __pyx_t_18;
  MonoFunction *__pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("function", 0);

  /* "atpy/core/parser/parser.pyx":103
 *         cdef:
 *             int start,end, kind, index, n_th,position
 *             list positions=[]             # <<<<<<<<<<<<<<
 *             AST* node
 *             Token   token
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_positions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":106
 *             AST* node
 *             Token   token
 *         node =NULL             # <<<<<<<<<<<<<<
 *         self.eat("(")
 * 
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":107
 *             Token   token
 *         node =NULL
 *         self.eat("(")             # <<<<<<<<<<<<<<
 * 
 *         if func in ("MIN", "MAX"):
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":109
 *         self.eat("(")
 * 
 *         if func in ("MIN", "MAX"):             # <<<<<<<<<<<<<<
 *             for i in range(2):
 *                 position=self.position()
 */
  __Pyx_INCREF(__pyx_v_func);
  __pyx_t_2 = __pyx_v_func;
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_MIN, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_MAX, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "atpy/core/parser/parser.pyx":110
 * 
 *         if func in ("MIN", "MAX"):
 *             for i in range(2):             # <<<<<<<<<<<<<<
 *                 position=self.position()
 *                 positions.append( position )
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 2; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "atpy/core/parser/parser.pyx":111
 *         if func in ("MIN", "MAX"):
 *             for i in range(2):
 *                 position=self.position()             # <<<<<<<<<<<<<<
 *                 positions.append( position )
 *                 self.eat(",")
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->position(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
      __pyx_v_position = __pyx_t_7;

      /* "atpy/core/parser/parser.pyx":112
 *             for i in range(2):
 *                 position=self.position()
 *                 positions.append( position )             # <<<<<<<<<<<<<<
 *                 self.eat(",")
 *             kind,index=self.parameter()
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_positions, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":113
 *                 position=self.position()
 *                 positions.append( position )
 *                 self.eat(",")             # <<<<<<<<<<<<<<
 *             kind,index=self.parameter()
 *             if kind==GLB:
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":114
 *                 positions.append( position )
 *                 self.eat(",")
 *             kind,index=self.parameter()             # <<<<<<<<<<<<<<
 *             if kind==GLB:
 *                 raise SyntaxError(f"Global property is not allowed in {func} function!")
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->parameter(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(__pyx_t_1 != Py_None)) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 114, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 114, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_kind = __pyx_t_7;
    __pyx_v_index = __pyx_t_11;

    /* "atpy/core/parser/parser.pyx":115
 *                 self.eat(",")
 *             kind,index=self.parameter()
 *             if kind==GLB:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Global property is not allowed in {func} function!")
 *             node = new RangeFunction(value2enum[func], index,positions[0], positions[1],kind, self.line.line )
 */
    __pyx_t_4 = ((__pyx_v_kind == GLB) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "atpy/core/parser/parser.pyx":116
 *             kind,index=self.parameter()
 *             if kind==GLB:
 *                 raise SyntaxError(f"Global property is not allowed in {func} function!")             # <<<<<<<<<<<<<<
 *             node = new RangeFunction(value2enum[func], index,positions[0], positions[1],kind, self.line.line )
 *         else:
 */
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Global_property_is_not_allowed_i);
      __pyx_t_12 += 34;
      __Pyx_GIVEREF(__pyx_kp_u_Global_property_is_not_allowed_i);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Global_property_is_not_allowed_i);
      __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_v_func); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u_function);
      __pyx_t_12 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_function);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_function);
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 116, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":115
 *                 self.eat(",")
 *             kind,index=self.parameter()
 *             if kind==GLB:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Global property is not allowed in {func} function!")
 *             node = new RangeFunction(value2enum[func], index,positions[0], positions[1],kind, self.line.line )
 */
    }

    /* "atpy/core/parser/parser.pyx":117
 *             if kind==GLB:
 *                 raise SyntaxError(f"Global property is not allowed in {func} function!")
 *             node = new RangeFunction(value2enum[func], index,positions[0], positions[1],kind, self.line.line )             # <<<<<<<<<<<<<<
 *         else:
 *             node = self.expr()
 */
    if (unlikely(__pyx_v_4atpy_4core_6parser_6parser_value2enum == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_6parser_6parser_value2enum, __pyx_v_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_positions, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_positions, 1)); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    try {
      __pyx_t_15 = new RangeFunction(__pyx_t_11, __pyx_v_index, __pyx_t_7, __pyx_t_14, __pyx_v_kind, __pyx_v_self->line->line);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_15;

    /* "atpy/core/parser/parser.pyx":109
 *         self.eat("(")
 * 
 *         if func in ("MIN", "MAX"):             # <<<<<<<<<<<<<<
 *             for i in range(2):
 *                 position=self.position()
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":119
 *             node = new RangeFunction(value2enum[func], index,positions[0], positions[1],kind, self.line.line )
 *         else:
 *             node = self.expr()             # <<<<<<<<<<<<<<
 *             token = self.current_token
 *             if token.kind == "," and func =="DIM" :
 */
  /*else*/ {
    __pyx_t_16 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __pyx_v_node = __pyx_t_16;

    /* "atpy/core/parser/parser.pyx":120
 *         else:
 *             node = self.expr()
 *             token = self.current_token             # <<<<<<<<<<<<<<
 *             if token.kind == "," and func =="DIM" :
 *                 self.eat(",")
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":121
 *             node = self.expr()
 *             token = self.current_token
 *             if token.kind == "," and func =="DIM" :             # <<<<<<<<<<<<<<
 *                 self.eat(",")
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 121, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_func, __pyx_n_u_DIM, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 121, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":122
 *             token = self.current_token
 *             if token.kind == "," and func =="DIM" :
 *                 self.eat(",")             # <<<<<<<<<<<<<<
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 *             elif token.kind == ")" and func in ("ABS", "SQRT"):
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":123
 *             if token.kind == "," and func =="DIM" :
 *                 self.eat(",")
 *                 node = new BiFunction(node, value2enum[func], self.expr() )             # <<<<<<<<<<<<<<
 *             elif token.kind == ")" and func in ("ABS", "SQRT"):
 *                 node = new MonoFunction(value2enum[func], node)
 */
      if (unlikely(__pyx_v_4atpy_4core_6parser_6parser_value2enum == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 123, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_6parser_6parser_value2enum, __pyx_v_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_16 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
      try {
        __pyx_t_17 = new BiFunction(__pyx_v_node, __pyx_t_14, __pyx_t_16);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 123, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_17;

      /* "atpy/core/parser/parser.pyx":121
 *             node = self.expr()
 *             token = self.current_token
 *             if token.kind == "," and func =="DIM" :             # <<<<<<<<<<<<<<
 *                 self.eat(",")
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 */
      goto __pyx_L9;
    }

    /* "atpy/core/parser/parser.pyx":124
 *                 self.eat(",")
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 *             elif token.kind == ")" and func in ("ABS", "SQRT"):             # <<<<<<<<<<<<<<
 *                 node = new MonoFunction(value2enum[func], node)
 *             else:
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_kp_u__5, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 124, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L12_bool_binop_done;
    }
    __Pyx_INCREF(__pyx_v_func);
    __pyx_t_2 = __pyx_v_func;
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_ABS, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 124, __pyx_L1_error)
    __pyx_t_18 = (__pyx_t_3 != 0);
    if (!__pyx_t_18) {
    } else {
      __pyx_t_5 = __pyx_t_18;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_18 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_SQRT, Py_EQ)); if (unlikely((__pyx_t_18 < 0))) __PYX_ERR(0, 124, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_18 != 0);
    __pyx_t_5 = __pyx_t_3;
    __pyx_L14_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    if (likely(__pyx_t_4)) {

      /* "atpy/core/parser/parser.pyx":125
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 *             elif token.kind == ")" and func in ("ABS", "SQRT"):
 *                 node = new MonoFunction(value2enum[func], node)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(f'Number args for {func} function  is not correct!')
 */
      if (unlikely(__pyx_v_4atpy_4core_6parser_6parser_value2enum == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 125, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_6parser_6parser_value2enum, __pyx_v_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      try {
        __pyx_t_19 = new MonoFunction(__pyx_t_14, __pyx_v_node);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 125, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_19;

      /* "atpy/core/parser/parser.pyx":124
 *                 self.eat(",")
 *                 node = new BiFunction(node, value2enum[func], self.expr() )
 *             elif token.kind == ")" and func in ("ABS", "SQRT"):             # <<<<<<<<<<<<<<
 *                 node = new MonoFunction(value2enum[func], node)
 *             else:
 */
      goto __pyx_L9;
    }

    /* "atpy/core/parser/parser.pyx":127
 *                 node = new MonoFunction(value2enum[func], node)
 *             else:
 *                 raise ValueError(f'Number args for {func} function  is not correct!')             # <<<<<<<<<<<<<<
 *         self.eat(")")
 *         return node
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Number_args_for);
      __pyx_t_12 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_Number_args_for);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Number_args_for);
      __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_v_func); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u_function_is_not_correct);
      __pyx_t_12 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_function_is_not_correct);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_function_is_not_correct);
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 127, __pyx_L1_error)
    }
    __pyx_L9:;
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":128
 *             else:
 *                 raise ValueError(f'Number args for {func} function  is not correct!')
 *         self.eat(")")             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 128, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":129
 *                 raise ValueError(f'Number args for {func} function  is not correct!')
 *         self.eat(")")
 *         return node             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":100
 * 
 * 
 *     cdef AST* function(self, str func)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int start,end, kind, index, n_th,position
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_positions);
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":133
 * 
 * 
 *     cdef AST* property(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST*    node
 */

static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_property(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  int __pyx_v_position;
  CYTHON_UNUSED int __pyx_v_n_th;
  int __pyx_v_kind;
  int __pyx_v_index;
  CYTHON_UNUSED int __pyx_v_isglb;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  AST *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  ptrdiff_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  Property *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("property", 0);

  /* "atpy/core/parser/parser.pyx":136
 *         cdef:
 *             AST*    node
 *             int     position=0, n_th=0 ,kind, index, parameter,data_kind             # <<<<<<<<<<<<<<
 *             bint    isglb=True
 *             Token   token
 */
  __pyx_v_position = 0;
  __pyx_v_n_th = 0;

  /* "atpy/core/parser/parser.pyx":137
 *             AST*    node
 *             int     position=0, n_th=0 ,kind, index, parameter,data_kind
 *             bint    isglb=True             # <<<<<<<<<<<<<<
 *             Token   token
 *         if self.current_token.kind=="ID":
 */
  __pyx_v_isglb = 1;

  /* "atpy/core/parser/parser.pyx":139
 *             bint    isglb=True
 *             Token   token
 *         if self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             position=self.position()
 *             self.eat(".")
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":140
 *             Token   token
 *         if self.current_token.kind=="ID":
 *             position=self.position()             # <<<<<<<<<<<<<<
 *             self.eat(".")
 *             token=self.current_token
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->position(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __pyx_v_position = __pyx_t_3;

    /* "atpy/core/parser/parser.pyx":141
 *         if self.current_token.kind=="ID":
 *             position=self.position()
 *             self.eat(".")             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             kind,index=self.parameter()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":142
 *             position=self.position()
 *             self.eat(".")
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             kind,index=self.parameter()
 *             if kind == KWD:
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "atpy/core/parser/parser.pyx":143
 *             self.eat(".")
 *             token=self.current_token
 *             kind,index=self.parameter()             # <<<<<<<<<<<<<<
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->parameter(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(__pyx_t_4 != Py_None)) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 143, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 143, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_kind = __pyx_t_3;
    __pyx_v_index = __pyx_t_7;

    /* "atpy/core/parser/parser.pyx":144
 *             token=self.current_token
 *             kind,index=self.parameter()
 *             if kind == KWD:             # <<<<<<<<<<<<<<
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 */
    __pyx_t_2 = ((__pyx_v_kind == KWD) != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":145
 *             kind,index=self.parameter()
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 *             if kind == GLB:
 */
      try {
        __pyx_t_8 = std::count<std::vector<int> ::iterator,int>((__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.begin(), (__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.end(), __pyx_v_index);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 145, __pyx_L1_error)
      }
      __pyx_t_2 = ((__pyx_t_8 == 0) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "atpy/core/parser/parser.pyx":146
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             if kind == GLB:
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 */
        __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_invalid_at_line);
        __pyx_t_9 += 20;
        __Pyx_GIVEREF(__pyx_kp_u_is_invalid_at_line);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u_is_invalid_at_line);
        __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_column);
        __pyx_t_9 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_column);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_kp_u_column);
        __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u__2);
        __pyx_t_9 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__2);
        PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_kp_u__2);
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 6, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 146, __pyx_L1_error)

        /* "atpy/core/parser/parser.pyx":145
 *             kind,index=self.parameter()
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 *             if kind == GLB:
 */
      }

      /* "atpy/core/parser/parser.pyx":144
 *             token=self.current_token
 *             kind,index=self.parameter()
 *             if kind == KWD:             # <<<<<<<<<<<<<<
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 */
    }

    /* "atpy/core/parser/parser.pyx":147
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 *             if kind == GLB:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="GLB":
 */
    __pyx_t_2 = ((__pyx_v_kind == GLB) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "atpy/core/parser/parser.pyx":148
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 *             if kind == GLB:
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *         elif self.current_token.kind=="GLB":
 *             kind=GLB
 */
      __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Global_property);
      __pyx_t_9 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_Global_property);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Global_property);
      __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_not_allowed_with_position_at);
      __pyx_t_9 += 39;
      __Pyx_GIVEREF(__pyx_kp_u_is_not_allowed_with_position_at);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_is_not_allowed_with_position_at);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_9 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 148, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":147
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{token.value} is invalid at line {token.line} column {token.column}!")
 *             if kind == GLB:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="GLB":
 */
    }

    /* "atpy/core/parser/parser.pyx":139
 *             bint    isglb=True
 *             Token   token
 *         if self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             position=self.position()
 *             self.eat(".")
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":149
 *             if kind == GLB:
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="GLB":             # <<<<<<<<<<<<<<
 *             kind=GLB
 *             index=GLB_INDEX[self.current_token.value ]
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_GLB, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "atpy/core/parser/parser.pyx":150
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="GLB":
 *             kind=GLB             # <<<<<<<<<<<<<<
 *             index=GLB_INDEX[self.current_token.value ]
 *             self.eat("GLB")
 */
    __pyx_v_kind = GLB;

    /* "atpy/core/parser/parser.pyx":151
 *         elif self.current_token.kind=="GLB":
 *             kind=GLB
 *             index=GLB_INDEX[self.current_token.value ]             # <<<<<<<<<<<<<<
 *             self.eat("GLB")
 *         else:
 */
    if (unlikely(__pyx_v_4atpy_4core_9interface_9constants_GLB_INDEX == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_9interface_9constants_GLB_INDEX, __pyx_v_self->current_token->value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_index = __pyx_t_7;

    /* "atpy/core/parser/parser.pyx":152
 *             kind=GLB
 *             index=GLB_INDEX[self.current_token.value ]
 *             self.eat("GLB")             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_GLB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":149
 *             if kind == GLB:
 *                 raise SyntaxError(f"Global property  {token.value}  is not allowed with position at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="GLB":             # <<<<<<<<<<<<<<
 *             kind=GLB
 *             index=GLB_INDEX[self.current_token.value ]
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":154
 *             self.eat("GLB")
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")             # <<<<<<<<<<<<<<
 *         node =new Property(kind, position,index, self.line.line, self.line.globals)
 *         return node
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = 0;
    __pyx_t_10 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_9 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_line_2);
    __pyx_t_9 += 10;
    __Pyx_GIVEREF(__pyx_kp_u_at_line_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_at_line_2);
    __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_9 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
    __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_9 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":155
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")
 *         node =new Property(kind, position,index, self.line.line, self.line.globals)             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  try {
    __pyx_t_11 = new Property(__pyx_v_kind, __pyx_v_position, __pyx_v_index, __pyx_v_self->line->line, __pyx_v_self->line->globals);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 155, __pyx_L1_error)
  }
  __pyx_v_node = __pyx_t_11;

  /* "atpy/core/parser/parser.pyx":156
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")
 *         node =new Property(kind, position,index, self.line.line, self.line.globals)
 *         return node             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":133
 * 
 * 
 *     cdef AST* property(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST*    node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":160
 * 
 * 
 *     cdef AST* factor(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_factor(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_current_token = 0;
  int __pyx_v_pos_or_neg;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_tmp_idtable = 0;
  std::string __pyx_v_name0;
  double __pyx_v_value;
  AST *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  Number *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  AST *__pyx_t_9;
  Node *__pyx_t_10;
  std::string __pyx_t_11;
  Refer *__pyx_t_12;
  std::vector<std::string> ::iterator __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("factor", 0);

  /* "atpy/core/parser/parser.pyx":164
 *             AST* node
 *             Token token,current_token
 *             int pos_or_neg=1             # <<<<<<<<<<<<<<
 *             bytes name
 *             list tmp_idtable=[]
 */
  __pyx_v_pos_or_neg = 1;

  /* "atpy/core/parser/parser.pyx":166
 *             int pos_or_neg=1
 *             bytes name
 *             list tmp_idtable=[]             # <<<<<<<<<<<<<<
 *         current_token = self.current_token
 *         name = current_token.value.encode("utf8")
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp_idtable = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":167
 *             bytes name
 *             list tmp_idtable=[]
 *         current_token = self.current_token             # <<<<<<<<<<<<<<
 *         name = current_token.value.encode("utf8")
 *         cdef string name0 = current_token.value.encode("utf8")
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":168
 *             list tmp_idtable=[]
 *         current_token = self.current_token
 *         name = current_token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef string name0 = current_token.value.encode("utf8")
 *         if current_token.kind == "NUMBER":
 */
  if (unlikely(__pyx_v_current_token->value == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 168, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_current_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":169
 *         current_token = self.current_token
 *         name = current_token.value.encode("utf8")
 *         cdef string name0 = current_token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *         if current_token.kind == "NUMBER":
 *             self.eat("NUMBER")
 */
  if (unlikely(__pyx_v_current_token->value == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_current_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_name0 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "atpy/core/parser/parser.pyx":170
 *         name = current_token.value.encode("utf8")
 *         cdef string name0 = current_token.value.encode("utf8")
 *         if current_token.kind == "NUMBER":             # <<<<<<<<<<<<<<
 *             self.eat("NUMBER")
 *             value = float(current_token.value)
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_n_u_NUMBER, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "atpy/core/parser/parser.pyx":171
 *         cdef string name0 = current_token.value.encode("utf8")
 *         if current_token.kind == "NUMBER":
 *             self.eat("NUMBER")             # <<<<<<<<<<<<<<
 *             value = float(current_token.value)
 *             node = new Number(value)
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_NUMBER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":172
 *         if current_token.kind == "NUMBER":
 *             self.eat("NUMBER")
 *             value = float(current_token.value)             # <<<<<<<<<<<<<<
 *             node = new Number(value)
 *         elif current_token.kind in ("-","+"):
 */
    if (unlikely(__pyx_v_current_token->value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "float() argument must be a string or a number, not 'NoneType'");
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyUnicode_AsDouble(__pyx_v_current_token->value); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_v_value = __pyx_t_5;

    /* "atpy/core/parser/parser.pyx":173
 *             self.eat("NUMBER")
 *             value = float(current_token.value)
 *             node = new Number(value)             # <<<<<<<<<<<<<<
 *         elif current_token.kind in ("-","+"):
 *             self.eat(current_token.kind)
 */
    try {
      __pyx_t_6 = new Number(__pyx_v_value);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 173, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_6;

    /* "atpy/core/parser/parser.pyx":170
 *         name = current_token.value.encode("utf8")
 *         cdef string name0 = current_token.value.encode("utf8")
 *         if current_token.kind == "NUMBER":             # <<<<<<<<<<<<<<
 *             self.eat("NUMBER")
 *             value = float(current_token.value)
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":174
 *             value = float(current_token.value)
 *             node = new Number(value)
 *         elif current_token.kind in ("-","+"):             # <<<<<<<<<<<<<<
 *             self.eat(current_token.kind)
 *             if current_token.kind =="-":
 */
  __Pyx_INCREF(__pyx_v_current_token->kind);
  __pyx_t_7 = __pyx_v_current_token->kind;
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_3 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_4 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__8, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_8 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":175
 *             node = new Number(value)
 *         elif current_token.kind in ("-","+"):
 *             self.eat(current_token.kind)             # <<<<<<<<<<<<<<
 *             if current_token.kind =="-":
 *                 pos_or_neg=-1
 */
    __pyx_t_1 = __pyx_v_current_token->kind;
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":176
 *         elif current_token.kind in ("-","+"):
 *             self.eat(current_token.kind)
 *             if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                 pos_or_neg=-1
 *             if self.current_token.kind=="NUMBER":
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 176, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":177
 *             self.eat(current_token.kind)
 *             if current_token.kind =="-":
 *                 pos_or_neg=-1             # <<<<<<<<<<<<<<
 *             if self.current_token.kind=="NUMBER":
 *                 value = pos_or_neg*float(self.current_token.value)
 */
      __pyx_v_pos_or_neg = -1;

      /* "atpy/core/parser/parser.pyx":176
 *         elif current_token.kind in ("-","+"):
 *             self.eat(current_token.kind)
 *             if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                 pos_or_neg=-1
 *             if self.current_token.kind=="NUMBER":
 */
    }

    /* "atpy/core/parser/parser.pyx":178
 *             if current_token.kind =="-":
 *                 pos_or_neg=-1
 *             if self.current_token.kind=="NUMBER":             # <<<<<<<<<<<<<<
 *                 value = pos_or_neg*float(self.current_token.value)
 *                 node = new Number(value)
 */
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_NUMBER, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":179
 *                 pos_or_neg=-1
 *             if self.current_token.kind=="NUMBER":
 *                 value = pos_or_neg*float(self.current_token.value)             # <<<<<<<<<<<<<<
 *                 node = new Number(value)
 *                 self.eat("NUMBER")
 */
      if (unlikely(__pyx_v_self->current_token->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "float() argument must be a string or a number, not 'NoneType'");
        __PYX_ERR(0, 179, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyUnicode_AsDouble(__pyx_v_self->current_token->value); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L1_error)
      __pyx_v_value = (__pyx_v_pos_or_neg * __pyx_t_5);

      /* "atpy/core/parser/parser.pyx":180
 *             if self.current_token.kind=="NUMBER":
 *                 value = pos_or_neg*float(self.current_token.value)
 *                 node = new Number(value)             # <<<<<<<<<<<<<<
 *                 self.eat("NUMBER")
 *             elif self.current_token.kind=="(":
 */
      try {
        __pyx_t_6 = new Number(__pyx_v_value);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_6;

      /* "atpy/core/parser/parser.pyx":181
 *                 value = pos_or_neg*float(self.current_token.value)
 *                 node = new Number(value)
 *                 self.eat("NUMBER")             # <<<<<<<<<<<<<<
 *             elif self.current_token.kind=="(":
 *                 if current_token.kind =="-":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_NUMBER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":178
 *             if current_token.kind =="-":
 *                 pos_or_neg=-1
 *             if self.current_token.kind=="NUMBER":             # <<<<<<<<<<<<<<
 *                 value = pos_or_neg*float(self.current_token.value)
 *                 node = new Number(value)
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":182
 *                 node = new Number(value)
 *                 self.eat("NUMBER")
 *             elif self.current_token.kind=="(":             # <<<<<<<<<<<<<<
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__3, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 182, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":183
 *                 self.eat("NUMBER")
 *             elif self.current_token.kind=="(":
 *                 if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.expr() )
 */
      __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 183, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_4 != 0);
      if (__pyx_t_3) {

        /* "atpy/core/parser/parser.pyx":184
 *             elif self.current_token.kind=="(":
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)             # <<<<<<<<<<<<<<
 *                     node = new Node( node, SUB, self.expr() )
 *                 else:
 */
        try {
          __pyx_t_6 = new Number(0.0);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 184, __pyx_L1_error)
        }
        __pyx_v_node = __pyx_t_6;

        /* "atpy/core/parser/parser.pyx":185
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.expr() )             # <<<<<<<<<<<<<<
 *                 else:
 *                     node = self.expr()
 */
        __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
        try {
          __pyx_t_10 = new Node(__pyx_v_node, SUB, __pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 185, __pyx_L1_error)
        }
        __pyx_v_node = __pyx_t_10;

        /* "atpy/core/parser/parser.pyx":183
 *                 self.eat("NUMBER")
 *             elif self.current_token.kind=="(":
 *                 if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.expr() )
 */
        goto __pyx_L8;
      }

      /* "atpy/core/parser/parser.pyx":187
 *                     node = new Node( node, SUB, self.expr() )
 *                 else:
 *                     node = self.expr()             # <<<<<<<<<<<<<<
 *             else:
 *                 if current_token.kind =="-":
 */
      /*else*/ {
        __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L1_error)
        __pyx_v_node = __pyx_t_9;
      }
      __pyx_L8:;

      /* "atpy/core/parser/parser.pyx":182
 *                 node = new Number(value)
 *                 self.eat("NUMBER")
 *             elif self.current_token.kind=="(":             # <<<<<<<<<<<<<<
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":189
 *                     node = self.expr()
 *             else:
 *                 if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.factor() )
 */
    /*else*/ {
      __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 189, __pyx_L1_error)
      __pyx_t_4 = (__pyx_t_3 != 0);
      if (__pyx_t_4) {

        /* "atpy/core/parser/parser.pyx":190
 *             else:
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)             # <<<<<<<<<<<<<<
 *                     node = new Node( node, SUB, self.factor() )
 *                 else:
 */
        try {
          __pyx_t_6 = new Number(0.0);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 190, __pyx_L1_error)
        }
        __pyx_v_node = __pyx_t_6;

        /* "atpy/core/parser/parser.pyx":191
 *                 if current_token.kind =="-":
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.factor() )             # <<<<<<<<<<<<<<
 *                 else:
 *                     node = self.factor()
 */
        __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L1_error)
        try {
          __pyx_t_10 = new Node(__pyx_v_node, SUB, __pyx_t_9);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 191, __pyx_L1_error)
        }
        __pyx_v_node = __pyx_t_10;

        /* "atpy/core/parser/parser.pyx":189
 *                     node = self.expr()
 *             else:
 *                 if current_token.kind =="-":             # <<<<<<<<<<<<<<
 *                     node = new Number(0.0)
 *                     node = new Node( node, SUB, self.factor() )
 */
        goto __pyx_L9;
      }

      /* "atpy/core/parser/parser.pyx":193
 *                     node = new Node( node, SUB, self.factor() )
 *                 else:
 *                     node = self.factor()             # <<<<<<<<<<<<<<
 * 
 *         # property and defined ID
 */
      /*else*/ {
        __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
        __pyx_v_node = __pyx_t_9;
      }
      __pyx_L9:;
    }
    __pyx_L7:;

    /* "atpy/core/parser/parser.pyx":174
 *             value = float(current_token.value)
 *             node = new Number(value)
 *         elif current_token.kind in ("-","+"):             # <<<<<<<<<<<<<<
 *             self.eat(current_token.kind)
 *             if current_token.kind =="-":
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":196
 * 
 *         # property and defined ID
 *         elif current_token.kind == "ID":             # <<<<<<<<<<<<<<
 *             if current_token.value in self.elems_name:
 *                 node = self.property()
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":197
 *         # property and defined ID
 *         elif current_token.kind == "ID":
 *             if current_token.value in self.elems_name:             # <<<<<<<<<<<<<<
 *                 node = self.property()
 *             elif current_token.value in self.id_table or name in self.id_table :
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_current_token->value, __pyx_v_self->elems_name, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 197, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":198
 *         elif current_token.kind == "ID":
 *             if current_token.value in self.elems_name:
 *                 node = self.property()             # <<<<<<<<<<<<<<
 *             elif current_token.value in self.id_table or name in self.id_table :
 *                 self.eat("ID")
 */
      __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->property(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
      __pyx_v_node = __pyx_t_9;

      /* "atpy/core/parser/parser.pyx":197
 *         # property and defined ID
 *         elif current_token.kind == "ID":
 *             if current_token.value in self.elems_name:             # <<<<<<<<<<<<<<
 *                 node = self.property()
 *             elif current_token.value in self.id_table or name in self.id_table :
 */
      goto __pyx_L10;
    }

    /* "atpy/core/parser/parser.pyx":199
 *             if current_token.value in self.elems_name:
 *                 node = self.property()
 *             elif current_token.value in self.id_table or name in self.id_table :             # <<<<<<<<<<<<<<
 *                 self.eat("ID")
 *                 # name=current_token.value.encode("utf8")
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_current_token->value, __pyx_v_self->id_table, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_3 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_4 = __pyx_t_8;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_v_self->id_table, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_8 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":200
 *                 node = self.property()
 *             elif current_token.value in self.id_table or name in self.id_table :
 *                 self.eat("ID")             # <<<<<<<<<<<<<<
 *                 # name=current_token.value.encode("utf8")
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":202
 *                 self.eat("ID")
 *                 # name=current_token.value.encode("utf8")
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])             # <<<<<<<<<<<<<<
 *             elif cpp_algorithm.find(self.line.id_table.id_table.begin(),self.line.id_table.id_table.end(),name0) != self.line.id_table.id_table.end():
 *                 self.eat("ID")
 */
      __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
      try {
        __pyx_t_12 = new Refer(__pyx_t_2, ((Identity *)(__pyx_v_self->line->id_table.id_dict[__pyx_t_11])));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 202, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_12;

      /* "atpy/core/parser/parser.pyx":199
 *             if current_token.value in self.elems_name:
 *                 node = self.property()
 *             elif current_token.value in self.id_table or name in self.id_table :             # <<<<<<<<<<<<<<
 *                 self.eat("ID")
 *                 # name=current_token.value.encode("utf8")
 */
      goto __pyx_L10;
    }

    /* "atpy/core/parser/parser.pyx":203
 *                 # name=current_token.value.encode("utf8")
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 *             elif cpp_algorithm.find(self.line.id_table.id_table.begin(),self.line.id_table.id_table.end(),name0) != self.line.id_table.id_table.end():             # <<<<<<<<<<<<<<
 *                 self.eat("ID")
 *                 name=current_token.value.encode("utf8")
 */
    try {
      __pyx_t_13 = std::find<std::vector<std::string> ::iterator,std::string>(__pyx_v_self->line->id_table.id_table.begin(), __pyx_v_self->line->id_table.id_table.end(), __pyx_v_name0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 203, __pyx_L1_error)
    }
    __pyx_t_4 = ((__pyx_t_13 != __pyx_v_self->line->id_table.id_table.end()) != 0);
    if (likely(__pyx_t_4)) {

      /* "atpy/core/parser/parser.pyx":204
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 *             elif cpp_algorithm.find(self.line.id_table.id_table.begin(),self.line.id_table.id_table.end(),name0) != self.line.id_table.id_table.end():
 *                 self.eat("ID")             # <<<<<<<<<<<<<<
 *                 name=current_token.value.encode("utf8")
 *                 tmp_idtable = self.line.id_table.id_table
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":205
 *             elif cpp_algorithm.find(self.line.id_table.id_table.begin(),self.line.id_table.id_table.end(),name0) != self.line.id_table.id_table.end():
 *                 self.eat("ID")
 *                 name=current_token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *                 tmp_idtable = self.line.id_table.id_table
 *                 self.id_table= list( set(self.id_table+tmp_idtable) )
 */
      if (unlikely(__pyx_v_current_token->value == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
        __PYX_ERR(0, 205, __pyx_L1_error)
      }
      __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_current_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":206
 *                 self.eat("ID")
 *                 name=current_token.value.encode("utf8")
 *                 tmp_idtable = self.line.id_table.id_table             # <<<<<<<<<<<<<<
 *                 self.id_table= list( set(self.id_table+tmp_idtable) )
 *                 # .append( current_token.value )
 */
      __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->line->id_table.id_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyList_CheckExact(__pyx_t_1)) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_tmp_idtable, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":207
 *                 name=current_token.value.encode("utf8")
 *                 tmp_idtable = self.line.id_table.id_table
 *                 self.id_table= list( set(self.id_table+tmp_idtable) )             # <<<<<<<<<<<<<<
 *                 # .append( current_token.value )
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_self->id_table, __pyx_v_tmp_idtable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PySequence_List(__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->id_table);
      __Pyx_DECREF(__pyx_v_self->id_table);
      __pyx_v_self->id_table = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":209
 *                 self.id_table= list( set(self.id_table+tmp_idtable) )
 *                 # .append( current_token.value )
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NameError(f"Undefined ID {current_token.value} at line {current_token.line} column {current_token.column}!")
 */
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
      __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
      try {
        __pyx_t_12 = new Refer(__pyx_t_11, ((Identity *)(__pyx_v_self->line->id_table.id_dict[__pyx_t_2])));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 209, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_12;

      /* "atpy/core/parser/parser.pyx":203
 *                 # name=current_token.value.encode("utf8")
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 *             elif cpp_algorithm.find(self.line.id_table.id_table.begin(),self.line.id_table.id_table.end(),name0) != self.line.id_table.id_table.end():             # <<<<<<<<<<<<<<
 *                 self.eat("ID")
 *                 name=current_token.value.encode("utf8")
 */
      goto __pyx_L10;
    }

    /* "atpy/core/parser/parser.pyx":211
 *                 node = new Refer(name, <Identity*>self.line.id_table.id_dict[ name ])
 *             else:
 *                 raise NameError(f"Undefined ID {current_token.value} at line {current_token.line} column {current_token.column}!")             # <<<<<<<<<<<<<<
 *         elif current_token.kind == "GLB":
 *             node = self.property()
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_Undefined_ID);
      __pyx_t_15 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Undefined_ID);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Undefined_ID);
      __pyx_t_14 = __Pyx_PyUnicode_Unicode(__pyx_v_current_token->value); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_at_line);
      __pyx_t_15 += 9;
      __Pyx_GIVEREF(__pyx_kp_u_at_line);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at_line);
      __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_15 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_column);
      __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_15 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
      __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NameError, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 211, __pyx_L1_error)
    }
    __pyx_L10:;

    /* "atpy/core/parser/parser.pyx":196
 * 
 *         # property and defined ID
 *         elif current_token.kind == "ID":             # <<<<<<<<<<<<<<
 *             if current_token.value in self.elems_name:
 *                 node = self.property()
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":212
 *             else:
 *                 raise NameError(f"Undefined ID {current_token.value} at line {current_token.line} column {current_token.column}!")
 *         elif current_token.kind == "GLB":             # <<<<<<<<<<<<<<
 *             node = self.property()
 *         # FUNCTION
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_n_u_GLB, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":213
 *                 raise NameError(f"Undefined ID {current_token.value} at line {current_token.line} column {current_token.column}!")
 *         elif current_token.kind == "GLB":
 *             node = self.property()             # <<<<<<<<<<<<<<
 *         # FUNCTION
 *         elif current_token.kind =="FUN":
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->property(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
    __pyx_v_node = __pyx_t_9;

    /* "atpy/core/parser/parser.pyx":212
 *             else:
 *                 raise NameError(f"Undefined ID {current_token.value} at line {current_token.line} column {current_token.column}!")
 *         elif current_token.kind == "GLB":             # <<<<<<<<<<<<<<
 *             node = self.property()
 *         # FUNCTION
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":215
 *             node = self.property()
 *         # FUNCTION
 *         elif current_token.kind =="FUN":             # <<<<<<<<<<<<<<
 *             # (MIN, MAX, DIM, ABS, SQRT):
 *             self.eat(current_token.kind)
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_current_token->kind, __pyx_n_u_FUN, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "atpy/core/parser/parser.pyx":217
 *         elif current_token.kind =="FUN":
 *             # (MIN, MAX, DIM, ABS, SQRT):
 *             self.eat(current_token.kind)             # <<<<<<<<<<<<<<
 *             node = self.function(current_token.value)
 *         elif current_token.kind in ("(",")"):
 */
    __pyx_t_1 = __pyx_v_current_token->kind;
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":218
 *             # (MIN, MAX, DIM, ABS, SQRT):
 *             self.eat(current_token.kind)
 *             node = self.function(current_token.value)             # <<<<<<<<<<<<<<
 *         elif current_token.kind in ("(",")"):
 *             self.eat("(")
 */
    __pyx_t_1 = __pyx_v_current_token->value;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->function(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_node = __pyx_t_9;

    /* "atpy/core/parser/parser.pyx":215
 *             node = self.property()
 *         # FUNCTION
 *         elif current_token.kind =="FUN":             # <<<<<<<<<<<<<<
 *             # (MIN, MAX, DIM, ABS, SQRT):
 *             self.eat(current_token.kind)
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":219
 *             self.eat(current_token.kind)
 *             node = self.function(current_token.value)
 *         elif current_token.kind in ("(",")"):             # <<<<<<<<<<<<<<
 *             self.eat("(")
 *             node = self.expr()  # #
 */
  __Pyx_INCREF(__pyx_v_current_token->kind);
  __pyx_t_7 = __pyx_v_current_token->kind;
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__3, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 219, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_3 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_4 = __pyx_t_8;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__5, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 219, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_8 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L13_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "atpy/core/parser/parser.pyx":220
 *             node = self.function(current_token.value)
 *         elif current_token.kind in ("(",")"):
 *             self.eat("(")             # <<<<<<<<<<<<<<
 *             node = self.expr()  # #
 *             self.eat(")")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":221
 *         elif current_token.kind in ("(",")"):
 *             self.eat("(")
 *             node = self.expr()  # #             # <<<<<<<<<<<<<<
 *             self.eat(")")
 *         else:
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_v_node = __pyx_t_9;

    /* "atpy/core/parser/parser.pyx":222
 *             self.eat("(")
 *             node = self.expr()  # #
 *             self.eat(")")             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError(f"Unknown syntax {current_token.value} at {current_token.line} column {current_token.column}!")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":219
 *             self.eat(current_token.kind)
 *             node = self.function(current_token.value)
 *         elif current_token.kind in ("(",")"):             # <<<<<<<<<<<<<<
 *             self.eat("(")
 *             node = self.expr()  # #
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":224
 *             self.eat(")")
 *         else:
 *             raise SyntaxError(f"Unknown syntax {current_token.value} at {current_token.line} column {current_token.column}!")             # <<<<<<<<<<<<<<
 *         # ** // %
 *         while self.current_token.value in ("**", "//","%"):
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = 0;
    __pyx_t_16 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_15 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_14 = __Pyx_PyUnicode_Unicode(__pyx_v_current_token->value); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_16;
    __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_INCREF(__pyx_kp_u_at);
    __pyx_t_15 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_at);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at);
    __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_15 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_column);
    __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_15 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
    __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 224, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":226
 *             raise SyntaxError(f"Unknown syntax {current_token.value} at {current_token.line} column {current_token.column}!")
 *         # ** // %
 *         while self.current_token.value in ("**", "//","%"):             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             self.eat(token.kind )
 */
  while (1) {
    __Pyx_INCREF(__pyx_v_self->current_token->value);
    __pyx_t_7 = __pyx_v_self->current_token->value;
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__9, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 226, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_3 = __pyx_t_8;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__10, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 226, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_8 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__11, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 226, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4 != 0);
    __pyx_t_3 = __pyx_t_8;
    __pyx_L17_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = (__pyx_t_3 != 0);
    if (!__pyx_t_8) break;

    /* "atpy/core/parser/parser.pyx":227
 *         # ** // %
 *         while self.current_token.value in ("**", "//","%"):
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             self.eat(token.kind )
 *             if token.kind == "%":
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_token, ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":228
 *         while self.current_token.value in ("**", "//","%"):
 *             token=self.current_token
 *             self.eat(token.kind )             # <<<<<<<<<<<<<<
 *             if token.kind == "%":
 *                 node = new Node(node,MOD,self.factor() )
 */
    __pyx_t_1 = __pyx_v_token->kind;
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":229
 *             token=self.current_token
 *             self.eat(token.kind )
 *             if token.kind == "%":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,MOD,self.factor() )
 *             elif token.kind == "//":
 */
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_kp_u__11, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 229, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_8 != 0);
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":230
 *             self.eat(token.kind )
 *             if token.kind == "%":
 *                 node = new Node(node,MOD,self.factor() )             # <<<<<<<<<<<<<<
 *             elif token.kind == "//":
 *                 node = new Node(node,FLOOR,self.factor() )
 */
      __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
      try {
        __pyx_t_10 = new Node(__pyx_v_node, MOD, __pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 230, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_10;

      /* "atpy/core/parser/parser.pyx":229
 *             token=self.current_token
 *             self.eat(token.kind )
 *             if token.kind == "%":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,MOD,self.factor() )
 *             elif token.kind == "//":
 */
      goto __pyx_L20;
    }

    /* "atpy/core/parser/parser.pyx":231
 *             if token.kind == "%":
 *                 node = new Node(node,MOD,self.factor() )
 *             elif token.kind == "//":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,FLOOR,self.factor() )
 *             elif token.kind == "**":
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_kp_u__10, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 231, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_3 != 0);
    if (__pyx_t_8) {

      /* "atpy/core/parser/parser.pyx":232
 *                 node = new Node(node,MOD,self.factor() )
 *             elif token.kind == "//":
 *                 node = new Node(node,FLOOR,self.factor() )             # <<<<<<<<<<<<<<
 *             elif token.kind == "**":
 *                 node = new Node(node,POW,self.factor() )
 */
      __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
      try {
        __pyx_t_10 = new Node(__pyx_v_node, FLOOR, __pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 232, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_10;

      /* "atpy/core/parser/parser.pyx":231
 *             if token.kind == "%":
 *                 node = new Node(node,MOD,self.factor() )
 *             elif token.kind == "//":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,FLOOR,self.factor() )
 *             elif token.kind == "**":
 */
      goto __pyx_L20;
    }

    /* "atpy/core/parser/parser.pyx":233
 *             elif token.kind == "//":
 *                 node = new Node(node,FLOOR,self.factor() )
 *             elif token.kind == "**":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,POW,self.factor() )
 *         return node  #
 */
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_kp_u__9, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 233, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_8 != 0);
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":234
 *                 node = new Node(node,FLOOR,self.factor() )
 *             elif token.kind == "**":
 *                 node = new Node(node,POW,self.factor() )             # <<<<<<<<<<<<<<
 *         return node  #
 * 
 */
      __pyx_t_9 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
      try {
        __pyx_t_10 = new Node(__pyx_v_node, POW, __pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 234, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_10;

      /* "atpy/core/parser/parser.pyx":233
 *             elif token.kind == "//":
 *                 node = new Node(node,FLOOR,self.factor() )
 *             elif token.kind == "**":             # <<<<<<<<<<<<<<
 *                 node = new Node(node,POW,self.factor() )
 *         return node  #
 */
    }
    __pyx_L20:;
  }

  /* "atpy/core/parser/parser.pyx":235
 *             elif token.kind == "**":
 *                 node = new Node(node,POW,self.factor() )
 *         return node  #             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":160
 * 
 * 
 *     cdef AST* factor(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_XDECREF((PyObject *)__pyx_v_current_token);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_tmp_idtable);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":238
 * 
 * 
 *     cdef AST* term(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_term(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  AST *__pyx_r;
  __Pyx_RefNannyDeclarations
  AST *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Node *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("term", 0);

  /* "atpy/core/parser/parser.pyx":242
 *             AST* node
 *             Token token
 *         node = self.factor()  #             # <<<<<<<<<<<<<<
 *         while self.current_token.kind in ("*", "/"):
 *             token = self.current_token
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_v_node = __pyx_t_1;

  /* "atpy/core/parser/parser.pyx":243
 *             Token token
 *         node = self.factor()  #
 *         while self.current_token.kind in ("*", "/"):             # <<<<<<<<<<<<<<
 *             token = self.current_token
 *             self.eat(token.kind)
 */
  while (1) {
    __Pyx_INCREF(__pyx_v_self->current_token->kind);
    __pyx_t_2 = __pyx_v_self->current_token->kind;
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__12, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__13, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) break;

    /* "atpy/core/parser/parser.pyx":244
 *         node = self.factor()  #
 *         while self.current_token.kind in ("*", "/"):
 *             token = self.current_token             # <<<<<<<<<<<<<<
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.kind], self.factor())  #
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_token, ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "atpy/core/parser/parser.pyx":245
 *         while self.current_token.kind in ("*", "/"):
 *             token = self.current_token
 *             self.eat(token.kind)             # <<<<<<<<<<<<<<
 *             node = new Node(node, value2enum[token.kind], self.factor())  #
 *         return node  #
 */
    __pyx_t_6 = __pyx_v_token->kind;
    __Pyx_INCREF(__pyx_t_6);
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "atpy/core/parser/parser.pyx":246
 *             token = self.current_token
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.kind], self.factor())  #             # <<<<<<<<<<<<<<
 *         return node  #
 * 
 */
    if (unlikely(__pyx_v_4atpy_4core_6parser_6parser_value2enum == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 246, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_6parser_6parser_value2enum, __pyx_v_token->kind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
    try {
      __pyx_t_8 = new Node(__pyx_v_node, __pyx_t_7, __pyx_t_1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 246, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_8;
  }

  /* "atpy/core/parser/parser.pyx":247
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.kind], self.factor())  #
 *         return node  #             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":238
 * 
 * 
 *     cdef AST* term(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":250
 * 
 * 
 *     cdef AST* expr(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

static AST *__pyx_f_4atpy_4core_6parser_6parser_6Parser_expr(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  AST *__pyx_r;
  __Pyx_RefNannyDeclarations
  AST *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Node *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expr", 0);

  /* "atpy/core/parser/parser.pyx":254
 *             AST* node
 *             Token token
 *         node = self.term()  #             # <<<<<<<<<<<<<<
 *         while self.current_token.kind in ("+", "-"):
 *             token = self.current_token
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->term(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
  __pyx_v_node = __pyx_t_1;

  /* "atpy/core/parser/parser.pyx":255
 *             Token token
 *         node = self.term()  #
 *         while self.current_token.kind in ("+", "-"):             # <<<<<<<<<<<<<<
 *             token = self.current_token
 *             self.eat(token.kind)
 */
  while (1) {
    __Pyx_INCREF(__pyx_v_self->current_token->kind);
    __pyx_t_2 = __pyx_v_self->current_token->kind;
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__8, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 255, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 255, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) break;

    /* "atpy/core/parser/parser.pyx":256
 *         node = self.term()  #
 *         while self.current_token.kind in ("+", "-"):
 *             token = self.current_token             # <<<<<<<<<<<<<<
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.value], self.term())  #self.term
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_token, ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "atpy/core/parser/parser.pyx":257
 *         while self.current_token.kind in ("+", "-"):
 *             token = self.current_token
 *             self.eat(token.kind)             # <<<<<<<<<<<<<<
 *             node = new Node(node, value2enum[token.value], self.term())  #self.term
 *         return node  #
 */
    __pyx_t_6 = __pyx_v_token->kind;
    __Pyx_INCREF(__pyx_t_6);
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "atpy/core/parser/parser.pyx":258
 *             token = self.current_token
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.value], self.term())  #self.term             # <<<<<<<<<<<<<<
 *         return node  #
 * 
 */
    if (unlikely(__pyx_v_4atpy_4core_6parser_6parser_value2enum == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 258, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_4atpy_4core_6parser_6parser_value2enum, __pyx_v_token->value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->term(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
    try {
      __pyx_t_8 = new Node(__pyx_v_node, __pyx_t_7, __pyx_t_1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 258, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_8;
  }

  /* "atpy/core/parser/parser.pyx":259
 *             self.eat(token.kind)
 *             node = new Node(node, value2enum[token.value], self.term())  #self.term
 *         return node  #             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":250
 * 
 * 
 *     cdef AST* expr(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.expr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":262
 * 
 * 
 *     cdef tuple get_bounds(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

static PyObject *__pyx_f_4atpy_4core_6parser_6parser_6Parser_get_bounds(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  double __pyx_v_lb;
  double __pyx_v_ub;
  double __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  AST *__pyx_t_5;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bounds", 0);

  /* "atpy/core/parser/parser.pyx":265
 *         cdef:
 *             AST* node
 *             double lb=-1e20,ub=1e20,step=1e-10             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="LOWER":
 *             self.eat(",")
 */
  __pyx_v_lb = -1e20;
  __pyx_v_ub = 1e20;
  __pyx_v_step = 1e-10;

  /* "atpy/core/parser/parser.pyx":266
 *             AST* node
 *             double lb=-1e20,ub=1e20,step=1e-10
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="LOWER":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("LOWER")
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_LOWER, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "atpy/core/parser/parser.pyx":267
 *             double lb=-1e20,ub=1e20,step=1e-10
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="LOWER":
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             self.eat("LOWER")
 *             self.eat("ASSIGN")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":268
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="LOWER":
 *             self.eat(",")
 *             self.eat("LOWER")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN")
 *             node = self.expr()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_LOWER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":269
 *             self.eat(",")
 *             self.eat("LOWER")
 *             self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *             node = self.expr()
 *             lb=node.calc()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":270
 *             self.eat("LOWER")
 *             self.eat("ASSIGN")
 *             node = self.expr()             # <<<<<<<<<<<<<<
 *             lb=node.calc()
 *             del node
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
    __pyx_v_node = __pyx_t_5;

    /* "atpy/core/parser/parser.pyx":271
 *             self.eat("ASSIGN")
 *             node = self.expr()
 *             lb=node.calc()             # <<<<<<<<<<<<<<
 *             del node
 *             node=NULL
 */
    try {
      __pyx_t_6 = __pyx_v_node->calc();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 271, __pyx_L1_error)
    }
    __pyx_v_lb = __pyx_t_6;

    /* "atpy/core/parser/parser.pyx":272
 *             node = self.expr()
 *             lb=node.calc()
 *             del node             # <<<<<<<<<<<<<<
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":
 */
    delete __pyx_v_node;

    /* "atpy/core/parser/parser.pyx":273
 *             lb=node.calc()
 *             del node
 *             node=NULL             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":
 *             self.eat(",")
 */
    __pyx_v_node = NULL;

    /* "atpy/core/parser/parser.pyx":266
 *             AST* node
 *             double lb=-1e20,ub=1e20,step=1e-10
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="LOWER":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("LOWER")
 */
  }

  /* "atpy/core/parser/parser.pyx":274
 *             del node
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("UPPER")
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_UPPER, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "atpy/core/parser/parser.pyx":275
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             self.eat("UPPER")
 *             self.eat("ASSIGN")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":276
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":
 *             self.eat(",")
 *             self.eat("UPPER")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN")
 *             node = self.expr()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_UPPER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":277
 *             self.eat(",")
 *             self.eat("UPPER")
 *             self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *             node = self.expr()
 *             ub=node.calc()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":278
 *             self.eat("UPPER")
 *             self.eat("ASSIGN")
 *             node = self.expr()             # <<<<<<<<<<<<<<
 *             ub=node.calc()
 *             del node
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
    __pyx_v_node = __pyx_t_5;

    /* "atpy/core/parser/parser.pyx":279
 *             self.eat("ASSIGN")
 *             node = self.expr()
 *             ub=node.calc()             # <<<<<<<<<<<<<<
 *             del node
 *             node=NULL
 */
    try {
      __pyx_t_6 = __pyx_v_node->calc();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 279, __pyx_L1_error)
    }
    __pyx_v_ub = __pyx_t_6;

    /* "atpy/core/parser/parser.pyx":280
 *             node = self.expr()
 *             ub=node.calc()
 *             del node             # <<<<<<<<<<<<<<
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":
 */
    delete __pyx_v_node;

    /* "atpy/core/parser/parser.pyx":281
 *             ub=node.calc()
 *             del node
 *             node=NULL             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":
 *             self.eat(",")
 */
    __pyx_v_node = NULL;

    /* "atpy/core/parser/parser.pyx":274
 *             del node
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="UPPER":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("UPPER")
 */
  }

  /* "atpy/core/parser/parser.pyx":282
 *             del node
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("STEP")
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_STEP, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "atpy/core/parser/parser.pyx":283
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             self.eat("STEP")
 *             self.eat("ASSIGN")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":284
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":
 *             self.eat(",")
 *             self.eat("STEP")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN")
 *             node = self.expr()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_STEP); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":285
 *             self.eat(",")
 *             self.eat("STEP")
 *             self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *             node = self.expr()
 *             step=node.calc()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":286
 *             self.eat("STEP")
 *             self.eat("ASSIGN")
 *             node = self.expr()             # <<<<<<<<<<<<<<
 *             step=node.calc()
 *             del node
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
    __pyx_v_node = __pyx_t_5;

    /* "atpy/core/parser/parser.pyx":287
 *             self.eat("ASSIGN")
 *             node = self.expr()
 *             step=node.calc()             # <<<<<<<<<<<<<<
 *             del node
 *             node=NULL
 */
    try {
      __pyx_t_6 = __pyx_v_node->calc();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 287, __pyx_L1_error)
    }
    __pyx_v_step = __pyx_t_6;

    /* "atpy/core/parser/parser.pyx":288
 *             node = self.expr()
 *             step=node.calc()
 *             del node             # <<<<<<<<<<<<<<
 *             node=NULL
 *         return lb,ub,step
 */
    delete __pyx_v_node;

    /* "atpy/core/parser/parser.pyx":289
 *             step=node.calc()
 *             del node
 *             node=NULL             # <<<<<<<<<<<<<<
 *         return lb,ub,step
 * 
 */
    __pyx_v_node = NULL;

    /* "atpy/core/parser/parser.pyx":282
 *             del node
 *             node=NULL
 *         if self.current_token.kind=="," and self.lexer.check_next_token()=="STEP":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("STEP")
 */
  }

  /* "atpy/core/parser/parser.pyx":290
 *             del node
 *             node=NULL
 *         return lb,ub,step             # <<<<<<<<<<<<<<
 * 
 *     cdef int get_eid(self)except*:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_lb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_ub); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_r = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":262
 * 
 * 
 *     cdef tuple get_bounds(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             AST* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.get_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":292
 *         return lb,ub,step
 * 
 *     cdef int get_eid(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int eid=0
 */

static int __pyx_f_4atpy_4core_6parser_6parser_6Parser_get_eid(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  int __pyx_v_eid;
  int __pyx_v_neg_or_pos;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_eid", 0);

  /* "atpy/core/parser/parser.pyx":294
 *     cdef int get_eid(self)except*:
 *         cdef:
 *             int eid=0             # <<<<<<<<<<<<<<
 *             int neg_or_pos=1
 *         self.eat("[")
 */
  __pyx_v_eid = 0;

  /* "atpy/core/parser/parser.pyx":295
 *         cdef:
 *             int eid=0
 *             int neg_or_pos=1             # <<<<<<<<<<<<<<
 *         self.eat("[")
 *         if self.current_token.kind=="-":
 */
  __pyx_v_neg_or_pos = 1;

  /* "atpy/core/parser/parser.pyx":296
 *             int eid=0
 *             int neg_or_pos=1
 *         self.eat("[")             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="-":
 *             neg_or_pos=-1
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__14); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":297
 *             int neg_or_pos=1
 *         self.eat("[")
 *         if self.current_token.kind=="-":             # <<<<<<<<<<<<<<
 *             neg_or_pos=-1
 *             self.eat("-")
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":298
 *         self.eat("[")
 *         if self.current_token.kind=="-":
 *             neg_or_pos=-1             # <<<<<<<<<<<<<<
 *             self.eat("-")
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:
 */
    __pyx_v_neg_or_pos = -1;

    /* "atpy/core/parser/parser.pyx":299
 *         if self.current_token.kind=="-":
 *             neg_or_pos=-1
 *             self.eat("-")             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:
 *             eid=int(self.current_token.value)
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":297
 *             int neg_or_pos=1
 *         self.eat("[")
 *         if self.current_token.kind=="-":             # <<<<<<<<<<<<<<
 *             neg_or_pos=-1
 *             self.eat("-")
 */
  }

  /* "atpy/core/parser/parser.pyx":300
 *             neg_or_pos=-1
 *             self.eat("-")
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:             # <<<<<<<<<<<<<<
 *             eid=int(self.current_token.value)
 *             self.eat("NUMBER")
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_NUMBER, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  if (unlikely(__pyx_v_self->current_token->value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PyUnicode_ContainsTF(__pyx_kp_u__6, __pyx_v_self->current_token->value, Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":301
 *             self.eat("-")
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:
 *             eid=int(self.current_token.value)             # <<<<<<<<<<<<<<
 *             self.eat("NUMBER")
 *         else:
 */
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_eid = __pyx_t_5;

    /* "atpy/core/parser/parser.pyx":302
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:
 *             eid=int(self.current_token.value)
 *             self.eat("NUMBER")             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_NUMBER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":300
 *             neg_or_pos=-1
 *             self.eat("-")
 *         if self.current_token.kind=="NUMBER" and "." not in self.current_token.value:             # <<<<<<<<<<<<<<
 *             eid=int(self.current_token.value)
 *             self.eat("NUMBER")
 */
    goto __pyx_L4;
  }

  /* "atpy/core/parser/parser.pyx":304
 *             self.eat("NUMBER")
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")             # <<<<<<<<<<<<<<
 * 
 *         self.eat("]")
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_6 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_line_2);
    __pyx_t_6 += 10;
    __Pyx_GIVEREF(__pyx_kp_u_at_line_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_at_line_2);
    __pyx_t_8 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_6 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
    __pyx_t_8 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "atpy/core/parser/parser.pyx":306
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value}  at line {self.current_token.line} column {self.current_token.column}!")
 * 
 *         self.eat("]")             # <<<<<<<<<<<<<<
 *         return neg_or_pos*eid
 * 
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__15); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":307
 * 
 *         self.eat("]")
 *         return neg_or_pos*eid             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_neg_or_pos * __pyx_v_eid);
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":292
 *         return lb,ub,step
 * 
 *     cdef int get_eid(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int eid=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.get_eid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":311
 * 
 * 
 *     cdef void set_Identity(self)except*:             # <<<<<<<<<<<<<<
 *         cdef Token current_token=self.current_token
 *         cdef bytes name =self.current_token.value.encode("utf8")
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_Identity(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_current_token = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_str_name = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  std::string __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  AST *__pyx_t_13;
  Identity *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_Identity", 0);

  /* "atpy/core/parser/parser.pyx":312
 * 
 *     cdef void set_Identity(self)except*:
 *         cdef Token current_token=self.current_token             # <<<<<<<<<<<<<<
 *         cdef bytes name =self.current_token.value.encode("utf8")
 *         cdef str str_name = self.current_token.value
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":313
 *     cdef void set_Identity(self)except*:
 *         cdef Token current_token=self.current_token
 *         cdef bytes name =self.current_token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef str str_name = self.current_token.value
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :
 */
  if (unlikely(__pyx_v_self->current_token->value == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 313, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":314
 *         cdef Token current_token=self.current_token
 *         cdef bytes name =self.current_token.value.encode("utf8")
 *         cdef str str_name = self.current_token.value             # <<<<<<<<<<<<<<
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :
 *             if self.current_token.value not in self.id_table:
 */
  __pyx_t_1 = __pyx_v_self->current_token->value;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_str_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":315
 *         cdef bytes name =self.current_token.value.encode("utf8")
 *         cdef str str_name = self.current_token.value
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :             # <<<<<<<<<<<<<<
 *             if self.current_token.value not in self.id_table:
 *                 self.id_table.append(self.current_token.value )
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_DELAY, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_ASSIGN, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":316
 *         cdef str str_name = self.current_token.value
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :
 *             if self.current_token.value not in self.id_table:             # <<<<<<<<<<<<<<
 *                 self.id_table.append(self.current_token.value )
 *                 self.line.id_table.id_table.push_back(name)
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_self->current_token->value, __pyx_v_self->id_table, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 316, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "atpy/core/parser/parser.pyx":317
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :
 *             if self.current_token.value not in self.id_table:
 *                 self.id_table.append(self.current_token.value )             # <<<<<<<<<<<<<<
 *                 self.line.id_table.id_table.push_back(name)
 *             else:
 */
      if (unlikely(__pyx_v_self->id_table == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 317, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_v_self->current_token->value;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->id_table, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":318
 *             if self.current_token.value not in self.id_table:
 *                 self.id_table.append(self.current_token.value )
 *                 self.line.id_table.id_table.push_back(name)             # <<<<<<<<<<<<<<
 *             else:
 *                 del self.line.id_table.id_dict[name]
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
      try {
        __pyx_v_self->line->id_table.id_table.push_back(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 318, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":316
 *         cdef str str_name = self.current_token.value
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :
 *             if self.current_token.value not in self.id_table:             # <<<<<<<<<<<<<<
 *                 self.id_table.append(self.current_token.value )
 *                 self.line.id_table.id_table.push_back(name)
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":320
 *                 self.line.id_table.id_table.push_back(name)
 *             else:
 *                 del self.line.id_table.id_dict[name]             # <<<<<<<<<<<<<<
 *                 warnings.warn(f"Identity {str_name} is redefined at line {current_token.line}, column {current_token.column}, which might cause error dependences!")
 *             self.eat("ID")
 */
    /*else*/ {
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
      delete (__pyx_v_self->line->id_table.id_dict[__pyx_t_6]);

      /* "atpy/core/parser/parser.pyx":321
 *             else:
 *                 del self.line.id_table.id_dict[name]
 *                 warnings.warn(f"Identity {str_name} is redefined at line {current_token.line}, column {current_token.column}, which might cause error dependences!")             # <<<<<<<<<<<<<<
 *             self.eat("ID")
 *             if self.current_token.kind=="DELAY":
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_warnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_warn); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Identity);
      __pyx_t_9 += 9;
      __Pyx_GIVEREF(__pyx_kp_u_Identity);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Identity);
      __pyx_t_11 = __Pyx_PyUnicode_Unicode(__pyx_v_str_name); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_redefined_at_line);
      __pyx_t_9 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_is_redefined_at_line);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_is_redefined_at_line);
      __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_column_2);
      __pyx_t_9 += 9;
      __Pyx_GIVEREF(__pyx_kp_u_column_2);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u_column_2);
      __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_which_might_cause_error_depende);
      __pyx_t_9 += 38;
      __Pyx_GIVEREF(__pyx_kp_u_which_might_cause_error_depende);
      PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_kp_u_which_might_cause_error_depende);
      __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_7, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "atpy/core/parser/parser.pyx":322
 *                 del self.line.id_table.id_dict[name]
 *                 warnings.warn(f"Identity {str_name} is redefined at line {current_token.line}, column {current_token.column}, which might cause error dependences!")
 *             self.eat("ID")             # <<<<<<<<<<<<<<
 *             if self.current_token.kind=="DELAY":
 *                 self.eat("DELAY")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":323
 *                 warnings.warn(f"Identity {str_name} is redefined at line {current_token.line}, column {current_token.column}, which might cause error dependences!")
 *             self.eat("ID")
 *             if self.current_token.kind=="DELAY":             # <<<<<<<<<<<<<<
 *                 self.eat("DELAY")
 *                 self.line.id_table.id_dict[name] = new Identity(name,True, self.expr() )
 */
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_DELAY, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 323, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":324
 *             self.eat("ID")
 *             if self.current_token.kind=="DELAY":
 *                 self.eat("DELAY")             # <<<<<<<<<<<<<<
 *                 self.line.id_table.id_dict[name] = new Identity(name,True, self.expr() )
 *             else:
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_DELAY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":325
 *             if self.current_token.kind=="DELAY":
 *                 self.eat("DELAY")
 *                 self.line.id_table.id_dict[name] = new Identity(name,True, self.expr() )             # <<<<<<<<<<<<<<
 *             else:
 *                 self.eat("ASSIGN")
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
      __pyx_t_13 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
      try {
        __pyx_t_14 = new Identity(__pyx_t_6, 1, __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 325, __pyx_L1_error)
      }
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
      (__pyx_v_self->line->id_table.id_dict[__pyx_t_6]) = __pyx_t_14;

      /* "atpy/core/parser/parser.pyx":323
 *                 warnings.warn(f"Identity {str_name} is redefined at line {current_token.line}, column {current_token.column}, which might cause error dependences!")
 *             self.eat("ID")
 *             if self.current_token.kind=="DELAY":             # <<<<<<<<<<<<<<
 *                 self.eat("DELAY")
 *                 self.line.id_table.id_dict[name] = new Identity(name,True, self.expr() )
 */
      goto __pyx_L8;
    }

    /* "atpy/core/parser/parser.pyx":327
 *                 self.line.id_table.id_dict[name] = new Identity(name,True, self.expr() )
 *             else:
 *                 self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *                 self.line.id_table.id_dict[name] = new Identity(name,False, self.expr() )
 *         else:
 */
    /*else*/ {
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":328
 *             else:
 *                 self.eat("ASSIGN")
 *                 self.line.id_table.id_dict[name] = new Identity(name,False, self.expr() )             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError(f"Unknown syntax {str_name} with {self.lexer.check_next_token()} at {current_token.line}, column {current_token.column}!")
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
      __pyx_t_13 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
      try {
        __pyx_t_14 = new Identity(__pyx_t_6, 0, __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 328, __pyx_L1_error)
      }
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
      (__pyx_v_self->line->id_table.id_dict[__pyx_t_6]) = __pyx_t_14;
    }
    __pyx_L8:;

    /* "atpy/core/parser/parser.pyx":315
 *         cdef bytes name =self.current_token.value.encode("utf8")
 *         cdef str str_name = self.current_token.value
 *         if self.current_token.kind =="ID" and (self.lexer.check_next_token()=="DELAY" or self.lexer.check_next_token()=="ASSIGN") :             # <<<<<<<<<<<<<<
 *             if self.current_token.value not in self.id_table:
 *                 self.id_table.append(self.current_token.value )
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":330
 *                 self.line.id_table.id_dict[name] = new Identity(name,False, self.expr() )
 *         else:
 *             raise SyntaxError(f"Unknown syntax {str_name} with {self.lexer.check_next_token()} at {current_token.line}, column {current_token.column}!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = 0;
    __pyx_t_10 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_9 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_v_str_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_with);
    __pyx_t_9 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_with);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_with);
    __pyx_t_8 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyUnicode_Unicode(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u_at);
    __pyx_t_9 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_at);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_at);
    __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u_column_2);
    __pyx_t_9 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_column_2);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_column_2);
    __pyx_t_11 = __Pyx_PyUnicode_From_int(__pyx_v_current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_9 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__2);
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 330, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":311
 * 
 * 
 *     cdef void set_Identity(self)except*:             # <<<<<<<<<<<<<<
 *         cdef Token current_token=self.current_token
 *         cdef bytes name =self.current_token.value.encode("utf8")
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.set_Identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_current_token);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_str_name);
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":333
 * 
 * 
 *     cdef void set_variable(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token, param_token
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_variable(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_param_token = 0;
  AST *__pyx_v_node;
  double __pyx_v_lb;
  double __pyx_v_ub;
  double __pyx_v_step;
  PyObject *__pyx_v_param_name = 0;
  std::string __pyx_v_string_vars_name;
  CYTHON_UNUSED PyObject *__pyx_v_ordered_var_positions = 0;
  int __pyx_v_eid;
  int __pyx_v_position;
  int __pyx_v_index;
  int __pyx_v_kind;
  PyObject *__pyx_v_pattern = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_var_name = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  ptrdiff_t __pyx_t_15;
  int __pyx_t_16;
  std::string __pyx_t_17;
  Property *__pyx_t_18;
  Var *__pyx_t_19;
  AST *__pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_variable", 0);

  /* "atpy/core/parser/parser.pyx":336
 *         cdef:
 *             Token token, param_token
 *             AST* node=NULL             # <<<<<<<<<<<<<<
 *             double lb=-1e10,ub=1e10,step=1e-14
 *             str names, param_name
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":337
 *             Token token, param_token
 *             AST* node=NULL
 *             double lb=-1e10,ub=1e10,step=1e-14             # <<<<<<<<<<<<<<
 *             str names, param_name
 *             string string_vars_name
 */
  __pyx_v_lb = -1e10;
  __pyx_v_ub = 1e10;
  __pyx_v_step = 1e-14;

  /* "atpy/core/parser/parser.pyx":340
 *             str names, param_name
 *             string string_vars_name
 *             list ordered_var_positions=[]             # <<<<<<<<<<<<<<
 *             int eid=0,position=0,index=0,kind=0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ordered_var_positions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":341
 *             string string_vars_name
 *             list ordered_var_positions=[]
 *             int eid=0,position=0,index=0,kind=0             # <<<<<<<<<<<<<<
 * 
 *         self.eat("VAR")
 */
  __pyx_v_eid = 0;
  __pyx_v_position = 0;
  __pyx_v_index = 0;
  __pyx_v_kind = 0;

  /* "atpy/core/parser/parser.pyx":343
 *             int eid=0,position=0,index=0,kind=0
 * 
 *         self.eat("VAR")             # <<<<<<<<<<<<<<
 *         self.eat(",")
 *         if self.current_token.kind == "NAME":
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_VAR); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":344
 * 
 *         self.eat("VAR")
 *         self.eat(",")             # <<<<<<<<<<<<<<
 *         if self.current_token.kind == "NAME":
 *             self.eat("NAME")
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":345
 *         self.eat("VAR")
 *         self.eat(",")
 *         if self.current_token.kind == "NAME":             # <<<<<<<<<<<<<<
 *             self.eat("NAME")
 *             self.eat("ASSIGN" )
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_NAME, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "atpy/core/parser/parser.pyx":346
 *         self.eat(",")
 *         if self.current_token.kind == "NAME":
 *             self.eat("NAME")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN" )
 * 
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_NAME); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":347
 *         if self.current_token.kind == "NAME":
 *             self.eat("NAME")
 *             self.eat("ASSIGN" )             # <<<<<<<<<<<<<<
 * 
 *             token=self.current_token
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 347, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":349
 *             self.eat("ASSIGN" )
 * 
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             if token.kind=="REGEX":
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":350
 * 
 *             token=self.current_token
 *             if token.kind=="REGEX":             # <<<<<<<<<<<<<<
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )
 *                 self.eat("REGEX")
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_n_u_REGEX, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":351
 *             token=self.current_token
 *             if token.kind=="REGEX":
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )             # <<<<<<<<<<<<<<
 *                 self.eat("REGEX")
 *                 eid=self.get_eid()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_re); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_compile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__pyx_v_self->current_token->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 351, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyUnicode_Substring(__pyx_v_self->current_token->value, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u__16, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_pattern = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":352
 *             if token.kind=="REGEX":
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )
 *                 self.eat("REGEX")             # <<<<<<<<<<<<<<
 *                 eid=self.get_eid()
 *                 self.eat(".")
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_REGEX); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":353
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )
 *                 self.eat("REGEX")
 *                 eid=self.get_eid()             # <<<<<<<<<<<<<<
 *                 self.eat(".")
 *                 param_name=self.current_token.value
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->get_eid(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
      __pyx_v_eid = __pyx_t_7;

      /* "atpy/core/parser/parser.pyx":354
 *                 self.eat("REGEX")
 *                 eid=self.get_eid()
 *                 self.eat(".")             # <<<<<<<<<<<<<<
 *                 param_name=self.current_token.value
 *                 kind,index=self.parameter()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":355
 *                 eid=self.get_eid()
 *                 self.eat(".")
 *                 param_name=self.current_token.value             # <<<<<<<<<<<<<<
 *                 kind,index=self.parameter()
 *                 lb,ub,step =self.get_bounds()
 */
      __pyx_t_1 = __pyx_v_self->current_token->value;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_param_name = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":356
 *                 self.eat(".")
 *                 param_name=self.current_token.value
 *                 kind,index=self.parameter()             # <<<<<<<<<<<<<<
 *                 lb,ub,step =self.get_bounds()
 *                 for name in self.elems_name:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->parameter(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(__pyx_t_1 != Py_None)) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 356, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 356, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_kind = __pyx_t_7;
      __pyx_v_index = __pyx_t_8;

      /* "atpy/core/parser/parser.pyx":357
 *                 param_name=self.current_token.value
 *                 kind,index=self.parameter()
 *                 lb,ub,step =self.get_bounds()             # <<<<<<<<<<<<<<
 *                 for name in self.elems_name:
 *                     if pattern.fullmatch(name):
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->get_bounds(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(__pyx_t_1 != Py_None)) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 357, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 357, __pyx_L1_error)
      }
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_lb = __pyx_t_9;
      __pyx_v_ub = __pyx_t_10;
      __pyx_v_step = __pyx_t_11;

      /* "atpy/core/parser/parser.pyx":358
 *                 kind,index=self.parameter()
 *                 lb,ub,step =self.get_bounds()
 *                 for name in self.elems_name:             # <<<<<<<<<<<<<<
 *                     if pattern.fullmatch(name):
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 */
      if (unlikely(__pyx_v_self->elems_name == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 358, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_v_self->elems_name; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
      for (;;) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 358, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "atpy/core/parser/parser.pyx":359
 *                 lb,ub,step =self.get_bounds()
 *                 for name in self.elems_name:
 *                     if pattern.fullmatch(name):             # <<<<<<<<<<<<<<
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pattern, __pyx_n_s_fullmatch); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_name};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "atpy/core/parser/parser.pyx":360
 *                 for name in self.elems_name:
 *                     if pattern.fullmatch(name):
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):             # <<<<<<<<<<<<<<
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")
 *                         position=self.eids[name][eid]
 */
          if (unlikely(__pyx_v_self->eids == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 360, __pyx_L1_error)
          }
          __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_3 = ((__pyx_v_eid > (__pyx_t_13 - 1)) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L9_bool_binop_done;
          }
          if (unlikely(__pyx_v_self->eids == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 360, __pyx_L1_error)
          }
          __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_3 = ((__pyx_v_eid < (-__pyx_t_13)) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L9_bool_binop_done:;
          if (unlikely(__pyx_t_2)) {

            /* "atpy/core/parser/parser.pyx":361
 *                     if pattern.fullmatch(name):
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *                         position=self.eids[name][eid]
 * 
 */
            __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_13 = 0;
            __pyx_t_14 = 127;
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_eid, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_out_or_range_of_element);
            __pyx_t_13 += 25;
            __Pyx_GIVEREF(__pyx_kp_u_out_or_range_of_element);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u_out_or_range_of_element);
            __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_at_line);
            __pyx_t_13 += 9;
            __Pyx_GIVEREF(__pyx_kp_u_at_line);
            PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_kp_u_at_line);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_column);
            __pyx_t_13 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_column);
            PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_kp_u_column);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u__2);
            __pyx_t_13 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__2);
            PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_kp_u__2);
            __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 8, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_Raise(__pyx_t_4, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __PYX_ERR(0, 361, __pyx_L1_error)

            /* "atpy/core/parser/parser.pyx":360
 *                 for name in self.elems_name:
 *                     if pattern.fullmatch(name):
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):             # <<<<<<<<<<<<<<
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")
 *                         position=self.eids[name][eid]
 */
          }

          /* "atpy/core/parser/parser.pyx":362
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")
 *                         position=self.eids[name][eid]             # <<<<<<<<<<<<<<
 * 
 *                         if kind == KWD:
 */
          if (unlikely(__pyx_v_self->eids == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 362, __pyx_L1_error)
          }
          __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_eid, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_position = __pyx_t_8;

          /* "atpy/core/parser/parser.pyx":364
 *                         position=self.eids[name][eid]
 * 
 *                         if kind == KWD:             # <<<<<<<<<<<<<<
 *                             if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")
 */
          __pyx_t_2 = ((__pyx_v_kind == KWD) != 0);
          if (__pyx_t_2) {

            /* "atpy/core/parser/parser.pyx":365
 * 
 *                         if kind == KWD:
 *                             if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")
 * 
 */
            try {
              __pyx_t_15 = std::count<std::vector<int> ::iterator,int>((__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.begin(), (__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.end(), __pyx_v_index);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 365, __pyx_L1_error)
            }
            __pyx_t_2 = ((__pyx_t_15 == 0) != 0);
            if (unlikely(__pyx_t_2)) {

              /* "atpy/core/parser/parser.pyx":366
 *                         if kind == KWD:
 *                             if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 * 
 *                         self.ordered_var_positions.append(position )
 */
              __pyx_t_5 = PyTuple_New(8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_13 = 0;
              __pyx_t_14 = 127;
              __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_param_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
              __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_INCREF(__pyx_kp_u_is_invalid_keyword_for);
              __pyx_t_13 += 24;
              __Pyx_GIVEREF(__pyx_kp_u_is_invalid_keyword_for);
              PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_is_invalid_keyword_for);
              __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
              __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_INCREF(__pyx_kp_u_at_line);
              __pyx_t_13 += 9;
              __Pyx_GIVEREF(__pyx_kp_u_at_line);
              PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_u_at_line);
              __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_INCREF(__pyx_kp_u_column);
              __pyx_t_13 += 8;
              __Pyx_GIVEREF(__pyx_kp_u_column);
              PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_kp_u_column);
              __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_INCREF(__pyx_kp_u__2);
              __pyx_t_13 += 1;
              __Pyx_GIVEREF(__pyx_kp_u__2);
              PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_kp_u__2);
              __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 8, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_Raise(__pyx_t_5, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __PYX_ERR(0, 366, __pyx_L1_error)

              /* "atpy/core/parser/parser.pyx":365
 * 
 *                         if kind == KWD:
 *                             if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")
 * 
 */
            }

            /* "atpy/core/parser/parser.pyx":364
 *                         position=self.eids[name][eid]
 * 
 *                         if kind == KWD:             # <<<<<<<<<<<<<<
 *                             if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")
 */
          }

          /* "atpy/core/parser/parser.pyx":368
 *                                 raise KeyError(f"{param_name} is invalid keyword for {name} at line {token.line} column {token.column}!")
 * 
 *                         self.ordered_var_positions.append(position )             # <<<<<<<<<<<<<<
 *                         var_name=f"{name}[{eid}].{param_name}"
 *                         if var_name in self.vars_name:
 */
          if (unlikely(__pyx_v_self->ordered_var_positions == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 368, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_position); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->ordered_var_positions, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 368, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "atpy/core/parser/parser.pyx":369
 * 
 *                         self.ordered_var_positions.append(position )
 *                         var_name=f"{name}[{eid}].{param_name}"             # <<<<<<<<<<<<<<
 *                         if var_name in self.vars_name:
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 */
          __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = 0;
          __pyx_t_14 = 127;
          __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
          __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_INCREF(__pyx_kp_u__14);
          __pyx_t_13 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__14);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u__14);
          __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_eid, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_INCREF(__pyx_kp_u__17);
          __pyx_t_13 += 2;
          __Pyx_GIVEREF(__pyx_kp_u__17);
          PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_u__17);
          __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_param_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
          __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_var_name, ((PyObject*)__pyx_t_4));
          __pyx_t_4 = 0;

          /* "atpy/core/parser/parser.pyx":370
 *                         self.ordered_var_positions.append(position )
 *                         var_name=f"{name}[{eid}].{param_name}"
 *                         if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                         string_vars_name=var_name.encode("utf8")
 */
          __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_var_name, __pyx_v_self->vars_name, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 370, __pyx_L1_error)
          __pyx_t_3 = (__pyx_t_2 != 0);
          if (unlikely(__pyx_t_3)) {

            /* "atpy/core/parser/parser.pyx":371
 *                         var_name=f"{name}[{eid}].{param_name}"
 *                         if var_name in self.vars_name:
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *                         string_vars_name=var_name.encode("utf8")
 *                         self.vars_name.append(var_name)
 */
            __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_13 = 0;
            __pyx_t_14 = 127;
            __Pyx_INCREF(__pyx_kp_u_Redefined_Var);
            __pyx_t_13 += 14;
            __Pyx_GIVEREF(__pyx_kp_u_Redefined_Var);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Redefined_Var);
            __Pyx_INCREF(__pyx_v_var_name);
            __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_v_var_name) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_v_var_name) : __pyx_t_14;
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_v_var_name);
            __Pyx_GIVEREF(__pyx_v_var_name);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_var_name);
            __Pyx_INCREF(__pyx_kp_u_at_line);
            __pyx_t_13 += 9;
            __Pyx_GIVEREF(__pyx_kp_u_at_line);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_at_line);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_column);
            __pyx_t_13 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_column);
            PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u__2);
            __pyx_t_13 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__2);
            PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
            __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_Raise(__pyx_t_4, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __PYX_ERR(0, 371, __pyx_L1_error)

            /* "atpy/core/parser/parser.pyx":370
 *                         self.ordered_var_positions.append(position )
 *                         var_name=f"{name}[{eid}].{param_name}"
 *                         if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                         string_vars_name=var_name.encode("utf8")
 */
          }

          /* "atpy/core/parser/parser.pyx":372
 *                         if var_name in self.vars_name:
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                         string_vars_name=var_name.encode("utf8")             # <<<<<<<<<<<<<<
 *                         self.vars_name.append(var_name)
 *                         self.vars_elem_name.append(name)
 */
          __pyx_t_4 = PyUnicode_AsUTF8String(__pyx_v_var_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_v_string_vars_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

          /* "atpy/core/parser/parser.pyx":373
 *                             raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                         string_vars_name=var_name.encode("utf8")
 *                         self.vars_name.append(var_name)             # <<<<<<<<<<<<<<
 *                         self.vars_elem_name.append(name)
 * 
 */
          if (unlikely(__pyx_v_self->vars_name == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 373, __pyx_L1_error)
          }
          __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_name, __pyx_v_var_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 373, __pyx_L1_error)

          /* "atpy/core/parser/parser.pyx":374
 *                         string_vars_name=var_name.encode("utf8")
 *                         self.vars_name.append(var_name)
 *                         self.vars_elem_name.append(name)             # <<<<<<<<<<<<<<
 * 
 *                         node = new Property(kind, position,index, self.line.line, self.line.globals)
 */
          if (unlikely(__pyx_v_self->vars_elem_name == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 374, __pyx_L1_error)
          }
          __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_elem_name, __pyx_v_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 374, __pyx_L1_error)

          /* "atpy/core/parser/parser.pyx":376
 *                         self.vars_elem_name.append(name)
 * 
 *                         node = new Property(kind, position,index, self.line.line, self.line.globals)             # <<<<<<<<<<<<<<
 *                         node=new Var(<Property*?>node,lb,ub,step)
 *                         self.line.vars.append(string_vars_name, node,True)
 */
          try {
            __pyx_t_18 = new Property(__pyx_v_kind, __pyx_v_position, __pyx_v_index, __pyx_v_self->line->line, __pyx_v_self->line->globals);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 376, __pyx_L1_error)
          }
          __pyx_v_node = __pyx_t_18;

          /* "atpy/core/parser/parser.pyx":377
 * 
 *                         node = new Property(kind, position,index, self.line.line, self.line.globals)
 *                         node=new Var(<Property*?>node,lb,ub,step)             # <<<<<<<<<<<<<<
 *                         self.line.vars.append(string_vars_name, node,True)
 *             elif token.kind=="ID":
 */
          try {
            __pyx_t_19 = new Var(((Property *)__pyx_v_node), __pyx_v_lb, __pyx_v_ub, __pyx_v_step);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 377, __pyx_L1_error)
          }
          __pyx_v_node = __pyx_t_19;

          /* "atpy/core/parser/parser.pyx":378
 *                         node = new Property(kind, position,index, self.line.line, self.line.globals)
 *                         node=new Var(<Property*?>node,lb,ub,step)
 *                         self.line.vars.append(string_vars_name, node,True)             # <<<<<<<<<<<<<<
 *             elif token.kind=="ID":
 *                 self.term_names=[]
 */
          try {
            __pyx_v_self->line->vars.append(__pyx_v_string_vars_name, __pyx_v_node, 1);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 378, __pyx_L1_error)
          }

          /* "atpy/core/parser/parser.pyx":359
 *                 lb,ub,step =self.get_bounds()
 *                 for name in self.elems_name:
 *                     if pattern.fullmatch(name):             # <<<<<<<<<<<<<<
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 *                             raise IndexError(f"{eid} out or range of element {name} at line {token.line} column {token.column}!")
 */
        }

        /* "atpy/core/parser/parser.pyx":358
 *                 kind,index=self.parameter()
 *                 lb,ub,step =self.get_bounds()
 *                 for name in self.elems_name:             # <<<<<<<<<<<<<<
 *                     if pattern.fullmatch(name):
 *                         if eid>len(self.eids[name ] )-1 or eid<-len(self.eids[name]):
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":350
 * 
 *             token=self.current_token
 *             if token.kind=="REGEX":             # <<<<<<<<<<<<<<
 *                 pattern=re.compile(rf"^{self.current_token.value[1:] }" )
 *                 self.eat("REGEX")
 */
      goto __pyx_L4;
    }

    /* "atpy/core/parser/parser.pyx":379
 *                         node=new Var(<Property*?>node,lb,ub,step)
 *                         self.line.vars.append(string_vars_name, node,True)
 *             elif token.kind=="ID":             # <<<<<<<<<<<<<<
 *                 self.term_names=[]
 *                 name = self.current_token.value
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 379, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (likely(__pyx_t_2)) {

      /* "atpy/core/parser/parser.pyx":380
 *                         self.line.vars.append(string_vars_name, node,True)
 *             elif token.kind=="ID":
 *                 self.term_names=[]             # <<<<<<<<<<<<<<
 *                 name = self.current_token.value
 *                 position=self.position()
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->term_names);
      __Pyx_DECREF(__pyx_v_self->term_names);
      __pyx_v_self->term_names = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":381
 *             elif token.kind=="ID":
 *                 self.term_names=[]
 *                 name = self.current_token.value             # <<<<<<<<<<<<<<
 *                 position=self.position()
 *                 self.eat(".")
 */
      __pyx_t_1 = __pyx_v_self->current_token->value;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_name = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":382
 *                 self.term_names=[]
 *                 name = self.current_token.value
 *                 position=self.position()             # <<<<<<<<<<<<<<
 *                 self.eat(".")
 *                 param_token=self.current_token
 */
      __pyx_t_8 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->position(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
      __pyx_v_position = __pyx_t_8;

      /* "atpy/core/parser/parser.pyx":383
 *                 name = self.current_token.value
 *                 position=self.position()
 *                 self.eat(".")             # <<<<<<<<<<<<<<
 *                 param_token=self.current_token
 *                 kind,index=self.parameter()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":384
 *                 position=self.position()
 *                 self.eat(".")
 *                 param_token=self.current_token             # <<<<<<<<<<<<<<
 *                 kind,index=self.parameter()
 * 
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_self->current_token);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_param_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":385
 *                 self.eat(".")
 *                 param_token=self.current_token
 *                 kind,index=self.parameter()             # <<<<<<<<<<<<<<
 * 
 *                 if kind == KWD:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->parameter(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(__pyx_t_1 != Py_None)) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 385, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 385, __pyx_L1_error)
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_kind = __pyx_t_8;
      __pyx_v_index = __pyx_t_7;

      /* "atpy/core/parser/parser.pyx":387
 *                 kind,index=self.parameter()
 * 
 *                 if kind == KWD:             # <<<<<<<<<<<<<<
 *                     if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 */
      __pyx_t_2 = ((__pyx_v_kind == KWD) != 0);
      if (__pyx_t_2) {

        /* "atpy/core/parser/parser.pyx":388
 * 
 *                 if kind == KWD:
 *                     if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 */
        try {
          __pyx_t_15 = std::count<std::vector<int> ::iterator,int>((__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.begin(), (__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.end(), __pyx_v_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 388, __pyx_L1_error)
        }
        __pyx_t_2 = ((__pyx_t_15 == 0) != 0);
        if (unlikely(__pyx_t_2)) {

          /* "atpy/core/parser/parser.pyx":389
 *                 if kind == KWD:
 *                     if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")             # <<<<<<<<<<<<<<
 * 
 *                 var_name="".join(self.term_names )
 */
          __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = 0;
          __pyx_t_14 = 127;
          __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_param_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u_is_invalid_keyword_at_line);
          __pyx_t_12 += 28;
          __Pyx_GIVEREF(__pyx_kp_u_is_invalid_keyword_at_line);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_is_invalid_keyword_at_line);
          __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_param_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u_column);
          __pyx_t_12 += 8;
          __Pyx_GIVEREF(__pyx_kp_u_column);
          PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_column);
          __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_param_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u__2);
          __pyx_t_12 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__2);
          PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_kp_u__2);
          __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 6, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 389, __pyx_L1_error)

          /* "atpy/core/parser/parser.pyx":388
 * 
 *                 if kind == KWD:
 *                     if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 */
        }

        /* "atpy/core/parser/parser.pyx":387
 *                 kind,index=self.parameter()
 * 
 *                 if kind == KWD:             # <<<<<<<<<<<<<<
 *                     if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 */
      }

      /* "atpy/core/parser/parser.pyx":391
 *                         raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 *                 var_name="".join(self.term_names )             # <<<<<<<<<<<<<<
 *                 lb,ub,step =self.get_bounds()
 *                 self.ordered_var_positions.append(position )
 */
      __pyx_t_1 = __pyx_v_self->term_names;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = PyUnicode_Join(__pyx_kp_u__18, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_var_name = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "atpy/core/parser/parser.pyx":392
 * 
 *                 var_name="".join(self.term_names )
 *                 lb,ub,step =self.get_bounds()             # <<<<<<<<<<<<<<
 *                 self.ordered_var_positions.append(position )
 *                 if var_name in self.vars_name:
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->get_bounds(__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (likely(__pyx_t_5 != Py_None)) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 392, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 392, __pyx_L1_error)
      }
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_lb = __pyx_t_11;
      __pyx_v_ub = __pyx_t_10;
      __pyx_v_step = __pyx_t_9;

      /* "atpy/core/parser/parser.pyx":393
 *                 var_name="".join(self.term_names )
 *                 lb,ub,step =self.get_bounds()
 *                 self.ordered_var_positions.append(position )             # <<<<<<<<<<<<<<
 *                 if var_name in self.vars_name:
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 */
      if (unlikely(__pyx_v_self->ordered_var_positions == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 393, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_position); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->ordered_var_positions, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 393, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "atpy/core/parser/parser.pyx":394
 *                 lb,ub,step =self.get_bounds()
 *                 self.ordered_var_positions.append(position )
 *                 if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                 self.vars_name.append(var_name)
 */
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_var_name, __pyx_v_self->vars_name, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 394, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (unlikely(__pyx_t_3)) {

        /* "atpy/core/parser/parser.pyx":395
 *                 self.ordered_var_positions.append(position )
 *                 if var_name in self.vars_name:
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *                 self.vars_name.append(var_name)
 *                 string_vars_name=var_name.encode("utf8")
 */
        __pyx_t_5 = PyTuple_New(7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_Redefined_Var);
        __pyx_t_12 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_Redefined_Var);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Redefined_Var);
        __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_var_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_at_line);
        __pyx_t_12 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_at_line);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_at_line);
        __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_column);
        __pyx_t_12 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_column);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_column);
        __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u__2);
        __pyx_t_12 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__2);
        PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u__2);
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 7, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 395, __pyx_L1_error)

        /* "atpy/core/parser/parser.pyx":394
 *                 lb,ub,step =self.get_bounds()
 *                 self.ordered_var_positions.append(position )
 *                 if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                 self.vars_name.append(var_name)
 */
      }

      /* "atpy/core/parser/parser.pyx":396
 *                 if var_name in self.vars_name:
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                 self.vars_name.append(var_name)             # <<<<<<<<<<<<<<
 *                 string_vars_name=var_name.encode("utf8")
 * 
 */
      if (unlikely(__pyx_v_self->vars_name == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 396, __pyx_L1_error)
      }
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_name, __pyx_v_var_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 396, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":397
 *                     raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *                 self.vars_name.append(var_name)
 *                 string_vars_name=var_name.encode("utf8")             # <<<<<<<<<<<<<<
 * 
 *                 node = new Property(kind, position,index, self.line.line, self.line.globals)
 */
      if (unlikely(__pyx_v_var_name == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
        __PYX_ERR(0, 397, __pyx_L1_error)
      }
      __pyx_t_5 = PyUnicode_AsUTF8String(__pyx_v_var_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_string_vars_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

      /* "atpy/core/parser/parser.pyx":399
 *                 string_vars_name=var_name.encode("utf8")
 * 
 *                 node = new Property(kind, position,index, self.line.line, self.line.globals)             # <<<<<<<<<<<<<<
 *                 node=new Var(<Property*?>node,lb,ub,step)
 *                 self.line.vars.append(string_vars_name, node,True)
 */
      try {
        __pyx_t_18 = new Property(__pyx_v_kind, __pyx_v_position, __pyx_v_index, __pyx_v_self->line->line, __pyx_v_self->line->globals);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 399, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_18;

      /* "atpy/core/parser/parser.pyx":400
 * 
 *                 node = new Property(kind, position,index, self.line.line, self.line.globals)
 *                 node=new Var(<Property*?>node,lb,ub,step)             # <<<<<<<<<<<<<<
 *                 self.line.vars.append(string_vars_name, node,True)
 *                 self.vars_elem_name.append(name)
 */
      try {
        __pyx_t_19 = new Var(((Property *)__pyx_v_node), __pyx_v_lb, __pyx_v_ub, __pyx_v_step);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 400, __pyx_L1_error)
      }
      __pyx_v_node = __pyx_t_19;

      /* "atpy/core/parser/parser.pyx":401
 *                 node = new Property(kind, position,index, self.line.line, self.line.globals)
 *                 node=new Var(<Property*?>node,lb,ub,step)
 *                 self.line.vars.append(string_vars_name, node,True)             # <<<<<<<<<<<<<<
 *                 self.vars_elem_name.append(name)
 *             else:
 */
      try {
        __pyx_v_self->line->vars.append(__pyx_v_string_vars_name, __pyx_v_node, 1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 401, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":402
 *                 node=new Var(<Property*?>node,lb,ub,step)
 *                 self.line.vars.append(string_vars_name, node,True)
 *                 self.vars_elem_name.append(name)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise SyntaxError(f"Unknown syntax {token.value}  at line {token.line} column {token.column}!")
 */
      if (unlikely(__pyx_v_self->vars_elem_name == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 402, __pyx_L1_error)
      }
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_elem_name, __pyx_v_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 402, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":379
 *                         node=new Var(<Property*?>node,lb,ub,step)
 *                         self.line.vars.append(string_vars_name, node,True)
 *             elif token.kind=="ID":             # <<<<<<<<<<<<<<
 *                 self.term_names=[]
 *                 name = self.current_token.value
 */
      goto __pyx_L4;
    }

    /* "atpy/core/parser/parser.pyx":404
 *                 self.vars_elem_name.append(name)
 *             else:
 *                 raise SyntaxError(f"Unknown syntax {token.value}  at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *         elif self.current_token.kind=="ID":
 *             token=self.current_token
 */
    /*else*/ {
      __pyx_t_5 = PyTuple_New(7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
      __pyx_t_12 += 15;
      __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Unknown_syntax);
      __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_at_line_2);
      __pyx_t_12 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_at_line_2);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_at_line_2);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_12 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_column);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u__2);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 7, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 404, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "atpy/core/parser/parser.pyx":345
 *         self.eat("VAR")
 *         self.eat(",")
 *         if self.current_token.kind == "NAME":             # <<<<<<<<<<<<<<
 *             self.eat("NAME")
 *             self.eat("ASSIGN" )
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":405
 *             else:
 *                 raise SyntaxError(f"Unknown syntax {token.value}  at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             name = self.current_token.value
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":406
 *                 raise SyntaxError(f"Unknown syntax {token.value}  at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="ID":
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             name = self.current_token.value
 *             self.term_names=[]
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":407
 *         elif self.current_token.kind=="ID":
 *             token=self.current_token
 *             name = self.current_token.value             # <<<<<<<<<<<<<<
 *             self.term_names=[]
 *             position=self.position()
 */
    __pyx_t_5 = __pyx_v_self->current_token->value;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_name = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":408
 *             token=self.current_token
 *             name = self.current_token.value
 *             self.term_names=[]             # <<<<<<<<<<<<<<
 *             position=self.position()
 *             self.eat(".")
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->term_names);
    __Pyx_DECREF(__pyx_v_self->term_names);
    __pyx_v_self->term_names = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":409
 *             name = self.current_token.value
 *             self.term_names=[]
 *             position=self.position()             # <<<<<<<<<<<<<<
 *             self.eat(".")
 *             param_token=self.current_token
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->position(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L1_error)
    __pyx_v_position = __pyx_t_7;

    /* "atpy/core/parser/parser.pyx":410
 *             self.term_names=[]
 *             position=self.position()
 *             self.eat(".")             # <<<<<<<<<<<<<<
 *             param_token=self.current_token
 *             kind,index=self.parameter()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":411
 *             position=self.position()
 *             self.eat(".")
 *             param_token=self.current_token             # <<<<<<<<<<<<<<
 *             kind,index=self.parameter()
 * 
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_param_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":412
 *             self.eat(".")
 *             param_token=self.current_token
 *             kind,index=self.parameter()             # <<<<<<<<<<<<<<
 * 
 *             if kind == KWD:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->parameter(__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(__pyx_t_5 != Py_None)) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 412, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 412, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_kind = __pyx_t_7;
    __pyx_v_index = __pyx_t_8;

    /* "atpy/core/parser/parser.pyx":414
 *             kind,index=self.parameter()
 * 
 *             if kind == KWD:             # <<<<<<<<<<<<<<
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 */
    __pyx_t_2 = ((__pyx_v_kind == KWD) != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":415
 * 
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 */
      try {
        __pyx_t_15 = std::count<std::vector<int> ::iterator,int>((__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.begin(), (__pyx_v_self->line->line[__pyx_v_position])->elem->keywords.end(), __pyx_v_index);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 415, __pyx_L1_error)
      }
      __pyx_t_2 = ((__pyx_t_15 == 0) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "atpy/core/parser/parser.pyx":416
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")             # <<<<<<<<<<<<<<
 * 
 *             var_name="".join(self.term_names )
 */
        __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = 0;
        __pyx_t_14 = 127;
        __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_param_token->value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_invalid_keyword_at_line);
        __pyx_t_12 += 28;
        __Pyx_GIVEREF(__pyx_kp_u_is_invalid_keyword_at_line);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_is_invalid_keyword_at_line);
        __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_param_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_column);
        __pyx_t_12 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_column);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_u_column);
        __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_param_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__2);
        __pyx_t_12 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__2);
        PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_kp_u__2);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 6, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 416, __pyx_L1_error)

        /* "atpy/core/parser/parser.pyx":415
 * 
 *             if kind == KWD:
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:             # <<<<<<<<<<<<<<
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 */
      }

      /* "atpy/core/parser/parser.pyx":414
 *             kind,index=self.parameter()
 * 
 *             if kind == KWD:             # <<<<<<<<<<<<<<
 *                 if cpp_count(self.line.line[position].elem.keywords.begin(), self.line.line[position].elem.keywords.end(),index)==0:
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 */
    }

    /* "atpy/core/parser/parser.pyx":418
 *                     raise KeyError(f"{param_token.value} is invalid keyword at line {param_token.line} column {param_token.column}!")
 * 
 *             var_name="".join(self.term_names )             # <<<<<<<<<<<<<<
 *             self.ordered_var_positions.append(position )
 *             if var_name in self.vars_name:
 */
    __pyx_t_5 = __pyx_v_self->term_names;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__18, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_var_name = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "atpy/core/parser/parser.pyx":419
 * 
 *             var_name="".join(self.term_names )
 *             self.ordered_var_positions.append(position )             # <<<<<<<<<<<<<<
 *             if var_name in self.vars_name:
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 */
    if (unlikely(__pyx_v_self->ordered_var_positions == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 419, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->ordered_var_positions, __pyx_t_4); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "atpy/core/parser/parser.pyx":420
 *             var_name="".join(self.term_names )
 *             self.ordered_var_positions.append(position )
 *             if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *             self.vars_name.append(var_name)
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_var_name, __pyx_v_self->vars_name, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 420, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_3)) {

      /* "atpy/core/parser/parser.pyx":421
 *             self.ordered_var_positions.append(position )
 *             if var_name in self.vars_name:
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             self.vars_name.append(var_name)
 *             string_vars_name=var_name.encode("utf8")
 */
      __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u_Redefined_Var);
      __pyx_t_12 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_Redefined_Var);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Redefined_Var);
      __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_var_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_at_line);
      __pyx_t_12 += 9;
      __Pyx_GIVEREF(__pyx_kp_u_at_line);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_at_line);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_12 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 421, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":420
 *             var_name="".join(self.term_names )
 *             self.ordered_var_positions.append(position )
 *             if var_name in self.vars_name:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *             self.vars_name.append(var_name)
 */
    }

    /* "atpy/core/parser/parser.pyx":422
 *             if var_name in self.vars_name:
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *             self.vars_name.append(var_name)             # <<<<<<<<<<<<<<
 *             string_vars_name=var_name.encode("utf8")
 *             self.eat("DELAY")
 */
    if (unlikely(__pyx_v_self->vars_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 422, __pyx_L1_error)
    }
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_name, __pyx_v_var_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 422, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":423
 *                 raise SyntaxError(f"Redefined Var {var_name} at line {token.line} column {token.column}!")
 *             self.vars_name.append(var_name)
 *             string_vars_name=var_name.encode("utf8")             # <<<<<<<<<<<<<<
 *             self.eat("DELAY")
 * 
 */
    if (unlikely(__pyx_v_var_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 423, __pyx_L1_error)
    }
    __pyx_t_4 = PyUnicode_AsUTF8String(__pyx_v_var_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_string_vars_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17);

    /* "atpy/core/parser/parser.pyx":424
 *             self.vars_name.append(var_name)
 *             string_vars_name=var_name.encode("utf8")
 *             self.eat("DELAY")             # <<<<<<<<<<<<<<
 * 
 *             node= new Property(kind, position,index, self.line.line, self.line.globals)
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_DELAY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":426
 *             self.eat("DELAY")
 * 
 *             node= new Property(kind, position,index, self.line.line, self.line.globals)             # <<<<<<<<<<<<<<
 *             node =new Var(<Property*?>node,self.expr())
 *             self.line.vars.append(string_vars_name,node,False)
 */
    try {
      __pyx_t_18 = new Property(__pyx_v_kind, __pyx_v_position, __pyx_v_index, __pyx_v_self->line->line, __pyx_v_self->line->globals);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 426, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_18;

    /* "atpy/core/parser/parser.pyx":427
 * 
 *             node= new Property(kind, position,index, self.line.line, self.line.globals)
 *             node =new Var(<Property*?>node,self.expr())             # <<<<<<<<<<<<<<
 *             self.line.vars.append(string_vars_name,node,False)
 *             self.vars_elem_name.append(name)
 */
    __pyx_t_20 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
    try {
      __pyx_t_19 = new Var(((Property *)__pyx_v_node), __pyx_t_20);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 427, __pyx_L1_error)
    }
    __pyx_v_node = __pyx_t_19;

    /* "atpy/core/parser/parser.pyx":428
 *             node= new Property(kind, position,index, self.line.line, self.line.globals)
 *             node =new Var(<Property*?>node,self.expr())
 *             self.line.vars.append(string_vars_name,node,False)             # <<<<<<<<<<<<<<
 *             self.vars_elem_name.append(name)
 * 
 */
    try {
      __pyx_v_self->line->vars.append(__pyx_v_string_vars_name, __pyx_v_node, 0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 428, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":429
 *             node =new Var(<Property*?>node,self.expr())
 *             self.line.vars.append(string_vars_name,node,False)
 *             self.vars_elem_name.append(name)             # <<<<<<<<<<<<<<
 * 
 *             # self.line.vars.ordered_depend_var_names.push_back( string_vars_name )
 */
    if (unlikely(__pyx_v_self->vars_elem_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 429, __pyx_L1_error)
    }
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_self->vars_elem_name, __pyx_v_name); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 429, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":405
 *             else:
 *                 raise SyntaxError(f"Unknown syntax {token.value}  at line {token.line} column {token.column}!")
 *         elif self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             name = self.current_token.value
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":434
 *             # self.line.vars.num_dependent_vars+=1
 *         else:
 *             raise SyntaxError(f"Unknown syntax {self.current_token.value} at line {self.current_token.line} column {self.current_token.column}!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_syntax);
    __pyx_t_12 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_syntax);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Unknown_syntax);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_at_line);
    __pyx_t_12 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_at_line);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_at_line);
    __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_column);
    __pyx_t_12 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_column);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_column);
    __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_self->current_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__2);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__2);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 434, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":333
 * 
 * 
 *     cdef void set_variable(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token, param_token
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.set_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_XDECREF((PyObject *)__pyx_v_param_token);
  __Pyx_XDECREF(__pyx_v_param_name);
  __Pyx_XDECREF(__pyx_v_ordered_var_positions);
  __Pyx_XDECREF(__pyx_v_pattern);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_var_name);
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":437
 * 
 * 
 *     cdef void set_constraint(self)except*:             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_constraint(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  std::string __pyx_v_name;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  AST *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_constraint", 0);

  /* "atpy/core/parser/parser.pyx":441
 *         cdef:
 *             Token token
 *             AST* node=NULL             # <<<<<<<<<<<<<<
 *             string name
 *         self.eat("CONSTRAINT")
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":443
 *             AST* node=NULL
 *             string name
 *         self.eat("CONSTRAINT")             # <<<<<<<<<<<<<<
 *         self.eat(",")
 *         self.eat("EXPR")
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_CONSTRAINT); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":444
 *             string name
 *         self.eat("CONSTRAINT")
 *         self.eat(",")             # <<<<<<<<<<<<<<
 *         self.eat("EXPR")
 *         self.eat("DELAY" )
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":445
 *         self.eat("CONSTRAINT")
 *         self.eat(",")
 *         self.eat("EXPR")             # <<<<<<<<<<<<<<
 *         self.eat("DELAY" )
 *         self.term_names=[]
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_EXPR); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":446
 *         self.eat(",")
 *         self.eat("EXPR")
 *         self.eat("DELAY" )             # <<<<<<<<<<<<<<
 *         self.term_names=[]
 *         node=self.expr()
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_DELAY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":447
 *         self.eat("EXPR")
 *         self.eat("DELAY" )
 *         self.term_names=[]             # <<<<<<<<<<<<<<
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->term_names);
  __Pyx_DECREF(__pyx_v_self->term_names);
  __pyx_v_self->term_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":448
 *         self.eat("DELAY" )
 *         self.term_names=[]
 *         node=self.expr()             # <<<<<<<<<<<<<<
 *         name = "".join(self.term_names).encode("utf8")
 *         self.line.constraints.append(name,node)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_v_node = __pyx_t_2;

  /* "atpy/core/parser/parser.pyx":449
 *         self.term_names=[]
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")             # <<<<<<<<<<<<<<
 *         self.line.constraints.append(name,node)
 * 
 */
  __pyx_t_1 = __pyx_v_self->term_names;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__18, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "atpy/core/parser/parser.pyx":450
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")
 *         self.line.constraints.append(name,node)             # <<<<<<<<<<<<<<
 * 
 *         for value in self.term_names:
 */
  try {
    __pyx_v_self->line->constraints.append(__pyx_v_name, __pyx_v_node);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 450, __pyx_L1_error)
  }

  /* "atpy/core/parser/parser.pyx":452
 *         self.line.constraints.append(name,node)
 * 
 *         for value in self.term_names:             # <<<<<<<<<<<<<<
 *             if value in chromatic_terms:
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 */
  if (unlikely(__pyx_v_self->term_names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 452, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->term_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 452, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "atpy/core/parser/parser.pyx":453
 * 
 *         for value in self.term_names:
 *             if value in chromatic_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_chromatic_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "atpy/core/parser/parser.pyx":454
 *         for value in self.term_names:
 *             if value in chromatic_terms:
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in driving_terms:
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[CHROMATIC_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":453
 * 
 *         for value in self.term_names:
 *             if value in chromatic_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 */
      goto __pyx_L5;
    }

    /* "atpy/core/parser/parser.pyx":455
 *             if value in chromatic_terms:
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_driving_terms, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 455, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":456
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in da_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[DRIVING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":455
 *             if value in chromatic_terms:
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 */
      goto __pyx_L5;
    }

    /* "atpy/core/parser/parser.pyx":457
 *             elif  value in driving_terms:
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 457, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "atpy/core/parser/parser.pyx":458
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in ma_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[DA_TRACKING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":457
 *             elif  value in driving_terms:
 *                 self.line.constraints.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 */
      goto __pyx_L5;
    }

    /* "atpy/core/parser/parser.pyx":459
 *             elif  value in da_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 459, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":460
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[MA_TRACKING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":459
 *             elif  value in da_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 */
      goto __pyx_L5;
    }

    /* "atpy/core/parser/parser.pyx":461
 *             elif  value in ma_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 461, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "atpy/core/parser/parser.pyx":462
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in off_momentum_sum_terms:
 *                 self.line.constraints.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":461
 *             elif  value in ma_tracking_terms:
 *                 self.line.constraints.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 */
      goto __pyx_L5;
    }

    /* "atpy/core/parser/parser.pyx":463
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 *         # self.line.constraints.values.push_back(node)
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 463, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":464
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 *                 self.line.constraints.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True             # <<<<<<<<<<<<<<
 *         # self.line.constraints.values.push_back(node)
 *         # self.line.constraints.num_constraint+=1
 */
      (__pyx_v_self->line->constraints.time_consuming_terms[OFF_MOMENTUM_SUM_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":463
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.constraints.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.constraints.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 *         # self.line.constraints.values.push_back(node)
 */
    }
    __pyx_L5:;

    /* "atpy/core/parser/parser.pyx":452
 *         self.line.constraints.append(name,node)
 * 
 *         for value in self.term_names:             # <<<<<<<<<<<<<<
 *             if value in chromatic_terms:
 *                 self.line.constraints.time_consuming_terms[CHROMATIC_TERMS]=True
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":437
 * 
 * 
 *     cdef void set_constraint(self)except*:             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.set_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":470
 * 
 * 
 *     cdef void set_optimize(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_optimize(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  std::string __pyx_v_name;
  int __pyx_v_ismin;
  PyObject *__pyx_v_value = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  AST *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_optimize", 0);

  /* "atpy/core/parser/parser.pyx":473
 *         cdef:
 *             Token token
 *             AST* node=NULL             # <<<<<<<<<<<<<<
 *             string name
 *             bint ismin=True
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":475
 *             AST* node=NULL
 *             string name
 *             bint ismin=True             # <<<<<<<<<<<<<<
 * 
 *         self.eat("OPTIMIZE")
 */
  __pyx_v_ismin = 1;

  /* "atpy/core/parser/parser.pyx":477
 *             bint ismin=True
 * 
 *         self.eat("OPTIMIZE")             # <<<<<<<<<<<<<<
 *         self.eat(",")
 *         self.eat("EXPR")
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_OPTIMIZE); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":478
 * 
 *         self.eat("OPTIMIZE")
 *         self.eat(",")             # <<<<<<<<<<<<<<
 *         self.eat("EXPR")
 *         self.eat("DELAY" )
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":479
 *         self.eat("OPTIMIZE")
 *         self.eat(",")
 *         self.eat("EXPR")             # <<<<<<<<<<<<<<
 *         self.eat("DELAY" )
 *         self.term_names=[]
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_EXPR); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":480
 *         self.eat(",")
 *         self.eat("EXPR")
 *         self.eat("DELAY" )             # <<<<<<<<<<<<<<
 *         self.term_names=[]
 *         node=self.expr()
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_DELAY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":481
 *         self.eat("EXPR")
 *         self.eat("DELAY" )
 *         self.term_names=[]             # <<<<<<<<<<<<<<
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->term_names);
  __Pyx_DECREF(__pyx_v_self->term_names);
  __pyx_v_self->term_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":482
 *         self.eat("DELAY" )
 *         self.term_names=[]
 *         node=self.expr()             # <<<<<<<<<<<<<<
 *         name = "".join(self.term_names).encode("utf8")
 *         if self.current_token.kind==",":
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_v_node = __pyx_t_2;

  /* "atpy/core/parser/parser.pyx":483
 *         self.term_names=[]
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")             # <<<<<<<<<<<<<<
 *         if self.current_token.kind==",":
 *             self.eat(",")
 */
  __pyx_t_1 = __pyx_v_self->term_names;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__18, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "atpy/core/parser/parser.pyx":484
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")
 *         if self.current_token.kind==",":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             if self.current_token.kind=="MINIMIZE":
 */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 484, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "atpy/core/parser/parser.pyx":485
 *         name = "".join(self.term_names).encode("utf8")
 *         if self.current_token.kind==",":
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             if self.current_token.kind=="MINIMIZE":
 *                 ismin=True
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 485, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":486
 *         if self.current_token.kind==",":
 *             self.eat(",")
 *             if self.current_token.kind=="MINIMIZE":             # <<<<<<<<<<<<<<
 *                 ismin=True
 *                 self.eat("MINIMIZE")
 */
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_MINIMIZE, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 486, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "atpy/core/parser/parser.pyx":487
 *             self.eat(",")
 *             if self.current_token.kind=="MINIMIZE":
 *                 ismin=True             # <<<<<<<<<<<<<<
 *                 self.eat("MINIMIZE")
 *                 #self.line.optima.minormax.push_back(1.0)
 */
      __pyx_v_ismin = 1;

      /* "atpy/core/parser/parser.pyx":488
 *             if self.current_token.kind=="MINIMIZE":
 *                 ismin=True
 *                 self.eat("MINIMIZE")             # <<<<<<<<<<<<<<
 *                 #self.line.optima.minormax.push_back(1.0)
 *             elif self.current_token.kind=="MAXIMIZE":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_MINIMIZE); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":486
 *         if self.current_token.kind==",":
 *             self.eat(",")
 *             if self.current_token.kind=="MINIMIZE":             # <<<<<<<<<<<<<<
 *                 ismin=True
 *                 self.eat("MINIMIZE")
 */
      goto __pyx_L4;
    }

    /* "atpy/core/parser/parser.pyx":490
 *                 self.eat("MINIMIZE")
 *                 #self.line.optima.minormax.push_back(1.0)
 *             elif self.current_token.kind=="MAXIMIZE":             # <<<<<<<<<<<<<<
 *                 ismin=False
 *                 self.eat("MAXIMIZE")
 */
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_MAXIMIZE, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 490, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":491
 *                 #self.line.optima.minormax.push_back(1.0)
 *             elif self.current_token.kind=="MAXIMIZE":
 *                 ismin=False             # <<<<<<<<<<<<<<
 *                 self.eat("MAXIMIZE")
 *                 #self.line.optima.minormax.push_back(-1.0)
 */
      __pyx_v_ismin = 0;

      /* "atpy/core/parser/parser.pyx":492
 *             elif self.current_token.kind=="MAXIMIZE":
 *                 ismin=False
 *                 self.eat("MAXIMIZE")             # <<<<<<<<<<<<<<
 *                 #self.line.optima.minormax.push_back(-1.0)
 *         else:
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_MAXIMIZE); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":490
 *                 self.eat("MINIMIZE")
 *                 #self.line.optima.minormax.push_back(1.0)
 *             elif self.current_token.kind=="MAXIMIZE":             # <<<<<<<<<<<<<<
 *                 ismin=False
 *                 self.eat("MAXIMIZE")
 */
    }
    __pyx_L4:;

    /* "atpy/core/parser/parser.pyx":484
 *         node=self.expr()
 *         name = "".join(self.term_names).encode("utf8")
 *         if self.current_token.kind==",":             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             if self.current_token.kind=="MINIMIZE":
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":495
 *                 #self.line.optima.minormax.push_back(-1.0)
 *         else:
 *             ismin=True             # <<<<<<<<<<<<<<
 *             #self.line.optima.minormax.push_back(1.0)
 *         self.line.optima.append(name, node,ismin )
 */
  /*else*/ {
    __pyx_v_ismin = 1;
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":497
 *             ismin=True
 *             #self.line.optima.minormax.push_back(1.0)
 *         self.line.optima.append(name, node,ismin )             # <<<<<<<<<<<<<<
 *         for value in self.term_names:
 *             if value in chromatic_terms:
 */
  try {
    __pyx_v_self->line->optima.append(__pyx_v_name, __pyx_v_node, __pyx_v_ismin);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 497, __pyx_L1_error)
  }

  /* "atpy/core/parser/parser.pyx":498
 *             #self.line.optima.minormax.push_back(1.0)
 *         self.line.optima.append(name, node,ismin )
 *         for value in self.term_names:             # <<<<<<<<<<<<<<
 *             if value in chromatic_terms:
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 */
  if (unlikely(__pyx_v_self->term_names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 498, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->term_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 498, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "atpy/core/parser/parser.pyx":499
 *         self.line.optima.append(name, node,ismin )
 *         for value in self.term_names:
 *             if value in chromatic_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_chromatic_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 499, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "atpy/core/parser/parser.pyx":500
 *         for value in self.term_names:
 *             if value in chromatic_terms:
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in driving_terms:
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 */
      (__pyx_v_self->line->optima.time_consuming_terms[CHROMATIC_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":499
 *         self.line.optima.append(name, node,ismin )
 *         for value in self.term_names:
 *             if value in chromatic_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":501
 *             if value in chromatic_terms:
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_driving_terms, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 501, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":502
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in da_tracking_terms:
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 */
      (__pyx_v_self->line->optima.time_consuming_terms[DRIVING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":501
 *             if value in chromatic_terms:
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 *             elif  value in driving_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":503
 *             elif  value in driving_terms:
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 503, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "atpy/core/parser/parser.pyx":504
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in ma_tracking_terms:
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 */
      (__pyx_v_self->line->optima.time_consuming_terms[DA_TRACKING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":503
 *             elif  value in driving_terms:
 *                 self.line.optima.time_consuming_terms[DRIVING_TERMS]=True
 *             elif  value in da_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":505
 *             elif  value in da_tracking_terms:
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":506
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 */
      (__pyx_v_self->line->optima.time_consuming_terms[MA_TRACKING_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":505
 *             elif  value in da_tracking_terms:
 *                 self.line.optima.time_consuming_terms[DA_TRACKING_TERMS]=True
 *             elif  value in ma_tracking_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":507
 *             elif  value in ma_tracking_terms:
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 507, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "atpy/core/parser/parser.pyx":508
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True             # <<<<<<<<<<<<<<
 *             elif  value in off_momentum_sum_terms:
 *                 self.line.optima.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 */
      (__pyx_v_self->line->optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":507
 *             elif  value in ma_tracking_terms:
 *                 self.line.optima.time_consuming_terms[MA_TRACKING_TERMS]=True
 *             elif  value in monitor_off_momentum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 */
      goto __pyx_L7;
    }

    /* "atpy/core/parser/parser.pyx":509
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 *         #self.line.optima.values.push_back(node)
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 509, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "atpy/core/parser/parser.pyx":510
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:
 *                 self.line.optima.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True             # <<<<<<<<<<<<<<
 *         #self.line.optima.values.push_back(node)
 *         #self.line.optima.num_optima+=1
 */
      (__pyx_v_self->line->optima.time_consuming_terms[OFF_MOMENTUM_SUM_TERMS]) = 1;

      /* "atpy/core/parser/parser.pyx":509
 *             elif  value in monitor_off_momentum_terms:
 *                 self.line.optima.time_consuming_terms[MONITOR_OFF_MOMENTUM_TERMS]=True
 *             elif  value in off_momentum_sum_terms:             # <<<<<<<<<<<<<<
 *                 self.line.optima.time_consuming_terms[ OFF_MOMENTUM_SUM_TERMS ]=True
 *         #self.line.optima.values.push_back(node)
 */
    }
    __pyx_L7:;

    /* "atpy/core/parser/parser.pyx":498
 *             #self.line.optima.minormax.push_back(1.0)
 *         self.line.optima.append(name, node,ismin )
 *         for value in self.term_names:             # <<<<<<<<<<<<<<
 *             if value in chromatic_terms:
 *                 self.line.optima.time_consuming_terms[CHROMATIC_TERMS]=True
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":470
 * 
 * 
 *     cdef void set_optimize(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.set_optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":516
 * 
 * 
 *     cdef void set_chromaticity(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

static void __pyx_f_4atpy_4core_6parser_6parser_6Parser_set_chromaticity(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *__pyx_v_token = 0;
  AST *__pyx_v_node;
  double __pyx_v_value;
  double __pyx_v_coeff;
  double __pyx_v_pos_or_neg;
  PyObject *__pyx_v_name = 0;
  std::vector<size_t>  __pyx_v_position;
  std::vector<double>  __pyx_v_factor;
  PyObject *__pyx_v_coknob_name = 0;
  std::string __pyx_v_corr_name;
  int __pyx_v_kind;
  CYTHON_UNUSED PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  AST *__pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  __Pyx_FakeReference<std::vector<CppElement *> > __pyx_t_8;
  __Pyx_FakeReference<CppElement *> __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  std::vector<size_t>  __pyx_t_13;
  std::vector<double>  __pyx_t_14;
  size_t __pyx_t_15;
  __Pyx_FakeReference<std::vector<CppElement *> > __pyx_t_16;
  __Pyx_FakeReference<CppElement *> __pyx_t_17;
  __Pyx_FakeReference<std::vector<CppElement *> > __pyx_t_18;
  __Pyx_FakeReference<CppElement *> __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *(*__pyx_t_22)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_chromaticity", 0);

  /* "atpy/core/parser/parser.pyx":519
 *         cdef:
 *             Token token
 *             AST* node=NULL             # <<<<<<<<<<<<<<
 *             double value=0,coeff=1, pos_or_neg=1
 *             bytes name
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":520
 *             Token token
 *             AST* node=NULL
 *             double value=0,coeff=1, pos_or_neg=1             # <<<<<<<<<<<<<<
 *             bytes name
 *             vector[size_t] position
 */
  __pyx_v_value = 0.0;
  __pyx_v_coeff = 1.0;
  __pyx_v_pos_or_neg = 1.0;

  /* "atpy/core/parser/parser.pyx":526
 *             str coknob_name
 *             string corr_name
 *             int kind=SEXTUPOLE             # <<<<<<<<<<<<<<
 *         self.eat("CHROM")
 *         self.eat(",")
 */
  __pyx_v_kind = SEXTUPOLE;

  /* "atpy/core/parser/parser.pyx":527
 *             string corr_name
 *             int kind=SEXTUPOLE
 *         self.eat("CHROM")             # <<<<<<<<<<<<<<
 *         self.eat(",")
 *         if self.current_token.kind=="AIM_DQX":
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_CHROM); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":528
 *             int kind=SEXTUPOLE
 *         self.eat("CHROM")
 *         self.eat(",")             # <<<<<<<<<<<<<<
 *         if self.current_token.kind=="AIM_DQX":
 *             self.eat("AIM_DQX")
 */
  ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "atpy/core/parser/parser.pyx":529
 *         self.eat("CHROM")
 *         self.eat(",")
 *         if self.current_token.kind=="AIM_DQX":             # <<<<<<<<<<<<<<
 *             self.eat("AIM_DQX")
 *             self.eat("ASSIGN" )
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_AIM_DQX, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":530
 *         self.eat(",")
 *         if self.current_token.kind=="AIM_DQX":
 *             self.eat("AIM_DQX")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN" )
 *             node=self.expr()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_AIM_DQX); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":531
 *         if self.current_token.kind=="AIM_DQX":
 *             self.eat("AIM_DQX")
 *             self.eat("ASSIGN" )             # <<<<<<<<<<<<<<
 *             node=self.expr()
 *             value=node.calc()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":532
 *             self.eat("AIM_DQX")
 *             self.eat("ASSIGN" )
 *             node=self.expr()             # <<<<<<<<<<<<<<
 *             value=node.calc()
 *             del node
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
    __pyx_v_node = __pyx_t_3;

    /* "atpy/core/parser/parser.pyx":533
 *             self.eat("ASSIGN" )
 *             node=self.expr()
 *             value=node.calc()             # <<<<<<<<<<<<<<
 *             del node
 *             node=NULL
 */
    try {
      __pyx_t_4 = __pyx_v_node->calc();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 533, __pyx_L1_error)
    }
    __pyx_v_value = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":534
 *             node=self.expr()
 *             value=node.calc()
 *             del node             # <<<<<<<<<<<<<<
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQx=value
 */
    delete __pyx_v_node;

    /* "atpy/core/parser/parser.pyx":535
 *             value=node.calc()
 *             del node
 *             node=NULL             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.aim_dQx=value
 *             self.eat(",")
 */
    __pyx_v_node = NULL;

    /* "atpy/core/parser/parser.pyx":536
 *             del node
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQx=value             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("KNOB")
 */
    __pyx_v_self->line->chrom_corrector.aim_dQx = __pyx_v_value;

    /* "atpy/core/parser/parser.pyx":537
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQx=value
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":538
 *             self.line.chrom_corrector.aim_dQx=value
 *             self.eat(",")
 *             self.eat("KNOB")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN")
 *             token=self.current_token
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_KNOB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":539
 *             self.eat(",")
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             self.eat("ID")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":540
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":541
 *             self.eat("ASSIGN")
 *             token=self.current_token
 *             self.eat("ID")             # <<<<<<<<<<<<<<
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind!=kind:
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":542
 *             token=self.current_token
 *             self.eat("ID")
 *             name =token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind!=kind:
 *                 raise TypeError(f"KNOB must be name of Sextupole element at line {token.line} column {token.column}!")
 */
    if (unlikely(__pyx_v_token->value == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 542, __pyx_L1_error)
    }
    __pyx_t_5 = PyUnicode_AsUTF8String(__pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_name = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":543
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind!=kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB must be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 */
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_token->value, __pyx_v_self->elems_name, Py_NE)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 543, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L1_error)
    try {
      __pyx_t_8 = __pyx_v_self->line->elems.at(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 543, __pyx_L1_error)
    }
    try {
      __pyx_t_9 = __pyx_t_8->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 543, __pyx_L1_error)
    }
    __pyx_t_6 = ((((CppElement *)__pyx_t_9)->kind != __pyx_v_kind) != 0);
    __pyx_t_2 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "atpy/core/parser/parser.pyx":544
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind!=kind:
 *                 raise TypeError(f"KNOB must be name of Sextupole element at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 * 
 *             self.line.chrom_corrector.corrector1=name
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e);
      __pyx_t_10 += 47;
      __Pyx_GIVEREF(__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_KNOB_must_be_name_of_Sextupole_e);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_column);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);
      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 544, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":543
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind!=kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB must be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 */
    }

    /* "atpy/core/parser/parser.pyx":546
 *                 raise TypeError(f"KNOB must be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 *             self.line.chrom_corrector.corrector1=name             # <<<<<<<<<<<<<<
 *             if self.line.chrom_corrector.iscorr1 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")
 */
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L1_error)
    __pyx_v_self->line->chrom_corrector.corrector1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

    /* "atpy/core/parser/parser.pyx":547
 * 
 *             self.line.chrom_corrector.corrector1=name
 *             if self.line.chrom_corrector.iscorr1 ==True:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr1=True
 */
    __pyx_t_2 = ((__pyx_v_self->line->chrom_corrector.iscorr1 == 1) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "atpy/core/parser/parser.pyx":548
 *             self.line.chrom_corrector.corrector1=name
 *             if self.line.chrom_corrector.iscorr1 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.iscorr1=True
 *             position=self.eids[token.value]
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Redefined_AIM_DQX_at_line);
      __pyx_t_10 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_Redefined_AIM_DQX_at_line);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Redefined_AIM_DQX_at_line);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_column);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);
      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 548, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":547
 * 
 *             self.line.chrom_corrector.corrector1=name
 *             if self.line.chrom_corrector.iscorr1 ==True:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr1=True
 */
    }

    /* "atpy/core/parser/parser.pyx":549
 *             if self.line.chrom_corrector.iscorr1 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr1=True             # <<<<<<<<<<<<<<
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]
 */
    __pyx_v_self->line->chrom_corrector.iscorr1 = 1;

    /* "atpy/core/parser/parser.pyx":550
 *                 raise SyntaxError(f"Redefined AIM_DQX at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr1=True
 *             position=self.eids[token.value]             # <<<<<<<<<<<<<<
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 550, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = __pyx_convert_vector_from_py_size_t(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_position = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

    /* "atpy/core/parser/parser.pyx":551
 *             self.line.chrom_corrector.iscorr1=True
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 551, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(1 * ((__pyx_t_10<0) ? 0:__pyx_t_10)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_10; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyList_SET_ITEM(__pyx_t_5, __pyx_temp, __pyx_int_1);
      }
    }
    __pyx_t_14 = __pyx_convert_vector_from_py_double(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_factor = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

    /* "atpy/core/parser/parser.pyx":552
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position1.push_back(self.eids[token.value][0] )
 */
    try {
      __pyx_v_self->line->chrom_corrector.position1.insert(__pyx_v_self->line->chrom_corrector.position1.end(), __pyx_v_position.begin(), __pyx_v_position.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 552, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":553
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.unique_position1.push_back(self.eids[token.value][0] )
 *             self.line.chrom_corrector.unique_coeff1.push_back(1.0)
 */
    try {
      __pyx_v_self->line->chrom_corrector.coeff1.insert(__pyx_v_self->line->chrom_corrector.coeff1.end(), __pyx_v_factor.begin(), __pyx_v_factor.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 553, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":554
 *             self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position1.push_back(self.eids[token.value][0] )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.unique_coeff1.push_back(1.0)
 * 
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 554, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_t_12); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    try {
      __pyx_v_self->line->chrom_corrector.unique_position1.push_back(__pyx_t_15);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 554, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":555
 *             self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position1.push_back(self.eids[token.value][0] )
 *             self.line.chrom_corrector.unique_coeff1.push_back(1.0)             # <<<<<<<<<<<<<<
 * 
 *         elif self.current_token.kind=="AIM_DQY":
 */
    try {
      __pyx_v_self->line->chrom_corrector.unique_coeff1.push_back(1.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 555, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":529
 *         self.eat("CHROM")
 *         self.eat(",")
 *         if self.current_token.kind=="AIM_DQX":             # <<<<<<<<<<<<<<
 *             self.eat("AIM_DQX")
 *             self.eat("ASSIGN" )
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":557
 *             self.line.chrom_corrector.unique_coeff1.push_back(1.0)
 * 
 *         elif self.current_token.kind=="AIM_DQY":             # <<<<<<<<<<<<<<
 *             self.eat("AIM_DQY")
 *             self.eat("ASSIGN" )
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_AIM_DQY, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 557, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "atpy/core/parser/parser.pyx":558
 * 
 *         elif self.current_token.kind=="AIM_DQY":
 *             self.eat("AIM_DQY")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN" )
 *             node=self.expr()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_AIM_DQY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":559
 *         elif self.current_token.kind=="AIM_DQY":
 *             self.eat("AIM_DQY")
 *             self.eat("ASSIGN" )             # <<<<<<<<<<<<<<
 *             node=self.expr()
 *             value=node.calc()
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 559, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":560
 *             self.eat("AIM_DQY")
 *             self.eat("ASSIGN" )
 *             node=self.expr()             # <<<<<<<<<<<<<<
 *             value=node.calc()
 *             del node
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L1_error)
    __pyx_v_node = __pyx_t_3;

    /* "atpy/core/parser/parser.pyx":561
 *             self.eat("ASSIGN" )
 *             node=self.expr()
 *             value=node.calc()             # <<<<<<<<<<<<<<
 *             del node
 *             node=NULL
 */
    try {
      __pyx_t_4 = __pyx_v_node->calc();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 561, __pyx_L1_error)
    }
    __pyx_v_value = __pyx_t_4;

    /* "atpy/core/parser/parser.pyx":562
 *             node=self.expr()
 *             value=node.calc()
 *             del node             # <<<<<<<<<<<<<<
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQy=value
 */
    delete __pyx_v_node;

    /* "atpy/core/parser/parser.pyx":563
 *             value=node.calc()
 *             del node
 *             node=NULL             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.aim_dQy=value
 *             self.eat(",")
 */
    __pyx_v_node = NULL;

    /* "atpy/core/parser/parser.pyx":564
 *             del node
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQy=value             # <<<<<<<<<<<<<<
 *             self.eat(",")
 *             self.eat("KNOB")
 */
    __pyx_v_self->line->chrom_corrector.aim_dQy = __pyx_v_value;

    /* "atpy/core/parser/parser.pyx":565
 *             node=NULL
 *             self.line.chrom_corrector.aim_dQy=value
 *             self.eat(",")             # <<<<<<<<<<<<<<
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":566
 *             self.line.chrom_corrector.aim_dQy=value
 *             self.eat(",")
 *             self.eat("KNOB")             # <<<<<<<<<<<<<<
 *             self.eat("ASSIGN")
 *             token=self.current_token
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_KNOB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":567
 *             self.eat(",")
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             self.eat("ID")
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ASSIGN); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":568
 *             self.eat("KNOB")
 *             self.eat("ASSIGN")
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 */
    __pyx_t_12 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_12);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "atpy/core/parser/parser.pyx":569
 *             self.eat("ASSIGN")
 *             token=self.current_token
 *             self.eat("ID")             # <<<<<<<<<<<<<<
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind != kind:
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":570
 *             token=self.current_token
 *             self.eat("ID")
 *             name =token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind != kind:
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 */
    if (unlikely(__pyx_v_token->value == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 570, __pyx_L1_error)
    }
    __pyx_t_12 = PyUnicode_AsUTF8String(__pyx_v_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_name = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "atpy/core/parser/parser.pyx":571
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind != kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_token->value, __pyx_v_self->elems_name, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_6 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L1_error)
    try {
      __pyx_t_16 = __pyx_v_self->line->elems.at(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 571, __pyx_L1_error)
    }
    try {
      __pyx_t_17 = __pyx_t_16->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 571, __pyx_L1_error)
    }
    __pyx_t_1 = ((((CppElement *)__pyx_t_17)->kind != __pyx_v_kind) != 0);
    __pyx_t_6 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (unlikely(__pyx_t_6)) {

      /* "atpy/core/parser/parser.pyx":572
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind != kind:
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 * 
 *             self.line.chrom_corrector.corrector2=name
 */
      __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      __pyx_t_10 += 49;
      __Pyx_GIVEREF(__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_column);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u__2);
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_12, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 572, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":571
 *             self.eat("ID")
 *             name =token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind != kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 */
    }

    /* "atpy/core/parser/parser.pyx":574
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 * 
 *             self.line.chrom_corrector.corrector2=name             # <<<<<<<<<<<<<<
 *             if self.line.chrom_corrector.iscorr2 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")
 */
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
    __pyx_v_self->line->chrom_corrector.corrector2 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

    /* "atpy/core/parser/parser.pyx":575
 * 
 *             self.line.chrom_corrector.corrector2=name
 *             if self.line.chrom_corrector.iscorr2 ==True:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr2=True
 */
    __pyx_t_6 = ((__pyx_v_self->line->chrom_corrector.iscorr2 == 1) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "atpy/core/parser/parser.pyx":576
 *             self.line.chrom_corrector.corrector2=name
 *             if self.line.chrom_corrector.iscorr2 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.iscorr2=True
 *             position=self.eids[token.value]
 */
      __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Redefined_AIM_DQY_at_line);
      __pyx_t_10 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_Redefined_AIM_DQY_at_line);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Redefined_AIM_DQY_at_line);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_column);
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u__2);
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_12, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 576, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":575
 * 
 *             self.line.chrom_corrector.corrector2=name
 *             if self.line.chrom_corrector.iscorr2 ==True:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr2=True
 */
    }

    /* "atpy/core/parser/parser.pyx":577
 *             if self.line.chrom_corrector.iscorr2 ==True:
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr2=True             # <<<<<<<<<<<<<<
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]
 */
    __pyx_v_self->line->chrom_corrector.iscorr2 = 1;

    /* "atpy/core/parser/parser.pyx":578
 *                 raise SyntaxError(f"Redefined AIM_DQY at line {token.line} column {token.column}!")
 *             self.line.chrom_corrector.iscorr2=True
 *             position=self.eids[token.value]             # <<<<<<<<<<<<<<
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 578, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __pyx_convert_vector_from_py_size_t(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_position = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

    /* "atpy/core/parser/parser.pyx":579
 *             self.line.chrom_corrector.iscorr2=True
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 579, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = PyObject_Length(__pyx_t_12); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyList_New(1 * ((__pyx_t_10<0) ? 0:__pyx_t_10)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_10; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyList_SET_ITEM(__pyx_t_12, __pyx_temp, __pyx_int_1);
      }
    }
    __pyx_t_14 = __pyx_convert_vector_from_py_double(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_factor = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

    /* "atpy/core/parser/parser.pyx":580
 *             position=self.eids[token.value]
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position2.push_back(self.eids[token.value][0] )
 */
    try {
      __pyx_v_self->line->chrom_corrector.position2.insert(__pyx_v_self->line->chrom_corrector.position2.end(), __pyx_v_position.begin(), __pyx_v_position.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 580, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":581
 *             factor = len(self.eids[token.value])*[1]
 *             self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.unique_position2.push_back(self.eids[token.value][0] )
 *             self.line.chrom_corrector.unique_coeff2.push_back(1.0)
 */
    try {
      __pyx_v_self->line->chrom_corrector.coeff2.insert(__pyx_v_self->line->chrom_corrector.coeff2.end(), __pyx_v_factor.begin(), __pyx_v_factor.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 581, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":582
 *             self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 *             self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position2.push_back(self.eids[token.value][0] )             # <<<<<<<<<<<<<<
 *             self.line.chrom_corrector.unique_coeff2.push_back(1.0)
 * 
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 582, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_v_self->line->chrom_corrector.unique_position2.push_back(__pyx_t_15);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 582, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":583
 *             self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *             self.line.chrom_corrector.unique_position2.push_back(self.eids[token.value][0] )
 *             self.line.chrom_corrector.unique_coeff2.push_back(1.0)             # <<<<<<<<<<<<<<
 * 
 *         elif self.current_token.kind=="ID":
 */
    try {
      __pyx_v_self->line->chrom_corrector.unique_coeff2.push_back(1.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 583, __pyx_L1_error)
    }

    /* "atpy/core/parser/parser.pyx":557
 *             self.line.chrom_corrector.unique_coeff1.push_back(1.0)
 * 
 *         elif self.current_token.kind=="AIM_DQY":             # <<<<<<<<<<<<<<
 *             self.eat("AIM_DQY")
 *             self.eat("ASSIGN" )
 */
    goto __pyx_L3;
  }

  /* "atpy/core/parser/parser.pyx":585
 *             self.line.chrom_corrector.unique_coeff2.push_back(1.0)
 * 
 *         elif self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             name=token.value.encode("utf8")
 */
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {

    /* "atpy/core/parser/parser.pyx":586
 * 
 *         elif self.current_token.kind=="ID":
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             name=token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":587
 *         elif self.current_token.kind=="ID":
 *             token=self.current_token
 *             name=token.value.encode("utf8")             # <<<<<<<<<<<<<<
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 */
    if (unlikely(__pyx_v_token->value == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 587, __pyx_L1_error)
    }
    __pyx_t_5 = PyUnicode_AsUTF8String(__pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_name = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":588
 *             token=self.current_token
 *             name=token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 *             coknob_name=token.value
 */
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_token->value, __pyx_v_self->elems_name, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 588, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
    try {
      __pyx_t_18 = __pyx_v_self->line->elems.at(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 588, __pyx_L1_error)
    }
    try {
      __pyx_t_19 = __pyx_t_18->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 588, __pyx_L1_error)
    }
    __pyx_t_2 = ((((CppElement *)__pyx_t_19)->kind != __pyx_v_kind) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L13_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "atpy/core/parser/parser.pyx":589
 *             name=token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             coknob_name=token.value
 *             self.eat("ID")
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      __pyx_t_10 += 49;
      __Pyx_GIVEREF(__pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_KNOB_should_be_name_of_Sextupole);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_column);
      __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);
      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 589, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":588
 *             token=self.current_token
 *             name=token.value.encode("utf8")
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:             # <<<<<<<<<<<<<<
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 *             coknob_name=token.value
 */
    }

    /* "atpy/core/parser/parser.pyx":590
 *             if token.value not in self.elems_name or (<CppElement*>self.line.elems.at(name).at(0)).kind !=kind:
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 *             coknob_name=token.value             # <<<<<<<<<<<<<<
 *             self.eat("ID")
 *             self.eat("DELAY")
 */
    __pyx_t_5 = __pyx_v_token->value;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_coknob_name = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "atpy/core/parser/parser.pyx":591
 *                 raise TypeError(f"KNOB should be name of Sextupole element at line {token.line} column {token.column}!")
 *             coknob_name=token.value
 *             self.eat("ID")             # <<<<<<<<<<<<<<
 *             self.eat("DELAY")
 * 
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":592
 *             coknob_name=token.value
 *             self.eat("ID")
 *             self.eat("DELAY")             # <<<<<<<<<<<<<<
 * 
 *             if self.current_token.kind in ("+","-"):
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_DELAY); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":594
 *             self.eat("DELAY")
 * 
 *             if self.current_token.kind in ("+","-"):             # <<<<<<<<<<<<<<
 *                 token=self.current_token
 *                 self.eat(self.current_token.kind)
 */
    __Pyx_INCREF(__pyx_v_self->current_token->kind);
    __pyx_t_20 = __pyx_v_self->current_token->kind;
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_kp_u__8, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 594, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_kp_u__7, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 594, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L16_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":595
 * 
 *             if self.current_token.kind in ("+","-"):
 *                 token=self.current_token             # <<<<<<<<<<<<<<
 *                 self.eat(self.current_token.kind)
 *                 pos_or_neg=float(f"{token.value}1")
 */
      __pyx_t_5 = ((PyObject *)__pyx_v_self->current_token);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_token, ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "atpy/core/parser/parser.pyx":596
 *             if self.current_token.kind in ("+","-"):
 *                 token=self.current_token
 *                 self.eat(self.current_token.kind)             # <<<<<<<<<<<<<<
 *                 pos_or_neg=float(f"{token.value}1")
 *             if self.current_token.kind=="NUMBER":
 */
      __pyx_t_5 = __pyx_v_self->current_token->kind;
      __Pyx_INCREF(__pyx_t_5);
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, ((PyObject*)__pyx_t_5)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "atpy/core/parser/parser.pyx":597
 *                 token=self.current_token
 *                 self.eat(self.current_token.kind)
 *                 pos_or_neg=float(f"{token.value}1")             # <<<<<<<<<<<<<<
 *             if self.current_token.kind=="NUMBER":
 *                 coeff=float(f"{self.current_token.value}")
 */
      __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_5, __pyx_kp_u_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_t_12); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_pos_or_neg = __pyx_t_4;

      /* "atpy/core/parser/parser.pyx":594
 *             self.eat("DELAY")
 * 
 *             if self.current_token.kind in ("+","-"):             # <<<<<<<<<<<<<<
 *                 token=self.current_token
 *                 self.eat(self.current_token.kind)
 */
    }

    /* "atpy/core/parser/parser.pyx":598
 *                 self.eat(self.current_token.kind)
 *                 pos_or_neg=float(f"{token.value}1")
 *             if self.current_token.kind=="NUMBER":             # <<<<<<<<<<<<<<
 *                 coeff=float(f"{self.current_token.value}")
 *                 self.eat("NUMBER")
 */
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_NUMBER, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 598, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "atpy/core/parser/parser.pyx":599
 *                 pos_or_neg=float(f"{token.value}1")
 *             if self.current_token.kind=="NUMBER":
 *                 coeff=float(f"{self.current_token.value}")             # <<<<<<<<<<<<<<
 *                 self.eat("NUMBER")
 *                 self.eat("*")
 */
      __pyx_t_12 = __Pyx_PyUnicode_Unicode(__pyx_v_self->current_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_t_12); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_coeff = __pyx_t_4;

      /* "atpy/core/parser/parser.pyx":600
 *             if self.current_token.kind=="NUMBER":
 *                 coeff=float(f"{self.current_token.value}")
 *                 self.eat("NUMBER")             # <<<<<<<<<<<<<<
 *                 self.eat("*")
 *             coeff=pos_or_neg*coeff
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_NUMBER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":601
 *                 coeff=float(f"{self.current_token.value}")
 *                 self.eat("NUMBER")
 *                 self.eat("*")             # <<<<<<<<<<<<<<
 *             coeff=pos_or_neg*coeff
 *             position=self.eids[coknob_name]
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_kp_u__12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 601, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":598
 *                 self.eat(self.current_token.kind)
 *                 pos_or_neg=float(f"{token.value}1")
 *             if self.current_token.kind=="NUMBER":             # <<<<<<<<<<<<<<
 *                 coeff=float(f"{self.current_token.value}")
 *                 self.eat("NUMBER")
 */
    }

    /* "atpy/core/parser/parser.pyx":602
 *                 self.eat("NUMBER")
 *                 self.eat("*")
 *             coeff=pos_or_neg*coeff             # <<<<<<<<<<<<<<
 *             position=self.eids[coknob_name]
 *             factor = [coeff for i in self.eids[coknob_name ]]
 */
    __pyx_v_coeff = (__pyx_v_pos_or_neg * __pyx_v_coeff);

    /* "atpy/core/parser/parser.pyx":603
 *                 self.eat("*")
 *             coeff=pos_or_neg*coeff
 *             position=self.eids[coknob_name]             # <<<<<<<<<<<<<<
 *             factor = [coeff for i in self.eids[coknob_name ]]
 *             token=self.current_token
 */
    if (unlikely(__pyx_v_self->eids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 603, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_coknob_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __pyx_convert_vector_from_py_size_t(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_position = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

    /* "atpy/core/parser/parser.pyx":604
 *             coeff=pos_or_neg*coeff
 *             position=self.eids[coknob_name]
 *             factor = [coeff for i in self.eids[coknob_name ]]             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             self.eat("ID")
 */
    { /* enter inner scope */
      __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 604, __pyx_L21_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (unlikely(__pyx_v_self->eids == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 604, __pyx_L21_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_coknob_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L21_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_21 = __pyx_t_5; __Pyx_INCREF(__pyx_t_21); __pyx_t_10 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_21 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 604, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_22 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_21); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 604, __pyx_L21_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_21))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_21)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_21, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 604, __pyx_L21_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_21, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_21)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_21, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 604, __pyx_L21_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_21, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_22(__pyx_t_21);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 604, __pyx_L21_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_coeff); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 604, __pyx_L21_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      goto __pyx_L24_exit_scope;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      goto __pyx_L1_error;
      __pyx_L24_exit_scope:;
    } /* exit inner scope */
    __pyx_t_14 = __pyx_convert_vector_from_py_double(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_factor = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

    /* "atpy/core/parser/parser.pyx":605
 *             position=self.eids[coknob_name]
 *             factor = [coeff for i in self.eids[coknob_name ]]
 *             token=self.current_token             # <<<<<<<<<<<<<<
 *             self.eat("ID")
 *             corr_name=token.value.encode("utf8")
 */
    __pyx_t_12 = ((PyObject *)__pyx_v_self->current_token);
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_DECREF_SET(__pyx_v_token, ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "atpy/core/parser/parser.pyx":606
 *             factor = [coeff for i in self.eids[coknob_name ]]
 *             token=self.current_token
 *             self.eat("ID")             # <<<<<<<<<<<<<<
 *             corr_name=token.value.encode("utf8")
 * 
 */
    ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":607
 *             token=self.current_token
 *             self.eat("ID")
 *             corr_name=token.value.encode("utf8")             # <<<<<<<<<<<<<<
 * 
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:
 */
    if (unlikely(__pyx_v_token->value == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 607, __pyx_L1_error)
    }
    __pyx_t_12 = PyUnicode_AsUTF8String(__pyx_v_token->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_corr_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

    /* "atpy/core/parser/parser.pyx":609
 *             corr_name=token.value.encode("utf8")
 * 
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *             if corr_name== self.line.chrom_corrector.corrector1:
 */
    if (unlikely(__pyx_v_coknob_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 609, __pyx_L1_error)
    }
    __pyx_t_12 = PyUnicode_AsUTF8String(__pyx_v_coknob_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_2 = ((((std::string)__pyx_t_7) == __pyx_v_self->line->chrom_corrector.corrector1) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L26_bool_binop_done;
    }
    if (unlikely(__pyx_v_coknob_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 609, __pyx_L1_error)
    }
    __pyx_t_12 = PyUnicode_AsUTF8String(__pyx_v_coknob_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_2 = ((((std::string)__pyx_t_7) == __pyx_v_self->line->chrom_corrector.corrector2) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L26_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "atpy/core/parser/parser.pyx":610
 * 
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 *             if corr_name== self.line.chrom_corrector.corrector1:
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 */
      __pyx_t_12 = PyTuple_New(9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Co_KNOB);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_Co_KNOB);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Co_KNOB);
      __pyx_t_21 = __Pyx_PyUnicode_Unicode(__pyx_v_coknob_name); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u_shouldn_t_be_the_same_as);
      __pyx_t_10 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_shouldn_t_be_the_same_as);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_shouldn_t_be_the_same_as);
      __pyx_t_21 = __Pyx_PyUnicode_Unicode(__pyx_v_token->value); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u_at_line_3);
      __pyx_t_10 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_at_line_3);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u_at_line_3);
      __pyx_t_21 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_12, 6, __pyx_kp_u_column);
      __pyx_t_21 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 7, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_12, 8, __pyx_kp_u__2);
      __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_12, 9, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_21); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 610, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":609
 *             corr_name=token.value.encode("utf8")
 * 
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *             if corr_name== self.line.chrom_corrector.corrector1:
 */
    }

    /* "atpy/core/parser/parser.pyx":611
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *             if corr_name== self.line.chrom_corrector.corrector1:             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 */
    __pyx_t_1 = ((__pyx_v_corr_name == __pyx_v_self->line->chrom_corrector.corrector1) != 0);
    if (__pyx_t_1) {

      /* "atpy/core/parser/parser.pyx":612
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *             if corr_name== self.line.chrom_corrector.corrector1:
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position1.push_back(self.eids[coknob_name][0] )
 */
      try {
        __pyx_v_self->line->chrom_corrector.position1.insert(__pyx_v_self->line->chrom_corrector.position1.end(), __pyx_v_position.begin(), __pyx_v_position.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 612, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":613
 *             if corr_name== self.line.chrom_corrector.corrector1:
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.unique_position1.push_back(self.eids[coknob_name][0] )
 *                 self.line.chrom_corrector.unique_coeff1.push_back(coeff )
 */
      try {
        __pyx_v_self->line->chrom_corrector.coeff1.insert(__pyx_v_self->line->chrom_corrector.coeff1.end(), __pyx_v_factor.begin(), __pyx_v_factor.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 613, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":614
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position1.push_back(self.eids[coknob_name][0] )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.unique_coeff1.push_back(coeff )
 * 
 */
      if (unlikely(__pyx_v_self->eids == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 614, __pyx_L1_error)
      }
      __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_coknob_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_21 = __Pyx_GetItemInt(__pyx_t_12, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_t_21); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      try {
        __pyx_v_self->line->chrom_corrector.unique_position1.push_back(__pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 614, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":615
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position1.push_back(self.eids[coknob_name][0] )
 *                 self.line.chrom_corrector.unique_coeff1.push_back(coeff )             # <<<<<<<<<<<<<<
 * 
 *             elif corr_name== self.line.chrom_corrector.corrector2:
 */
      try {
        __pyx_v_self->line->chrom_corrector.unique_coeff1.push_back(__pyx_v_coeff);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 615, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":611
 *             if <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector1 or <string>coknob_name.encode("utf8")== self.line.chrom_corrector.corrector2:
 *                 raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *             if corr_name== self.line.chrom_corrector.corrector1:             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.position1.insert(self.line.chrom_corrector.position1.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff1.insert(self.line.chrom_corrector.coeff1.end(),factor.begin(),factor.end() )
 */
      goto __pyx_L28;
    }

    /* "atpy/core/parser/parser.pyx":617
 *                 self.line.chrom_corrector.unique_coeff1.push_back(coeff )
 * 
 *             elif corr_name== self.line.chrom_corrector.corrector2:             # <<<<<<<<<<<<<<
 *                 #if coknob_name == token.value:
 *                     #raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 */
    __pyx_t_1 = ((__pyx_v_corr_name == __pyx_v_self->line->chrom_corrector.corrector2) != 0);
    if (likely(__pyx_t_1)) {

      /* "atpy/core/parser/parser.pyx":620
 *                 #if coknob_name == token.value:
 *                     #raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *                 self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position2.push_back(self.eids[coknob_name][0] )
 */
      try {
        __pyx_v_self->line->chrom_corrector.position2.insert(__pyx_v_self->line->chrom_corrector.position2.end(), __pyx_v_position.begin(), __pyx_v_position.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 620, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":621
 *                     #raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 *                 self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.unique_position2.push_back(self.eids[coknob_name][0] )
 *                 self.line.chrom_corrector.unique_coeff2.push_back(coeff )
 */
      try {
        __pyx_v_self->line->chrom_corrector.coeff2.insert(__pyx_v_self->line->chrom_corrector.coeff2.end(), __pyx_v_factor.begin(), __pyx_v_factor.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 621, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":622
 *                 self.line.chrom_corrector.position2.insert(self.line.chrom_corrector.position2.end(),position.begin(),position.end() )
 *                 self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position2.push_back(self.eids[coknob_name][0] )             # <<<<<<<<<<<<<<
 *                 self.line.chrom_corrector.unique_coeff2.push_back(coeff )
 *             else:
 */
      if (unlikely(__pyx_v_self->eids == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 622, __pyx_L1_error)
      }
      __pyx_t_21 = __Pyx_PyDict_GetItem(__pyx_v_self->eids, __pyx_v_coknob_name); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_21, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_size_t(__pyx_t_12); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      try {
        __pyx_v_self->line->chrom_corrector.unique_position2.push_back(__pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 622, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":623
 *                 self.line.chrom_corrector.coeff2.insert(self.line.chrom_corrector.coeff2.end(),factor.begin(),factor.end() )
 *                 self.line.chrom_corrector.unique_position2.push_back(self.eids[coknob_name][0] )
 *                 self.line.chrom_corrector.unique_coeff2.push_back(coeff )             # <<<<<<<<<<<<<<
 *             else:
 *                 raise SyntaxError(f"Co-KNOB should be bind to KNOB at  line {token.line} column {token.column}!")
 */
      try {
        __pyx_v_self->line->chrom_corrector.unique_coeff2.push_back(__pyx_v_coeff);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 623, __pyx_L1_error)
      }

      /* "atpy/core/parser/parser.pyx":617
 *                 self.line.chrom_corrector.unique_coeff1.push_back(coeff )
 * 
 *             elif corr_name== self.line.chrom_corrector.corrector2:             # <<<<<<<<<<<<<<
 *                 #if coknob_name == token.value:
 *                     #raise SyntaxError(f"Co-KNOB {coknob_name} shouldn't be the same as {token.value} at  line {token.line} column {token.column}!")
 */
      goto __pyx_L28;
    }

    /* "atpy/core/parser/parser.pyx":625
 *                 self.line.chrom_corrector.unique_coeff2.push_back(coeff )
 *             else:
 *                 raise SyntaxError(f"Co-KNOB should be bind to KNOB at  line {token.line} column {token.column}!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_12 = PyTuple_New(5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a);
      __pyx_t_10 += 40;
      __Pyx_GIVEREF(__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a);
      __pyx_t_21 = __Pyx_PyUnicode_From_int(__pyx_v_token->line, 0, ' ', 'd'); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u_column);
      __pyx_t_10 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_column);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_column);
      __pyx_t_21 = __Pyx_PyUnicode_From_int(__pyx_v_token->column, 0, ' ', 'd'); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_21);
      __pyx_t_21 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u__2);
      __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_12, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_21); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 625, __pyx_L1_error)
    }
    __pyx_L28:;

    /* "atpy/core/parser/parser.pyx":585
 *             self.line.chrom_corrector.unique_coeff2.push_back(1.0)
 * 
 *         elif self.current_token.kind=="ID":             # <<<<<<<<<<<<<<
 *             token=self.current_token
 *             name=token.value.encode("utf8")
 */
  }
  __pyx_L3:;

  /* "atpy/core/parser/parser.pyx":516
 * 
 * 
 *     cdef void set_chromaticity(self)except*:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Token token
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.set_chromaticity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_token);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_coknob_name);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_RefNannyFinishContext();
}

/* "atpy/core/parser/parser.pyx":630
 * 
 * 
 *     cdef double eval(self,str code)except*:             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef double value
 */

static double __pyx_f_4atpy_4core_6parser_6parser_6Parser_eval(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, PyObject *__pyx_v_code) {
  AST *__pyx_v_node;
  double __pyx_v_value;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  AST *__pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval", 0);

  /* "atpy/core/parser/parser.pyx":633
 *         cdef AST*   node
 *         cdef double value
 *         if not self.isdatabase:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Parser is not linked to database!')
 *         self.lexer.tokenize(code)
 */
  __pyx_t_1 = ((!(__pyx_v_self->isdatabase != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "atpy/core/parser/parser.pyx":634
 *         cdef double value
 *         if not self.isdatabase:
 *             raise RuntimeError('Parser is not linked to database!')             # <<<<<<<<<<<<<<
 *         self.lexer.tokenize(code)
 *         self.current_token = self.lexer.get_current_token()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 634, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":633
 *         cdef AST*   node
 *         cdef double value
 *         if not self.isdatabase:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Parser is not linked to database!')
 *         self.lexer.tokenize(code)
 */
  }

  /* "atpy/core/parser/parser.pyx":635
 *         if not self.isdatabase:
 *             raise RuntimeError('Parser is not linked to database!')
 *         self.lexer.tokenize(code)             # <<<<<<<<<<<<<<
 *         self.current_token = self.lexer.get_current_token()
 *         node =self.expr()
 */
  (void)(((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->tokenize(__pyx_v_self->lexer, __pyx_v_code));

  /* "atpy/core/parser/parser.pyx":636
 *             raise RuntimeError('Parser is not linked to database!')
 *         self.lexer.tokenize(code)
 *         self.current_token = self.lexer.get_current_token()             # <<<<<<<<<<<<<<
 *         node =self.expr()
 *         value=node.calc()
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->get_current_token(__pyx_v_self->lexer)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->current_token);
  __Pyx_DECREF((PyObject *)__pyx_v_self->current_token);
  __pyx_v_self->current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":637
 *         self.lexer.tokenize(code)
 *         self.current_token = self.lexer.get_current_token()
 *         node =self.expr()             # <<<<<<<<<<<<<<
 *         value=node.calc()
 *         del node
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
  __pyx_v_node = __pyx_t_3;

  /* "atpy/core/parser/parser.pyx":638
 *         self.current_token = self.lexer.get_current_token()
 *         node =self.expr()
 *         value=node.calc()             # <<<<<<<<<<<<<<
 *         del node
 *         node=NULL
 */
  try {
    __pyx_t_4 = __pyx_v_node->calc();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 638, __pyx_L1_error)
  }
  __pyx_v_value = __pyx_t_4;

  /* "atpy/core/parser/parser.pyx":639
 *         node =self.expr()
 *         value=node.calc()
 *         del node             # <<<<<<<<<<<<<<
 *         node=NULL
 *         return value
 */
  delete __pyx_v_node;

  /* "atpy/core/parser/parser.pyx":640
 *         value=node.calc()
 *         del node
 *         node=NULL             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
  __pyx_v_node = NULL;

  /* "atpy/core/parser/parser.pyx":641
 *         del node
 *         node=NULL
 *         return value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  /* "atpy/core/parser/parser.pyx":630
 * 
 * 
 *     cdef double eval(self,str code)except*:             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef double value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.eval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pyx":645
 * 
 * 
 *     def parse(self):             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef bytes name
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5parse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4atpy_4core_6parser_6parser_6Parser_5parse = {"parse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5parse, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5parse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("parse", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "parse", 0))) return NULL;
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_4parse(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_4parse(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  AST *__pyx_v_node;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_values = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  AST *__pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::set<size_t>  __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse", 0);

  /* "atpy/core/parser/parser.pyx":648
 *         cdef AST*   node
 *         cdef bytes name
 *         value=None             # <<<<<<<<<<<<<<
 *         values=[]
 *         # print("Parser.parse:0")
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value = Py_None;

  /* "atpy/core/parser/parser.pyx":649
 *         cdef bytes name
 *         value=None
 *         values=[]             # <<<<<<<<<<<<<<
 *         # print("Parser.parse:0")
 *         if not self.isdatabase:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":651
 *         values=[]
 *         # print("Parser.parse:0")
 *         if not self.isdatabase:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Parser is not linked to database!')
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->isdatabase != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "atpy/core/parser/parser.pyx":652
 *         # print("Parser.parse:0")
 *         if not self.isdatabase:
 *             raise RuntimeError('Parser is not linked to database!')             # <<<<<<<<<<<<<<
 * 
 *         # self.lexer.tokenize(code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 652, __pyx_L1_error)

    /* "atpy/core/parser/parser.pyx":651
 *         values=[]
 *         # print("Parser.parse:0")
 *         if not self.isdatabase:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Parser is not linked to database!')
 * 
 */
  }

  /* "atpy/core/parser/parser.pyx":658
 * 
 *         # print("Parser.parse:1")
 *         self.current_token = self.lexer.get_current_token()             # <<<<<<<<<<<<<<
 *         # node = self.expr()
 *         # print("Parser.parse:2")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->get_current_token(__pyx_v_self->lexer)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->current_token);
  __Pyx_DECREF((PyObject *)__pyx_v_self->current_token);
  __pyx_v_self->current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/core/parser/parser.pyx":661
 *         # node = self.expr()
 *         # print("Parser.parse:2")
 *         while self.current_token.kind != "EOF":             # <<<<<<<<<<<<<<
 *             # print(self.current_token.kind,":",self.current_token.value)
 *             # try:
 */
  while (1) {
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_EOF, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 661, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) break;

    /* "atpy/core/parser/parser.pyx":664
 *             # print(self.current_token.kind,":",self.current_token.value)
 *             # try:
 *             self.term_names=[]             # <<<<<<<<<<<<<<
 *             if self.current_token.kind =="ID" and self.lexer.check_next_token() in ("DELAY","ASSIGN"):
 *                 self.set_Identity()
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->term_names);
    __Pyx_DECREF(__pyx_v_self->term_names);
    __pyx_v_self->term_names = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "atpy/core/parser/parser.pyx":665
 *             # try:
 *             self.term_names=[]
 *             if self.current_token.kind =="ID" and self.lexer.check_next_token() in ("DELAY","ASSIGN"):             # <<<<<<<<<<<<<<
 *                 self.set_Identity()
 *                 self.eat("END")
 */
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_ID, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer *)__pyx_v_self->lexer->__pyx_vtab)->check_next_token(__pyx_v_self->lexer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_DELAY, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_ASSIGN, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_4 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":666
 *             self.term_names=[]
 *             if self.current_token.kind =="ID" and self.lexer.check_next_token() in ("DELAY","ASSIGN"):
 *                 self.set_Identity()             # <<<<<<<<<<<<<<
 *                 self.eat("END")
 *             elif self.current_token.kind =="VAR":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->set_Identity(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":667
 *             if self.current_token.kind =="ID" and self.lexer.check_next_token() in ("DELAY","ASSIGN"):
 *                 self.set_Identity()
 *                 self.eat("END")             # <<<<<<<<<<<<<<
 *             elif self.current_token.kind =="VAR":
 *                 self.set_variable()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":665
 *             # try:
 *             self.term_names=[]
 *             if self.current_token.kind =="ID" and self.lexer.check_next_token() in ("DELAY","ASSIGN"):             # <<<<<<<<<<<<<<
 *                 self.set_Identity()
 *                 self.eat("END")
 */
      goto __pyx_L6;
    }

    /* "atpy/core/parser/parser.pyx":668
 *                 self.set_Identity()
 *                 self.eat("END")
 *             elif self.current_token.kind =="VAR":             # <<<<<<<<<<<<<<
 *                 self.set_variable()
 *                 self.eat("END")
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_VAR, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 668, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":669
 *                 self.eat("END")
 *             elif self.current_token.kind =="VAR":
 *                 self.set_variable()             # <<<<<<<<<<<<<<
 *                 self.eat("END")
 *             elif self.current_token.kind =="CONSTRAINT":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->set_variable(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":670
 *             elif self.current_token.kind =="VAR":
 *                 self.set_variable()
 *                 self.eat("END")             # <<<<<<<<<<<<<<
 *             elif self.current_token.kind =="CONSTRAINT":
 *                 self.set_constraint()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":668
 *                 self.set_Identity()
 *                 self.eat("END")
 *             elif self.current_token.kind =="VAR":             # <<<<<<<<<<<<<<
 *                 self.set_variable()
 *                 self.eat("END")
 */
      goto __pyx_L6;
    }

    /* "atpy/core/parser/parser.pyx":671
 *                 self.set_variable()
 *                 self.eat("END")
 *             elif self.current_token.kind =="CONSTRAINT":             # <<<<<<<<<<<<<<
 *                 self.set_constraint()
 *                 self.eat("END")
 */
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_CONSTRAINT, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 671, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":672
 *                 self.eat("END")
 *             elif self.current_token.kind =="CONSTRAINT":
 *                 self.set_constraint()             # <<<<<<<<<<<<<<
 *                 self.eat("END")
 *             elif self.current_token.kind =="OPTIMIZE":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->set_constraint(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":673
 *             elif self.current_token.kind =="CONSTRAINT":
 *                 self.set_constraint()
 *                 self.eat("END")             # <<<<<<<<<<<<<<
 *             elif self.current_token.kind =="OPTIMIZE":
 *                 self.set_optimize()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":671
 *                 self.set_variable()
 *                 self.eat("END")
 *             elif self.current_token.kind =="CONSTRAINT":             # <<<<<<<<<<<<<<
 *                 self.set_constraint()
 *                 self.eat("END")
 */
      goto __pyx_L6;
    }

    /* "atpy/core/parser/parser.pyx":674
 *                 self.set_constraint()
 *                 self.eat("END")
 *             elif self.current_token.kind =="OPTIMIZE":             # <<<<<<<<<<<<<<
 *                 self.set_optimize()
 *                 self.eat("END")
 */
    __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_OPTIMIZE, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 674, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "atpy/core/parser/parser.pyx":675
 *                 self.eat("END")
 *             elif self.current_token.kind =="OPTIMIZE":
 *                 self.set_optimize()             # <<<<<<<<<<<<<<
 *                 self.eat("END")
 *             elif self.current_token.kind =="CHROM":
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->set_optimize(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 675, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":676
 *             elif self.current_token.kind =="OPTIMIZE":
 *                 self.set_optimize()
 *                 self.eat("END")             # <<<<<<<<<<<<<<
 *             elif self.current_token.kind =="CHROM":
 *                 self.set_chromaticity()
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":674
 *                 self.set_constraint()
 *                 self.eat("END")
 *             elif self.current_token.kind =="OPTIMIZE":             # <<<<<<<<<<<<<<
 *                 self.set_optimize()
 *                 self.eat("END")
 */
      goto __pyx_L6;
    }

    /* "atpy/core/parser/parser.pyx":677
 *                 self.set_optimize()
 *                 self.eat("END")
 *             elif self.current_token.kind =="CHROM":             # <<<<<<<<<<<<<<
 *                 self.set_chromaticity()
 *                 self.eat("END")
 */
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_CHROM, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 677, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "atpy/core/parser/parser.pyx":678
 *                 self.eat("END")
 *             elif self.current_token.kind =="CHROM":
 *                 self.set_chromaticity()             # <<<<<<<<<<<<<<
 *                 self.eat("END")
 *             else:
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->set_chromaticity(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":679
 *             elif self.current_token.kind =="CHROM":
 *                 self.set_chromaticity()
 *                 self.eat("END")             # <<<<<<<<<<<<<<
 *             else:
 *                 # raise SyntaxError(f"Unknown syntax at line {self.current_token.line} column {self.current_token.column}!")
 */
      ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":677
 *                 self.set_optimize()
 *                 self.eat("END")
 *             elif self.current_token.kind =="CHROM":             # <<<<<<<<<<<<<<
 *                 self.set_chromaticity()
 *                 self.eat("END")
 */
      goto __pyx_L6;
    }

    /* "atpy/core/parser/parser.pyx":682
 *             else:
 *                 # raise SyntaxError(f"Unknown syntax at line {self.current_token.line} column {self.current_token.column}!")
 *                 node=self.expr()             # <<<<<<<<<<<<<<
 *                 value=node.calc()
 *                 values.append(value )
 */
    /*else*/ {
      __pyx_t_6 = ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->expr(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)
      __pyx_v_node = __pyx_t_6;

      /* "atpy/core/parser/parser.pyx":683
 *                 # raise SyntaxError(f"Unknown syntax at line {self.current_token.line} column {self.current_token.column}!")
 *                 node=self.expr()
 *                 value=node.calc()             # <<<<<<<<<<<<<<
 *                 values.append(value )
 *                 del node
 */
      try {
        __pyx_t_7 = __pyx_v_node->calc();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 683, __pyx_L1_error)
      }
      __pyx_t_1 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "atpy/core/parser/parser.pyx":684
 *                 node=self.expr()
 *                 value=node.calc()
 *                 values.append(value )             # <<<<<<<<<<<<<<
 *                 del node
 *                 if(self.current_token.kind=="END"):
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_values, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 684, __pyx_L1_error)

      /* "atpy/core/parser/parser.pyx":685
 *                 value=node.calc()
 *                 values.append(value )
 *                 del node             # <<<<<<<<<<<<<<
 *                 if(self.current_token.kind=="END"):
 *                     self.eat("END")
 */
      delete __pyx_v_node;

      /* "atpy/core/parser/parser.pyx":686
 *                 values.append(value )
 *                 del node
 *                 if(self.current_token.kind=="END"):             # <<<<<<<<<<<<<<
 *                     self.eat("END")
 *         if self.ordered_var_positions!=[]:
 */
      __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_self->current_token->kind, __pyx_n_u_END, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 686, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "atpy/core/parser/parser.pyx":687
 *                 del node
 *                 if(self.current_token.kind=="END"):
 *                     self.eat("END")             # <<<<<<<<<<<<<<
 *         if self.ordered_var_positions!=[]:
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))
 */
        ((struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_n_u_END); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)

        /* "atpy/core/parser/parser.pyx":686
 *                 values.append(value )
 *                 del node
 *                 if(self.current_token.kind=="END"):             # <<<<<<<<<<<<<<
 *                     self.eat("END")
 *         if self.ordered_var_positions!=[]:
 */
      }
    }
    __pyx_L6:;
  }

  /* "atpy/core/parser/parser.pyx":688
 *                 if(self.current_token.kind=="END"):
 *                     self.eat("END")
 *         if self.ordered_var_positions!=[]:             # <<<<<<<<<<<<<<
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))
 *             #print(self.line.ordered_changed_position)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_RichCompare(__pyx_v_self->ordered_var_positions, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":689
 *                     self.eat("END")
 *         if self.ordered_var_positions!=[]:
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))             # <<<<<<<<<<<<<<
 *             #print(self.line.ordered_changed_position)
 *         if len(values)>1:
 */
    __pyx_t_9 = PySet_New(__pyx_v_self->ordered_var_positions); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = PySequence_List(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __pyx_convert_set_from_py_size_t(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->line->ordered_changed_position = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10);

    /* "atpy/core/parser/parser.pyx":688
 *                 if(self.current_token.kind=="END"):
 *                     self.eat("END")
 *         if self.ordered_var_positions!=[]:             # <<<<<<<<<<<<<<
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))
 *             #print(self.line.ordered_changed_position)
 */
  }

  /* "atpy/core/parser/parser.pyx":691
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))
 *             #print(self.line.ordered_changed_position)
 *         if len(values)>1:             # <<<<<<<<<<<<<<
 *             return values
 *         else:
 */
  __pyx_t_11 = PyList_GET_SIZE(__pyx_v_values); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_11 > 1) != 0);
  if (__pyx_t_2) {

    /* "atpy/core/parser/parser.pyx":692
 *             #print(self.line.ordered_changed_position)
 *         if len(values)>1:
 *             return values             # <<<<<<<<<<<<<<
 *         else:
 *             return value
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_values);
    __pyx_r = __pyx_v_values;
    goto __pyx_L0;

    /* "atpy/core/parser/parser.pyx":691
 *             self.line.ordered_changed_position=list(set(self.ordered_var_positions))
 *             #print(self.line.ordered_changed_position)
 *         if len(values)>1:             # <<<<<<<<<<<<<<
 *             return values
 *         else:
 */
  }

  /* "atpy/core/parser/parser.pyx":694
 *             return values
 *         else:
 *             return value             # <<<<<<<<<<<<<<
 * 
 *         # self.eat("EOF")
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_value);
    __pyx_r = __pyx_v_value;
    goto __pyx_L0;
  }

  /* "atpy/core/parser/parser.pyx":645
 * 
 * 
 *     def parse(self):             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef bytes name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":20
 *     cdef:
 *         CppBeamLine* line
 *         readonly Lexer       lexer             # <<<<<<<<<<<<<<
 *         readonly Token       current_token
 *         readonly  list elems_name
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5lexer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5lexer_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_5lexer___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_5lexer___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->lexer);
  __pyx_r = ((PyObject *)__pyx_v_self->lexer);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":21
 *         CppBeamLine* line
 *         readonly Lexer       lexer
 *         readonly Token       current_token             # <<<<<<<<<<<<<<
 *         readonly  list elems_name
 *         readonly  dict eids
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_13current_token_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_13current_token_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_13current_token___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_13current_token___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->current_token);
  __pyx_r = ((PyObject *)__pyx_v_self->current_token);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":22
 *         readonly Lexer       lexer
 *         readonly Token       current_token
 *         readonly  list elems_name             # <<<<<<<<<<<<<<
 *         readonly  dict eids
 *         readonly  list id_table
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10elems_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10elems_name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_10elems_name___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10elems_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->elems_name);
  __pyx_r = __pyx_v_self->elems_name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":23
 *         readonly Token       current_token
 *         readonly  list elems_name
 *         readonly  dict eids             # <<<<<<<<<<<<<<
 *         readonly  list id_table
 *         readonly  bint isdatabase
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_4eids_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_4eids_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_4eids___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_4eids___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->eids);
  __pyx_r = __pyx_v_self->eids;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":24
 *         readonly  list elems_name
 *         readonly  dict eids
 *         readonly  list id_table             # <<<<<<<<<<<<<<
 *         readonly  bint isdatabase
 *         readonly  list vars_name
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_8id_table_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_8id_table_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_8id_table___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_8id_table___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->id_table);
  __pyx_r = __pyx_v_self->id_table;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":25
 *         readonly  dict eids
 *         readonly  list id_table
 *         readonly  bint isdatabase             # <<<<<<<<<<<<<<
 *         readonly  list vars_name
 *         readonly  list vars_elem_name
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10isdatabase_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10isdatabase_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_10isdatabase___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10isdatabase___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->isdatabase); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.isdatabase.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":26
 *         readonly  list id_table
 *         readonly  bint isdatabase
 *         readonly  list vars_name             # <<<<<<<<<<<<<<
 *         readonly  list vars_elem_name
 *         readonly  list tokens
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9vars_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9vars_name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_9vars_name___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_9vars_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->vars_name);
  __pyx_r = __pyx_v_self->vars_name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":27
 *         readonly  bint isdatabase
 *         readonly  list vars_name
 *         readonly  list vars_elem_name             # <<<<<<<<<<<<<<
 *         readonly  list tokens
 *         readonly  list codes
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->vars_elem_name);
  __pyx_r = __pyx_v_self->vars_elem_name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":28
 *         readonly  list vars_name
 *         readonly  list vars_elem_name
 *         readonly  list tokens             # <<<<<<<<<<<<<<
 *         readonly  list codes
 *         readonly  list term_names
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_6tokens_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_6tokens_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_6tokens___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_6tokens___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tokens);
  __pyx_r = __pyx_v_self->tokens;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":29
 *         readonly  list vars_elem_name
 *         readonly  list tokens
 *         readonly  list codes             # <<<<<<<<<<<<<<
 *         readonly  list term_names
 *         readonly  list ordered_var_positions
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5codes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5codes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_5codes___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_5codes___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->codes);
  __pyx_r = __pyx_v_self->codes;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":30
 *         readonly  list tokens
 *         readonly  list codes
 *         readonly  list term_names             # <<<<<<<<<<<<<<
 *         readonly  list ordered_var_positions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10term_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_10term_names_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_10term_names___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_10term_names___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->term_names);
  __pyx_r = __pyx_v_self->term_names;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/core/parser/parser.pxd":31
 *         readonly  list codes
 *         readonly  list term_names
 *         readonly  list ordered_var_positions             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions___get__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions___get__(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ordered_var_positions);
  __pyx_r = __pyx_v_self->ordered_var_positions;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_6__reduce_cython__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4atpy_4core_6parser_6parser_6Parser_8__setstate_cython__(((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_4core_6parser_6parser_6Parser_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("atpy.core.parser.parser.Parser.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":248
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":254
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":260
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":268
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":275
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":281
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":290
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":793
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":795
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":970
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":971
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":972
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":970
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":974
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":975
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":976
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":977
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":976
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":978
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":974
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":982
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":984
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 984, __pyx_L3_error)

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":985
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 985, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":986
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 986, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 986, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":982
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":988
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":990
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 990, __pyx_L3_error)

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":991
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 991, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":992
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 992, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 992, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":988
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":994
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":996
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 996, __pyx_L3_error)

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":997
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 997, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":998
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 998, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 998, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":994
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1001
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1013
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1001
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1016
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1028
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1016
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1031
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1038
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1031
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1045
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1048
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1052
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":1048
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &__pyx_v_v) {
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 * 
 */
  __pyx_t_1 = ((__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(<Py_ssize_t> v.size())
 */
    PyErr_NoMemory(); __PYX_ERR(2, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 * 
 */
  }

  /* "vector.to_py":70
 *         raise MemoryError()
 * 
 *     o = PyList_New(<Py_ssize_t> v.size())             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(((Py_ssize_t)__pyx_v_v.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":75
 *     cdef object item
 * 
 *     for i in range(v.size()):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":76
 * 
 *     for i in range(v.size()):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":77
 *     for i in range(v.size()):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":78
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":80
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *__pyx_v_o) {
  std::vector<size_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<size_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_size_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((size_t)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((double)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.from_py":144
 * 
 * @cname("__pyx_convert_set_from_py_size_t")
 * cdef set[X] __pyx_convert_set_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

static std::set<size_t>  __pyx_convert_set_from_py_size_t(PyObject *__pyx_v_o) {
  std::set<size_t>  __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::set<size_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_from_py_size_t", 0);

  /* "set.from_py":146
 * cdef set[X] __pyx_convert_set_from_py_size_t(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 146, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 146, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(2, 146, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 146, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "set.from_py":147
 *     cdef set[X] s
 *     for item in o:
 *         s.insert(<X>item)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 147, __pyx_L1_error)
    try {
      __pyx_v_s.insert(((size_t)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 147, __pyx_L1_error)
    }

    /* "set.from_py":146
 * cdef set[X] __pyx_convert_set_from_py_size_t(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":148
 *     for item in o:
 *         s.insert(<X>item)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "set.from_py":144
 * 
 * @cname("__pyx_convert_set_from_py_size_t")
 * cdef set[X] __pyx_convert_set_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("set.from_py.__pyx_convert_set_from_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4atpy_4core_6parser_6parser_Parser __pyx_vtable_4atpy_4core_6parser_6parser_Parser;

static PyObject *__pyx_tp_new_4atpy_4core_6parser_6parser_Parser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)o);
  p->__pyx_vtab = __pyx_vtabptr_4atpy_4core_6parser_6parser_Parser;
  p->lexer = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *)Py_None); Py_INCREF(Py_None);
  p->current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)Py_None); Py_INCREF(Py_None);
  p->elems_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->eids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->id_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->vars_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->vars_elem_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tokens = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->codes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->term_names = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ordered_var_positions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4atpy_4core_6parser_6parser_6Parser_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4atpy_4core_6parser_6parser_Parser(PyObject *o) {
  struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *p = (struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4atpy_4core_6parser_6parser_Parser) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4atpy_4core_6parser_6parser_6Parser_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->lexer);
  Py_CLEAR(p->current_token);
  Py_CLEAR(p->elems_name);
  Py_CLEAR(p->eids);
  Py_CLEAR(p->id_table);
  Py_CLEAR(p->vars_name);
  Py_CLEAR(p->vars_elem_name);
  Py_CLEAR(p->tokens);
  Py_CLEAR(p->codes);
  Py_CLEAR(p->term_names);
  Py_CLEAR(p->ordered_var_positions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4atpy_4core_6parser_6parser_Parser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *p = (struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)o;
  if (p->lexer) {
    e = (*v)(((PyObject *)p->lexer), a); if (e) return e;
  }
  if (p->current_token) {
    e = (*v)(((PyObject *)p->current_token), a); if (e) return e;
  }
  if (p->elems_name) {
    e = (*v)(p->elems_name, a); if (e) return e;
  }
  if (p->eids) {
    e = (*v)(p->eids, a); if (e) return e;
  }
  if (p->id_table) {
    e = (*v)(p->id_table, a); if (e) return e;
  }
  if (p->vars_name) {
    e = (*v)(p->vars_name, a); if (e) return e;
  }
  if (p->vars_elem_name) {
    e = (*v)(p->vars_elem_name, a); if (e) return e;
  }
  if (p->tokens) {
    e = (*v)(p->tokens, a); if (e) return e;
  }
  if (p->codes) {
    e = (*v)(p->codes, a); if (e) return e;
  }
  if (p->term_names) {
    e = (*v)(p->term_names, a); if (e) return e;
  }
  if (p->ordered_var_positions) {
    e = (*v)(p->ordered_var_positions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4atpy_4core_6parser_6parser_Parser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *p = (struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *)o;
  tmp = ((PyObject*)p->lexer);
  p->lexer = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->current_token);
  p->current_token = ((struct __pyx_obj_4atpy_4core_6parser_5lexer_Token *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->elems_name);
  p->elems_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->eids);
  p->eids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->id_table);
  p->id_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vars_name);
  p->vars_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vars_elem_name);
  p->vars_elem_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tokens);
  p->tokens = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->codes);
  p->codes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->term_names);
  p->term_names = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ordered_var_positions);
  p->ordered_var_positions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_lexer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_5lexer_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_current_token(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_13current_token_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_elems_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_10elems_name_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_eids(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_4eids_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_id_table(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_8id_table_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_isdatabase(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_10isdatabase_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_vars_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_9vars_name_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_vars_elem_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_14vars_elem_name_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_tokens(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_6tokens_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_codes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_5codes_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_term_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_10term_names_1__get__(o);
}

static PyObject *__pyx_getprop_4atpy_4core_6parser_6parser_6Parser_ordered_var_positions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4atpy_4core_6parser_6parser_6Parser_21ordered_var_positions_1__get__(o);
}

static PyMethodDef __pyx_methods_4atpy_4core_6parser_6parser_Parser[] = {
  {"parse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_5parse, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4atpy_4core_6parser_6parser_Parser[] = {
  {(char *)"lexer", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_lexer, 0, (char *)0, 0},
  {(char *)"current_token", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_current_token, 0, (char *)0, 0},
  {(char *)"elems_name", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_elems_name, 0, (char *)0, 0},
  {(char *)"eids", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_eids, 0, (char *)0, 0},
  {(char *)"id_table", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_id_table, 0, (char *)0, 0},
  {(char *)"isdatabase", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_isdatabase, 0, (char *)0, 0},
  {(char *)"vars_name", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_vars_name, 0, (char *)0, 0},
  {(char *)"vars_elem_name", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_vars_elem_name, 0, (char *)0, 0},
  {(char *)"tokens", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_tokens, 0, (char *)0, 0},
  {(char *)"codes", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_codes, 0, (char *)0, 0},
  {(char *)"term_names", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_term_names, 0, (char *)0, 0},
  {(char *)"ordered_var_positions", __pyx_getprop_4atpy_4core_6parser_6parser_6Parser_ordered_var_positions, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4atpy_4core_6parser_6parser_Parser_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4atpy_4core_6parser_6parser_Parser},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4atpy_4core_6parser_6parser_Parser},
  {Py_tp_clear, (void *)__pyx_tp_clear_4atpy_4core_6parser_6parser_Parser},
  {Py_tp_methods, (void *)__pyx_methods_4atpy_4core_6parser_6parser_Parser},
  {Py_tp_getset, (void *)__pyx_getsets_4atpy_4core_6parser_6parser_Parser},
  {Py_tp_new, (void *)__pyx_tp_new_4atpy_4core_6parser_6parser_Parser},
  {0, 0},
};
static PyType_Spec __pyx_type_4atpy_4core_6parser_6parser_Parser_spec = {
  "atpy.core.parser.parser.Parser",
  sizeof(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4atpy_4core_6parser_6parser_Parser_slots,
};
#else

static PyTypeObject __pyx_type_4atpy_4core_6parser_6parser_Parser = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.core.parser.parser.""Parser", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_4core_6parser_6parser_Parser, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_4core_6parser_6parser_Parser, /*tp_traverse*/
  __pyx_tp_clear_4atpy_4core_6parser_6parser_Parser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_4core_6parser_6parser_Parser, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4atpy_4core_6parser_6parser_Parser, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_4core_6parser_6parser_Parser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_USE_MODULE_STATE
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {0, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {0, __pyx_k_ABS, sizeof(__pyx_k_ABS), 0, 1, 0, 1},
  {0, __pyx_k_AIM_DQX, sizeof(__pyx_k_AIM_DQX), 0, 1, 0, 1},
  {0, __pyx_k_AIM_DQY, sizeof(__pyx_k_AIM_DQY), 0, 1, 0, 1},
  {0, __pyx_k_ASSIGN, sizeof(__pyx_k_ASSIGN), 0, 1, 0, 1},
  {0, __pyx_k_CHROM, sizeof(__pyx_k_CHROM), 0, 1, 0, 1},
  {0, __pyx_k_CONSTRAINT, sizeof(__pyx_k_CONSTRAINT), 0, 1, 0, 1},
  {0, __pyx_k_Co_KNOB, sizeof(__pyx_k_Co_KNOB), 0, 1, 0, 0},
  {0, __pyx_k_Co_KNOB_should_be_bind_to_KNOB_a, sizeof(__pyx_k_Co_KNOB_should_be_bind_to_KNOB_a), 0, 1, 0, 0},
  {0, __pyx_k_DA, sizeof(__pyx_k_DA), 0, 1, 0, 1},
  {0, __pyx_k_DA_SIGMA, sizeof(__pyx_k_DA_SIGMA), 0, 1, 0, 1},
  {0, __pyx_k_DELAY, sizeof(__pyx_k_DELAY), 0, 1, 0, 1},
  {0, __pyx_k_DIM, sizeof(__pyx_k_DIM), 0, 1, 0, 1},
  {0, __pyx_k_END, sizeof(__pyx_k_END), 0, 1, 0, 1},
  {0, __pyx_k_EOF, sizeof(__pyx_k_EOF), 0, 1, 0, 1},
  {0, __pyx_k_EXPR, sizeof(__pyx_k_EXPR), 0, 1, 0, 1},
  {0, __pyx_k_FUN, sizeof(__pyx_k_FUN), 0, 1, 0, 1},
  {0, __pyx_k_GLB, sizeof(__pyx_k_GLB), 0, 1, 0, 1},
  {0, __pyx_k_Global_property, sizeof(__pyx_k_Global_property), 0, 1, 0, 0},
  {0, __pyx_k_Global_property_is_not_allowed_i, sizeof(__pyx_k_Global_property_is_not_allowed_i), 0, 1, 0, 0},
  {0, __pyx_k_H00220, sizeof(__pyx_k_H00220), 0, 1, 0, 1},
  {0, __pyx_k_H00220_0, sizeof(__pyx_k_H00220_0), 0, 1, 0, 0},
  {0, __pyx_k_H00310, sizeof(__pyx_k_H00310), 0, 1, 0, 1},
  {0, __pyx_k_H00310_0, sizeof(__pyx_k_H00310_0), 0, 1, 0, 0},
  {0, __pyx_k_H00400, sizeof(__pyx_k_H00400), 0, 1, 0, 1},
  {0, __pyx_k_H00400_0, sizeof(__pyx_k_H00400_0), 0, 1, 0, 0},
  {0, __pyx_k_H11110, sizeof(__pyx_k_H11110), 0, 1, 0, 1},
  {0, __pyx_k_H11110_0, sizeof(__pyx_k_H11110_0), 0, 1, 0, 0},
  {0, __pyx_k_H11200, sizeof(__pyx_k_H11200), 0, 1, 0, 1},
  {0, __pyx_k_H11200_0, sizeof(__pyx_k_H11200_0), 0, 1, 0, 0},
  {0, __pyx_k_H20020, sizeof(__pyx_k_H20020), 0, 1, 0, 1},
  {0, __pyx_k_H20020_0, sizeof(__pyx_k_H20020_0), 0, 1, 0, 0},
  {0, __pyx_k_H20110, sizeof(__pyx_k_H20110), 0, 1, 0, 1},
  {0, __pyx_k_H20110_0, sizeof(__pyx_k_H20110_0), 0, 1, 0, 0},
  {0, __pyx_k_H20200, sizeof(__pyx_k_H20200), 0, 1, 0, 1},
  {0, __pyx_k_H20200_0, sizeof(__pyx_k_H20200_0), 0, 1, 0, 0},
  {0, __pyx_k_H22000, sizeof(__pyx_k_H22000), 0, 1, 0, 1},
  {0, __pyx_k_H22000_0, sizeof(__pyx_k_H22000_0), 0, 1, 0, 0},
  {0, __pyx_k_H31000, sizeof(__pyx_k_H31000), 0, 1, 0, 1},
  {0, __pyx_k_H31000_0, sizeof(__pyx_k_H31000_0), 0, 1, 0, 0},
  {0, __pyx_k_H40000, sizeof(__pyx_k_H40000), 0, 1, 0, 1},
  {0, __pyx_k_H40000_0, sizeof(__pyx_k_H40000_0), 0, 1, 0, 0},
  {0, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 1, 0, 1},
  {0, __pyx_k_Identity, sizeof(__pyx_k_Identity), 0, 1, 0, 0},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {0, __pyx_k_KNOB, sizeof(__pyx_k_KNOB), 0, 1, 0, 1},
  {0, __pyx_k_KNOB_must_be_name_of_Sextupole_e, sizeof(__pyx_k_KNOB_must_be_name_of_Sextupole_e), 0, 1, 0, 0},
  {0, __pyx_k_KNOB_should_be_name_of_Sextupole, sizeof(__pyx_k_KNOB_should_be_name_of_Sextupole), 0, 1, 0, 0},
  {0, __pyx_k_KWD, sizeof(__pyx_k_KWD), 0, 1, 0, 1},
  {0, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {0, __pyx_k_LOC, sizeof(__pyx_k_LOC), 0, 1, 0, 1},
  {0, __pyx_k_LOWER, sizeof(__pyx_k_LOWER), 0, 1, 0, 1},
  {0, __pyx_k_MA, sizeof(__pyx_k_MA), 0, 1, 0, 1},
  {0, __pyx_k_MAX, sizeof(__pyx_k_MAX), 0, 1, 0, 1},
  {0, __pyx_k_MAXIMIZE, sizeof(__pyx_k_MAXIMIZE), 0, 1, 0, 1},
  {0, __pyx_k_MA_SIGMA, sizeof(__pyx_k_MA_SIGMA), 0, 1, 0, 1},
  {0, __pyx_k_MIN, sizeof(__pyx_k_MIN), 0, 1, 0, 1},
  {0, __pyx_k_MINIMIZE, sizeof(__pyx_k_MINIMIZE), 0, 1, 0, 1},
  {0, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {0, __pyx_k_NAME, sizeof(__pyx_k_NAME), 0, 1, 0, 1},
  {0, __pyx_k_NUMBER, sizeof(__pyx_k_NUMBER), 0, 1, 0, 1},
  {0, __pyx_k_NameError, sizeof(__pyx_k_NameError), 0, 0, 1, 1},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_Number_args_for, sizeof(__pyx_k_Number_args_for), 0, 1, 0, 0},
  {0, __pyx_k_OPTIMIZE, sizeof(__pyx_k_OPTIMIZE), 0, 1, 0, 1},
  {0, __pyx_k_Parser, sizeof(__pyx_k_Parser), 0, 0, 1, 1},
  {0, __pyx_k_Parser___reduce_cython, sizeof(__pyx_k_Parser___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_Parser___setstate_cython, sizeof(__pyx_k_Parser___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_Parser_eat_Expect, sizeof(__pyx_k_Parser_eat_Expect), 0, 1, 0, 0},
  {0, __pyx_k_Parser_is_not_linked_to_database, sizeof(__pyx_k_Parser_is_not_linked_to_database), 0, 1, 0, 0},
  {0, __pyx_k_Parser_parse, sizeof(__pyx_k_Parser_parse), 0, 0, 1, 1},
  {0, __pyx_k_REGEX, sizeof(__pyx_k_REGEX), 0, 1, 0, 1},
  {0, __pyx_k_Redefined_AIM_DQX_at_line, sizeof(__pyx_k_Redefined_AIM_DQX_at_line), 0, 1, 0, 0},
  {0, __pyx_k_Redefined_AIM_DQY_at_line, sizeof(__pyx_k_Redefined_AIM_DQY_at_line), 0, 1, 0, 0},
  {0, __pyx_k_Redefined_Var, sizeof(__pyx_k_Redefined_Var), 0, 1, 0, 0},
  {0, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {0, __pyx_k_SQRT, sizeof(__pyx_k_SQRT), 0, 1, 0, 1},
  {0, __pyx_k_STEP, sizeof(__pyx_k_STEP), 0, 1, 0, 1},
  {0, __pyx_k_SyntaxError, sizeof(__pyx_k_SyntaxError), 0, 0, 1, 1},
  {0, __pyx_k_TWS, sizeof(__pyx_k_TWS), 0, 1, 0, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_UPPER, sizeof(__pyx_k_UPPER), 0, 1, 0, 1},
  {0, __pyx_k_Undefined_ID, sizeof(__pyx_k_Undefined_ID), 0, 1, 0, 0},
  {0, __pyx_k_Unknown_element_name, sizeof(__pyx_k_Unknown_element_name), 0, 1, 0, 0},
  {0, __pyx_k_Unknown_syntax, sizeof(__pyx_k_Unknown_syntax), 0, 1, 0, 0},
  {0, __pyx_k_VAR, sizeof(__pyx_k_VAR), 0, 1, 0, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k_Wx, sizeof(__pyx_k_Wx), 0, 1, 0, 1},
  {0, __pyx_k_Wy, sizeof(__pyx_k_Wy), 0, 1, 0, 1},
  {0, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {0, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {0, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 1},
  {0, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {0, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {0, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {0, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {0, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {0, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {0, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},
  {0, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {0, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {0, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 1},
  {0, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {0, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {0, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {0, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {0, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {0, __pyx_k_at_column, sizeof(__pyx_k_at_column), 0, 1, 0, 0},
  {0, __pyx_k_at_line, sizeof(__pyx_k_at_line), 0, 1, 0, 0},
  {0, __pyx_k_at_line_2, sizeof(__pyx_k_at_line_2), 0, 1, 0, 0},
  {0, __pyx_k_at_line_3, sizeof(__pyx_k_at_line_3), 0, 1, 0, 0},
  {0, __pyx_k_atpy_core_parser_parser, sizeof(__pyx_k_atpy_core_parser_parser), 0, 0, 1, 1},
  {0, __pyx_k_atpy_core_parser_parser_pyx, sizeof(__pyx_k_atpy_core_parser_parser_pyx), 0, 0, 1, 0},
  {0, __pyx_k_but_got, sizeof(__pyx_k_but_got), 0, 1, 0, 0},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_column, sizeof(__pyx_k_column), 0, 1, 0, 0},
  {0, __pyx_k_column_2, sizeof(__pyx_k_column_2), 0, 1, 0, 0},
  {0, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {0, __pyx_k_d2Qx, sizeof(__pyx_k_d2Qx), 0, 1, 0, 1},
  {0, __pyx_k_d2Qy, sizeof(__pyx_k_d2Qy), 0, 1, 0, 1},
  {0, __pyx_k_d3Qx, sizeof(__pyx_k_d3Qx), 0, 1, 0, 1},
  {0, __pyx_k_d3Qy, sizeof(__pyx_k_d3Qy), 0, 1, 0, 1},
  {0, __pyx_k_dQx, sizeof(__pyx_k_dQx), 0, 1, 0, 1},
  {0, __pyx_k_dQy, sizeof(__pyx_k_dQy), 0, 1, 0, 1},
  {0, __pyx_k_dalphax, sizeof(__pyx_k_dalphax), 0, 1, 0, 1},
  {0, __pyx_k_dalphaydbetay, sizeof(__pyx_k_dalphaydbetay), 0, 1, 0, 1},
  {0, __pyx_k_dbetax, sizeof(__pyx_k_dbetax), 0, 1, 0, 1},
  {0, __pyx_k_ddbetax, sizeof(__pyx_k_ddbetax), 0, 1, 0, 1},
  {0, __pyx_k_ddbetay, sizeof(__pyx_k_ddbetay), 0, 1, 0, 1},
  {0, __pyx_k_ddetax, sizeof(__pyx_k_ddetax), 0, 1, 0, 1},
  {0, __pyx_k_detapx, sizeof(__pyx_k_detapx), 0, 1, 0, 1},
  {0, __pyx_k_detax, sizeof(__pyx_k_detax), 0, 1, 0, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_dnux_dJx, sizeof(__pyx_k_dnux_dJx), 0, 1, 0, 1},
  {0, __pyx_k_dnux_dJx_0, sizeof(__pyx_k_dnux_dJx_0), 0, 1, 0, 0},
  {0, __pyx_k_dnux_dJy, sizeof(__pyx_k_dnux_dJy), 0, 1, 0, 1},
  {0, __pyx_k_dnux_dJy_0, sizeof(__pyx_k_dnux_dJy_0), 0, 1, 0, 0},
  {0, __pyx_k_dnuy_dJy, sizeof(__pyx_k_dnuy_dJy), 0, 1, 0, 1},
  {0, __pyx_k_dnuy_dJy_0, sizeof(__pyx_k_dnuy_dJy_0), 0, 1, 0, 0},
  {0, __pyx_k_eids, sizeof(__pyx_k_eids), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_fullmatch, sizeof(__pyx_k_fullmatch), 0, 0, 1, 1},
  {0, __pyx_k_function, sizeof(__pyx_k_function), 0, 1, 0, 0},
  {0, __pyx_k_function_is_not_correct, sizeof(__pyx_k_function_is_not_correct), 0, 1, 0, 0},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_high_Qy, sizeof(__pyx_k_high_Qy), 0, 1, 0, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_in_line, sizeof(__pyx_k_in_line), 0, 1, 0, 0},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_invalid_at_line, sizeof(__pyx_k_is_invalid_at_line), 0, 1, 0, 0},
  {0, __pyx_k_is_invalid_keyword_at_line, sizeof(__pyx_k_is_invalid_keyword_at_line), 0, 1, 0, 0},
  {0, __pyx_k_is_invalid_keyword_for, sizeof(__pyx_k_is_invalid_keyword_for), 0, 1, 0, 0},
  {0, __pyx_k_is_not_allowed_with_position_at, sizeof(__pyx_k_is_not_allowed_with_position_at), 0, 1, 0, 0},
  {0, __pyx_k_is_redefined_at_line, sizeof(__pyx_k_is_redefined_at_line), 0, 1, 0, 0},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {0, __pyx_k_lower_Qx, sizeof(__pyx_k_lower_Qx), 0, 1, 0, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {0, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {0, __pyx_k_out_or_range_of_element, sizeof(__pyx_k_out_or_range_of_element), 0, 1, 0, 0},
  {0, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {0, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_shouldn_t_be_the_same_as, sizeof(__pyx_k_shouldn_t_be_the_same_as), 0, 1, 0, 0},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_sum_sqr_Qx, sizeof(__pyx_k_sum_sqr_Qx), 0, 1, 0, 1},
  {0, __pyx_k_sum_sqr_Qy, sizeof(__pyx_k_sum_sqr_Qy), 0, 1, 0, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_value2enum, sizeof(__pyx_k_value2enum), 0, 0, 1, 1},
  {0, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {0, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {0, __pyx_k_which_might_cause_error_depende, sizeof(__pyx_k_which_might_cause_error_depende), 0, 1, 0, 0},
  {0, __pyx_k_with, sizeof(__pyx_k_with), 0, 1, 0, 0},
  #else
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_n_u_ABS, __pyx_k_ABS, sizeof(__pyx_k_ABS), 0, 1, 0, 1},
  {&__pyx_n_u_AIM_DQX, __pyx_k_AIM_DQX, sizeof(__pyx_k_AIM_DQX), 0, 1, 0, 1},
  {&__pyx_n_u_AIM_DQY, __pyx_k_AIM_DQY, sizeof(__pyx_k_AIM_DQY), 0, 1, 0, 1},
  {&__pyx_n_u_ASSIGN, __pyx_k_ASSIGN, sizeof(__pyx_k_ASSIGN), 0, 1, 0, 1},
  {&__pyx_n_u_CHROM, __pyx_k_CHROM, sizeof(__pyx_k_CHROM), 0, 1, 0, 1},
  {&__pyx_n_u_CONSTRAINT, __pyx_k_CONSTRAINT, sizeof(__pyx_k_CONSTRAINT), 0, 1, 0, 1},
  {&__pyx_kp_u_Co_KNOB, __pyx_k_Co_KNOB, sizeof(__pyx_k_Co_KNOB), 0, 1, 0, 0},
  {&__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a, __pyx_k_Co_KNOB_should_be_bind_to_KNOB_a, sizeof(__pyx_k_Co_KNOB_should_be_bind_to_KNOB_a), 0, 1, 0, 0},
  {&__pyx_n_u_DA, __pyx_k_DA, sizeof(__pyx_k_DA), 0, 1, 0, 1},
  {&__pyx_n_u_DA_SIGMA, __pyx_k_DA_SIGMA, sizeof(__pyx_k_DA_SIGMA), 0, 1, 0, 1},
  {&__pyx_n_u_DELAY, __pyx_k_DELAY, sizeof(__pyx_k_DELAY), 0, 1, 0, 1},
  {&__pyx_n_u_DIM, __pyx_k_DIM, sizeof(__pyx_k_DIM), 0, 1, 0, 1},
  {&__pyx_n_u_END, __pyx_k_END, sizeof(__pyx_k_END), 0, 1, 0, 1},
  {&__pyx_n_u_EOF, __pyx_k_EOF, sizeof(__pyx_k_EOF), 0, 1, 0, 1},
  {&__pyx_n_u_EXPR, __pyx_k_EXPR, sizeof(__pyx_k_EXPR), 0, 1, 0, 1},
  {&__pyx_n_u_FUN, __pyx_k_FUN, sizeof(__pyx_k_FUN), 0, 1, 0, 1},
  {&__pyx_n_u_GLB, __pyx_k_GLB, sizeof(__pyx_k_GLB), 0, 1, 0, 1},
  {&__pyx_kp_u_Global_property, __pyx_k_Global_property, sizeof(__pyx_k_Global_property), 0, 1, 0, 0},
  {&__pyx_kp_u_Global_property_is_not_allowed_i, __pyx_k_Global_property_is_not_allowed_i, sizeof(__pyx_k_Global_property_is_not_allowed_i), 0, 1, 0, 0},
  {&__pyx_n_u_H00220, __pyx_k_H00220, sizeof(__pyx_k_H00220), 0, 1, 0, 1},
  {&__pyx_kp_u_H00220_0, __pyx_k_H00220_0, sizeof(__pyx_k_H00220_0), 0, 1, 0, 0},
  {&__pyx_n_u_H00310, __pyx_k_H00310, sizeof(__pyx_k_H00310), 0, 1, 0, 1},
  {&__pyx_kp_u_H00310_0, __pyx_k_H00310_0, sizeof(__pyx_k_H00310_0), 0, 1, 0, 0},
  {&__pyx_n_u_H00400, __pyx_k_H00400, sizeof(__pyx_k_H00400), 0, 1, 0, 1},
  {&__pyx_kp_u_H00400_0, __pyx_k_H00400_0, sizeof(__pyx_k_H00400_0), 0, 1, 0, 0},
  {&__pyx_n_u_H11110, __pyx_k_H11110, sizeof(__pyx_k_H11110), 0, 1, 0, 1},
  {&__pyx_kp_u_H11110_0, __pyx_k_H11110_0, sizeof(__pyx_k_H11110_0), 0, 1, 0, 0},
  {&__pyx_n_u_H11200, __pyx_k_H11200, sizeof(__pyx_k_H11200), 0, 1, 0, 1},
  {&__pyx_kp_u_H11200_0, __pyx_k_H11200_0, sizeof(__pyx_k_H11200_0), 0, 1, 0, 0},
  {&__pyx_n_u_H20020, __pyx_k_H20020, sizeof(__pyx_k_H20020), 0, 1, 0, 1},
  {&__pyx_kp_u_H20020_0, __pyx_k_H20020_0, sizeof(__pyx_k_H20020_0), 0, 1, 0, 0},
  {&__pyx_n_u_H20110, __pyx_k_H20110, sizeof(__pyx_k_H20110), 0, 1, 0, 1},
  {&__pyx_kp_u_H20110_0, __pyx_k_H20110_0, sizeof(__pyx_k_H20110_0), 0, 1, 0, 0},
  {&__pyx_n_u_H20200, __pyx_k_H20200, sizeof(__pyx_k_H20200), 0, 1, 0, 1},
  {&__pyx_kp_u_H20200_0, __pyx_k_H20200_0, sizeof(__pyx_k_H20200_0), 0, 1, 0, 0},
  {&__pyx_n_u_H22000, __pyx_k_H22000, sizeof(__pyx_k_H22000), 0, 1, 0, 1},
  {&__pyx_kp_u_H22000_0, __pyx_k_H22000_0, sizeof(__pyx_k_H22000_0), 0, 1, 0, 0},
  {&__pyx_n_u_H31000, __pyx_k_H31000, sizeof(__pyx_k_H31000), 0, 1, 0, 1},
  {&__pyx_kp_u_H31000_0, __pyx_k_H31000_0, sizeof(__pyx_k_H31000_0), 0, 1, 0, 0},
  {&__pyx_n_u_H40000, __pyx_k_H40000, sizeof(__pyx_k_H40000), 0, 1, 0, 1},
  {&__pyx_kp_u_H40000_0, __pyx_k_H40000_0, sizeof(__pyx_k_H40000_0), 0, 1, 0, 0},
  {&__pyx_n_u_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 1, 0, 1},
  {&__pyx_kp_u_Identity, __pyx_k_Identity, sizeof(__pyx_k_Identity), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_u_KNOB, __pyx_k_KNOB, sizeof(__pyx_k_KNOB), 0, 1, 0, 1},
  {&__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e, __pyx_k_KNOB_must_be_name_of_Sextupole_e, sizeof(__pyx_k_KNOB_must_be_name_of_Sextupole_e), 0, 1, 0, 0},
  {&__pyx_kp_u_KNOB_should_be_name_of_Sextupole, __pyx_k_KNOB_should_be_name_of_Sextupole, sizeof(__pyx_k_KNOB_should_be_name_of_Sextupole), 0, 1, 0, 0},
  {&__pyx_n_u_KWD, __pyx_k_KWD, sizeof(__pyx_k_KWD), 0, 1, 0, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_u_LOC, __pyx_k_LOC, sizeof(__pyx_k_LOC), 0, 1, 0, 1},
  {&__pyx_n_u_LOWER, __pyx_k_LOWER, sizeof(__pyx_k_LOWER), 0, 1, 0, 1},
  {&__pyx_n_u_MA, __pyx_k_MA, sizeof(__pyx_k_MA), 0, 1, 0, 1},
  {&__pyx_n_u_MAX, __pyx_k_MAX, sizeof(__pyx_k_MAX), 0, 1, 0, 1},
  {&__pyx_n_u_MAXIMIZE, __pyx_k_MAXIMIZE, sizeof(__pyx_k_MAXIMIZE), 0, 1, 0, 1},
  {&__pyx_n_u_MA_SIGMA, __pyx_k_MA_SIGMA, sizeof(__pyx_k_MA_SIGMA), 0, 1, 0, 1},
  {&__pyx_n_u_MIN, __pyx_k_MIN, sizeof(__pyx_k_MIN), 0, 1, 0, 1},
  {&__pyx_n_u_MINIMIZE, __pyx_k_MINIMIZE, sizeof(__pyx_k_MINIMIZE), 0, 1, 0, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_u_NAME, __pyx_k_NAME, sizeof(__pyx_k_NAME), 0, 1, 0, 1},
  {&__pyx_n_u_NUMBER, __pyx_k_NUMBER, sizeof(__pyx_k_NUMBER), 0, 1, 0, 1},
  {&__pyx_n_s_NameError, __pyx_k_NameError, sizeof(__pyx_k_NameError), 0, 0, 1, 1},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_kp_u_Number_args_for, __pyx_k_Number_args_for, sizeof(__pyx_k_Number_args_for), 0, 1, 0, 0},
  {&__pyx_n_u_OPTIMIZE, __pyx_k_OPTIMIZE, sizeof(__pyx_k_OPTIMIZE), 0, 1, 0, 1},
  {&__pyx_n_s_Parser, __pyx_k_Parser, sizeof(__pyx_k_Parser), 0, 0, 1, 1},
  {&__pyx_n_s_Parser___reduce_cython, __pyx_k_Parser___reduce_cython, sizeof(__pyx_k_Parser___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Parser___setstate_cython, __pyx_k_Parser___setstate_cython, sizeof(__pyx_k_Parser___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_Parser_eat_Expect, __pyx_k_Parser_eat_Expect, sizeof(__pyx_k_Parser_eat_Expect), 0, 1, 0, 0},
  {&__pyx_kp_u_Parser_is_not_linked_to_database, __pyx_k_Parser_is_not_linked_to_database, sizeof(__pyx_k_Parser_is_not_linked_to_database), 0, 1, 0, 0},
  {&__pyx_n_s_Parser_parse, __pyx_k_Parser_parse, sizeof(__pyx_k_Parser_parse), 0, 0, 1, 1},
  {&__pyx_n_u_REGEX, __pyx_k_REGEX, sizeof(__pyx_k_REGEX), 0, 1, 0, 1},
  {&__pyx_kp_u_Redefined_AIM_DQX_at_line, __pyx_k_Redefined_AIM_DQX_at_line, sizeof(__pyx_k_Redefined_AIM_DQX_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_Redefined_AIM_DQY_at_line, __pyx_k_Redefined_AIM_DQY_at_line, sizeof(__pyx_k_Redefined_AIM_DQY_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_Redefined_Var, __pyx_k_Redefined_Var, sizeof(__pyx_k_Redefined_Var), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_u_SQRT, __pyx_k_SQRT, sizeof(__pyx_k_SQRT), 0, 1, 0, 1},
  {&__pyx_n_u_STEP, __pyx_k_STEP, sizeof(__pyx_k_STEP), 0, 1, 0, 1},
  {&__pyx_n_s_SyntaxError, __pyx_k_SyntaxError, sizeof(__pyx_k_SyntaxError), 0, 0, 1, 1},
  {&__pyx_n_u_TWS, __pyx_k_TWS, sizeof(__pyx_k_TWS), 0, 1, 0, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_u_UPPER, __pyx_k_UPPER, sizeof(__pyx_k_UPPER), 0, 1, 0, 1},
  {&__pyx_kp_u_Undefined_ID, __pyx_k_Undefined_ID, sizeof(__pyx_k_Undefined_ID), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_element_name, __pyx_k_Unknown_element_name, sizeof(__pyx_k_Unknown_element_name), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_syntax, __pyx_k_Unknown_syntax, sizeof(__pyx_k_Unknown_syntax), 0, 1, 0, 0},
  {&__pyx_n_u_VAR, __pyx_k_VAR, sizeof(__pyx_k_VAR), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_u_Wx, __pyx_k_Wx, sizeof(__pyx_k_Wx), 0, 1, 0, 1},
  {&__pyx_n_u_Wy, __pyx_k_Wy, sizeof(__pyx_k_Wy), 0, 1, 0, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {&__pyx_n_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 1},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 1},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_kp_u_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {&__pyx_kp_u_at_column, __pyx_k_at_column, sizeof(__pyx_k_at_column), 0, 1, 0, 0},
  {&__pyx_kp_u_at_line, __pyx_k_at_line, sizeof(__pyx_k_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_at_line_2, __pyx_k_at_line_2, sizeof(__pyx_k_at_line_2), 0, 1, 0, 0},
  {&__pyx_kp_u_at_line_3, __pyx_k_at_line_3, sizeof(__pyx_k_at_line_3), 0, 1, 0, 0},
  {&__pyx_n_s_atpy_core_parser_parser, __pyx_k_atpy_core_parser_parser, sizeof(__pyx_k_atpy_core_parser_parser), 0, 0, 1, 1},
  {&__pyx_kp_s_atpy_core_parser_parser_pyx, __pyx_k_atpy_core_parser_parser_pyx, sizeof(__pyx_k_atpy_core_parser_parser_pyx), 0, 0, 1, 0},
  {&__pyx_kp_u_but_got, __pyx_k_but_got, sizeof(__pyx_k_but_got), 0, 1, 0, 0},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_u_column, __pyx_k_column, sizeof(__pyx_k_column), 0, 1, 0, 0},
  {&__pyx_kp_u_column_2, __pyx_k_column_2, sizeof(__pyx_k_column_2), 0, 1, 0, 0},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_u_d2Qx, __pyx_k_d2Qx, sizeof(__pyx_k_d2Qx), 0, 1, 0, 1},
  {&__pyx_n_u_d2Qy, __pyx_k_d2Qy, sizeof(__pyx_k_d2Qy), 0, 1, 0, 1},
  {&__pyx_n_u_d3Qx, __pyx_k_d3Qx, sizeof(__pyx_k_d3Qx), 0, 1, 0, 1},
  {&__pyx_n_u_d3Qy, __pyx_k_d3Qy, sizeof(__pyx_k_d3Qy), 0, 1, 0, 1},
  {&__pyx_n_u_dQx, __pyx_k_dQx, sizeof(__pyx_k_dQx), 0, 1, 0, 1},
  {&__pyx_n_u_dQy, __pyx_k_dQy, sizeof(__pyx_k_dQy), 0, 1, 0, 1},
  {&__pyx_n_u_dalphax, __pyx_k_dalphax, sizeof(__pyx_k_dalphax), 0, 1, 0, 1},
  {&__pyx_n_u_dalphaydbetay, __pyx_k_dalphaydbetay, sizeof(__pyx_k_dalphaydbetay), 0, 1, 0, 1},
  {&__pyx_n_u_dbetax, __pyx_k_dbetax, sizeof(__pyx_k_dbetax), 0, 1, 0, 1},
  {&__pyx_n_u_ddbetax, __pyx_k_ddbetax, sizeof(__pyx_k_ddbetax), 0, 1, 0, 1},
  {&__pyx_n_u_ddbetay, __pyx_k_ddbetay, sizeof(__pyx_k_ddbetay), 0, 1, 0, 1},
  {&__pyx_n_u_ddetax, __pyx_k_ddetax, sizeof(__pyx_k_ddetax), 0, 1, 0, 1},
  {&__pyx_n_u_detapx, __pyx_k_detapx, sizeof(__pyx_k_detapx), 0, 1, 0, 1},
  {&__pyx_n_u_detax, __pyx_k_detax, sizeof(__pyx_k_detax), 0, 1, 0, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_u_dnux_dJx, __pyx_k_dnux_dJx, sizeof(__pyx_k_dnux_dJx), 0, 1, 0, 1},
  {&__pyx_kp_u_dnux_dJx_0, __pyx_k_dnux_dJx_0, sizeof(__pyx_k_dnux_dJx_0), 0, 1, 0, 0},
  {&__pyx_n_u_dnux_dJy, __pyx_k_dnux_dJy, sizeof(__pyx_k_dnux_dJy), 0, 1, 0, 1},
  {&__pyx_kp_u_dnux_dJy_0, __pyx_k_dnux_dJy_0, sizeof(__pyx_k_dnux_dJy_0), 0, 1, 0, 0},
  {&__pyx_n_u_dnuy_dJy, __pyx_k_dnuy_dJy, sizeof(__pyx_k_dnuy_dJy), 0, 1, 0, 1},
  {&__pyx_kp_u_dnuy_dJy_0, __pyx_k_dnuy_dJy_0, sizeof(__pyx_k_dnuy_dJy_0), 0, 1, 0, 0},
  {&__pyx_n_s_eids, __pyx_k_eids, sizeof(__pyx_k_eids), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_fullmatch, __pyx_k_fullmatch, sizeof(__pyx_k_fullmatch), 0, 0, 1, 1},
  {&__pyx_kp_u_function, __pyx_k_function, sizeof(__pyx_k_function), 0, 1, 0, 0},
  {&__pyx_kp_u_function_is_not_correct, __pyx_k_function_is_not_correct, sizeof(__pyx_k_function_is_not_correct), 0, 1, 0, 0},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_high_Qy, __pyx_k_high_Qy, sizeof(__pyx_k_high_Qy), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_u_in_line, __pyx_k_in_line, sizeof(__pyx_k_in_line), 0, 1, 0, 0},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_kp_u_is_invalid_at_line, __pyx_k_is_invalid_at_line, sizeof(__pyx_k_is_invalid_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_is_invalid_keyword_at_line, __pyx_k_is_invalid_keyword_at_line, sizeof(__pyx_k_is_invalid_keyword_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_is_invalid_keyword_for, __pyx_k_is_invalid_keyword_for, sizeof(__pyx_k_is_invalid_keyword_for), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_allowed_with_position_at, __pyx_k_is_not_allowed_with_position_at, sizeof(__pyx_k_is_not_allowed_with_position_at), 0, 1, 0, 0},
  {&__pyx_kp_u_is_redefined_at_line, __pyx_k_is_redefined_at_line, sizeof(__pyx_k_is_redefined_at_line), 0, 1, 0, 0},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_u_lower_Qx, __pyx_k_lower_Qx, sizeof(__pyx_k_lower_Qx), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_kp_u_out_or_range_of_element, __pyx_k_out_or_range_of_element, sizeof(__pyx_k_out_or_range_of_element), 0, 1, 0, 0},
  {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_shouldn_t_be_the_same_as, __pyx_k_shouldn_t_be_the_same_as, sizeof(__pyx_k_shouldn_t_be_the_same_as), 0, 1, 0, 0},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_u_sum_sqr_Qx, __pyx_k_sum_sqr_Qx, sizeof(__pyx_k_sum_sqr_Qx), 0, 1, 0, 1},
  {&__pyx_n_u_sum_sqr_Qy, __pyx_k_sum_sqr_Qy, sizeof(__pyx_k_sum_sqr_Qy), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value2enum, __pyx_k_value2enum, sizeof(__pyx_k_value2enum), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_kp_u_which_might_cause_error_depende, __pyx_k_which_might_cause_error_depende, sizeof(__pyx_k_which_might_cause_error_depende), 0, 1, 0, 0},
  {&__pyx_kp_u_with, __pyx_k_with, sizeof(__pyx_k_with), 0, 1, 0, 0},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_builtin_SyntaxError = __Pyx_GetBuiltinName(__pyx_n_s_SyntaxError); if (!__pyx_builtin_SyntaxError) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_builtin_NameError = __Pyx_GetBuiltinName(__pyx_n_s_NameError); if (!__pyx_builtin_NameError) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 986, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "atpy/core/parser/parser.pyx":634
 *         cdef double value
 *         if not self.isdatabase:
 *             raise RuntimeError('Parser is not linked to database!')             # <<<<<<<<<<<<<<
 *         self.lexer.tokenize(code)
 *         self.current_token = self.lexer.get_current_token()
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Parser_is_not_linked_to_database); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":986
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(3, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "C:/Users/LT/AppData/Roaming/Python/Python39/site-packages/numpy/__init__.cython-30.pxd":992
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(3, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "atpy/core/parser/parser.pyx":11
 * 
 * cdef:
 *     tuple chromatic_terms = ("dQx", "dQy", "d2Qx", "d2Qy", "d3Qx", "d3Qy", "detax" , "detapx", "dbetax", "dalphax","dalphay"             # <<<<<<<<<<<<<<
 *     "dbetay", "ddetax", "ddbetax",  "ddbetay","Wx","Wy")
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(16, __pyx_n_u_dQx, __pyx_n_u_dQy, __pyx_n_u_d2Qx, __pyx_n_u_d2Qy, __pyx_n_u_d3Qx, __pyx_n_u_d3Qy, __pyx_n_u_detax, __pyx_n_u_detapx, __pyx_n_u_dbetax, __pyx_n_u_dalphax, __pyx_n_u_dalphaydbetay, __pyx_n_u_ddetax, __pyx_n_u_ddbetax, __pyx_n_u_ddbetay, __pyx_n_u_Wx, __pyx_n_u_Wy); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "atpy/core/parser/parser.pyx":14
 *     "dbetay", "ddetax", "ddbetax",  "ddbetay","Wx","Wy")
 * 
 *     tuple driving_terms = ("dnux_dJx", "dnux_dJy", "dnuy_dJy",             # <<<<<<<<<<<<<<
 *         "H11110", "H22000", "H00220","H20110", "H31000", "H11200", "H00310", "H20200", "H20020", "H40000", "H00400",
 *                             "dnux_dJx@0", "dnux_dJy@0", "dnuy_dJy@0",
 */
  __pyx_tuple__23 = PyTuple_Pack(28, __pyx_n_u_dnux_dJx, __pyx_n_u_dnux_dJy, __pyx_n_u_dnuy_dJy, __pyx_n_u_H11110, __pyx_n_u_H22000, __pyx_n_u_H00220, __pyx_n_u_H20110, __pyx_n_u_H31000, __pyx_n_u_H11200, __pyx_n_u_H00310, __pyx_n_u_H20200, __pyx_n_u_H20020, __pyx_n_u_H40000, __pyx_n_u_H00400, __pyx_kp_u_dnux_dJx_0, __pyx_kp_u_dnux_dJy_0, __pyx_kp_u_dnuy_dJy_0, __pyx_kp_u_H11110_0, __pyx_kp_u_H22000_0, __pyx_kp_u_H00220_0, __pyx_kp_u_H20110_0, __pyx_kp_u_H31000_0, __pyx_kp_u_H11200_0, __pyx_kp_u_H00310_0, __pyx_kp_u_H20200_0, __pyx_kp_u_H20020_0, __pyx_kp_u_H40000_0, __pyx_kp_u_H00400_0); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "atpy/core/parser/parser.pyx":19
 *         "H11110@0", "H22000@0", "H00220@0", "H20110@0", "H31000@0", "H11200@0",
 *                             "H00310@0", "H20200@0", "H20020@0", "H40000@0", "H00400@0" )
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")             # <<<<<<<<<<<<<<
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 */
  __pyx_tuple__24 = PyTuple_Pack(4, __pyx_n_u_lower_Qx, __pyx_n_u_high_Qy, __pyx_n_u_lower_Qx, __pyx_n_u_high_Qy); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "atpy/core/parser/parser.pyx":20
 *                             "H00310@0", "H20200@0", "H20020@0", "H40000@0", "H00400@0" )
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )             # <<<<<<<<<<<<<<
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_u_sum_sqr_Qx, __pyx_n_u_sum_sqr_Qy); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "atpy/core/parser/parser.pyx":21
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")             # <<<<<<<<<<<<<<
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_u_DA, __pyx_n_u_DA_SIGMA); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "atpy/core/parser/parser.pyx":22
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")             # <<<<<<<<<<<<<<
 * 
 * cdef class Parser:  #
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_u_MA, __pyx_n_u_MA_SIGMA); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "atpy/core/parser/parser.pyx":645
 * 
 * 
 *     def parse(self):             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef bytes name
 */
  __pyx_tuple__28 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_name_2, __pyx_n_s_value, __pyx_n_s_values); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_atpy_core_parser_parser_pyx, __pyx_n_s_parse, 645, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 645, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  #if CYTHON_USE_MODULE_STATE
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_u_ABS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_u_AIM_DQX) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_u_AIM_DQY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_u_ASSIGN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_u_CHROM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_u_CONSTRAINT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_kp_u_Co_KNOB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_kp_u_Co_KNOB_should_be_bind_to_KNOB_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_u_DA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_u_DA_SIGMA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_u_DELAY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_u_DIM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_u_END) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_u_EOF) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_u_EXPR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_u_FUN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_u_GLB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_u_Global_property) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_u_Global_property_is_not_allowed_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_u_H00220) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_u_H00220_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_u_H00310) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_u_H00310_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_u_H00400) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_kp_u_H00400_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_u_H11110) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_kp_u_H11110_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_u_H11200) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_kp_u_H11200_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_u_H20020) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_kp_u_H20020_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_u_H20110) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_kp_u_H20110_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_u_H20200) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_kp_u_H20200_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_u_H22000) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_kp_u_H22000_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_u_H31000) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_kp_u_H31000_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_u_H40000) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_kp_u_H40000_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_u_ID) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_kp_u_Identity) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_IndexError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_u_KNOB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_kp_u_KNOB_must_be_name_of_Sextupole_e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_kp_u_KNOB_should_be_name_of_Sextupole) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_u_KWD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_KeyError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_u_LOC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_u_LOWER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_u_MA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_u_MAX) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_u_MAXIMIZE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_u_MA_SIGMA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_u_MIN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_u_MINIMIZE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_MemoryError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_u_NAME) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_u_NUMBER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_NameError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_kp_u_Number_args_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_u_OPTIMIZE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_Parser) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_Parser___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_Parser___setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_kp_u_Parser_eat_Expect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_kp_u_Parser_is_not_linked_to_database) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_Parser_parse) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_u_REGEX) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_kp_u_Redefined_AIM_DQX_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_kp_u_Redefined_AIM_DQY_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_kp_u_Redefined_Var) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_RuntimeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_u_SQRT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_u_STEP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_SyntaxError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_u_TWS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_u_UPPER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_u_Undefined_ID) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_u_Unknown_element_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u_Unknown_syntax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_u_VAR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_u_Wx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_u_Wy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_u__10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_kp_u__11) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_s__12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_kp_u__12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_kp_u__13) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_u__14) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_kp_u__15) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_kp_u__16) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_kp_u__17) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_kp_u__18) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_kp_u__2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_kp_u__3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s__34) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_kp_u__4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_u__5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_kp_u__6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_kp_u__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_kp_u__8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_kp_u__9) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_kp_u_at) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_kp_u_at_column) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_kp_u_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_kp_u_at_line_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_kp_u_at_line_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_atpy_core_parser_parser) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_kp_s_atpy_core_parser_parser_pyx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_kp_u_but_got) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_kp_u_column) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_kp_u_column_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_compile) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_u_d2Qx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_u_d2Qy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_u_d3Qx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_u_d3Qy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_u_dQx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_u_dQy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_u_dalphax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_u_dalphaydbetay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_u_dbetax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_u_ddbetax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_u_ddbetay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_u_ddetax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_u_detapx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_u_detax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_n_u_dnux_dJx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_kp_u_dnux_dJx_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_n_u_dnux_dJy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_kp_u_dnux_dJy_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_u_dnuy_dJy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_kp_u_dnuy_dJy_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_eids) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_fullmatch) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_kp_u_function) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_kp_u_function_is_not_correct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_u_high_Qy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_kp_u_in_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_kp_u_is_invalid_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_kp_u_is_invalid_keyword_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_kp_u_is_invalid_keyword_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_kp_u_is_not_allowed_with_position_at) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_kp_u_is_redefined_at_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_keys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_u_lower_Qx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_kp_s_no_default___reduce___due_to_non) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_node) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_kp_u_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_kp_u_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_kp_u_out_or_range_of_element) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_parse) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_pyx_capi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_re) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_kp_u_shouldn_t_be_the_same_as) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_u_sum_sqr_Qx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_u_sum_sqr_Qy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_value2enum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_values) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_warn) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_warnings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_kp_u_which_might_cause_error_depende) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_kp_u_with) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_USE_MODULE_STATE
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4atpy_4core_6parser_6parser_value2enum = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_chromatic_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_driving_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_value2enum, (void *)&__pyx_v_4atpy_4core_6parser_6parser_value2enum, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4atpy_4core_6parser_6parser_Parser = &__pyx_vtable_4atpy_4core_6parser_6parser_Parser;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser._set_database = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, CppBeamLine *))__pyx_f_4atpy_4core_6parser_6parser_6Parser__set_database;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.eat = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_eat;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.position = (int (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_position;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.parameter = (PyObject *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_parameter;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.get_bounds = (PyObject *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_get_bounds;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.get_eid = (int (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_get_eid;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.set_Identity = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_set_Identity;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.set_variable = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_set_variable;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.set_constraint = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_set_constraint;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.set_optimize = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_set_optimize;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.set_chromaticity = (void (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_set_chromaticity;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.property = (AST *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_property;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.function = (AST *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_function;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.factor = (AST *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_factor;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.term = (AST *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_term;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.expr = (AST *(*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_expr;
  __pyx_vtable_4atpy_4core_6parser_6parser_Parser.eval = (double (*)(struct __pyx_obj_4atpy_4core_6parser_6parser_Parser *, PyObject *))__pyx_f_4atpy_4core_6parser_6parser_6Parser_eval;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4atpy_4core_6parser_6parser_Parser = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4atpy_4core_6parser_6parser_Parser_spec, NULL); if (unlikely(!__pyx_ptype_4atpy_4core_6parser_6parser_Parser)) __PYX_ERR(0, 24, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4atpy_4core_6parser_6parser_Parser_spec, __pyx_ptype_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #else
  __pyx_ptype_4atpy_4core_6parser_6parser_Parser = &__pyx_type_4atpy_4core_6parser_6parser_Parser;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4atpy_4core_6parser_6parser_Parser->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4atpy_4core_6parser_6parser_Parser->tp_dictoffset && __pyx_ptype_4atpy_4core_6parser_6parser_Parser->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4atpy_4core_6parser_6parser_Parser->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_4atpy_4core_6parser_6parser_Parser, __pyx_vtabptr_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Parser, (PyObject *) __pyx_ptype_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4atpy_4core_6parser_6parser_Parser) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 202, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 225, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 812, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 814, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 816, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 818, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 820, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 822, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 824, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 826, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 828, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 830, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("atpy.core.parser.lexer"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4atpy_4core_6parser_5lexer_Token = __Pyx_ImportType(__pyx_t_1, "atpy.core.parser.lexer", "Token", sizeof(struct __pyx_obj_4atpy_4core_6parser_5lexer_Token), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4atpy_4core_6parser_5lexer_Token) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_4atpy_4core_6parser_5lexer_Lexer = __Pyx_ImportType(__pyx_t_1, "atpy.core.parser.lexer", "Lexer", sizeof(struct __pyx_obj_4atpy_4core_6parser_5lexer_Lexer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer) __PYX_ERR(5, 14, __pyx_L1_error)
  __pyx_vtabptr_4atpy_4core_6parser_5lexer_Lexer = (struct __pyx_vtabstruct_4atpy_4core_6parser_5lexer_Lexer*)__Pyx_GetVtable(__pyx_ptype_4atpy_4core_6parser_5lexer_Lexer); if (unlikely(!__pyx_vtabptr_4atpy_4core_6parser_5lexer_Lexer)) __PYX_ERR(5, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("atpy.core.interface.constants"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "KWD_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_KWD_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INDEX_KWD", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_INDEX_KWD, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "TWS_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_TWS_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INDEX_TWS", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_INDEX_TWS, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "LOC_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_LOC_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INDEX_LOC", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_INDEX_LOC, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "GLB_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_GLB_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INDEX_GLB", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_INDEX_GLB, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "ALL_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_ALL_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "ELEM_INDEX", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_ELEM_INDEX, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INDEX_ELEM", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_INDEX_ELEM, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "POSITION_DEPEND_NAMES", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_POSITION_DEPEND_NAMES, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "DEFAULT_ELEM_KARGS", (void **)&__pyx_vp_4atpy_4core_9interface_9constants_DEFAULT_ELEM_KARGS, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("atpy.core.parser.lexer"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "token_enum", (void **)&__pyx_vp_4atpy_4core_6parser_5lexer_token_enum, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "enum_token", (void **)&__pyx_vp_4atpy_4core_6parser_5lexer_enum_token, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_parser(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_parser},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "parser",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      (freefunc)__pyx_module_cleanup /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      (freefunc)__pyx_module_cleanup /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initparser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initparser(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_parser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_parser(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_parser(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'parser' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("parser", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_parser(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_atpy__core__parser__parser) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "atpy.core.parser.parser")) {
      if (unlikely((PyDict_SetItemString(modules, "atpy.core.parser.parser", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  if (unlikely((__Pyx_modinit_variable_export_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_variable_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "atpy/core/parser/parser.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * import warnings
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":2
 * import re
 * import warnings             # <<<<<<<<<<<<<<
 * 
 * value2enum={"+":ADD, "-": SUB, "*": MUL, "/":DIV, "**":POW, "%":MOD, "//":FLOOR,
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":4
 * import warnings
 * 
 * value2enum={"+":ADD, "-": SUB, "*": MUL, "/":DIV, "**":POW, "%":MOD, "//":FLOOR,             # <<<<<<<<<<<<<<
 *             "ABS":ABS, "SQRT":SQRT, "DIM":DIM, "MAX":MAX, "MIN":MIN,
 *             "NUMBER":NUMBER, "TWS":TWS, "KWD":KWD, "LOC":LOC, "GLB":GLB,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(ADD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__8, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(SUB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__7, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(MUL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__12, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(DIV); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__13, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(POW); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__9, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(MOD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__11, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(FLOOR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u__10, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "atpy/core/parser/parser.pyx":5
 * 
 * value2enum={"+":ADD, "-": SUB, "*": MUL, "/":DIV, "**":POW, "%":MOD, "//":FLOOR,
 *             "ABS":ABS, "SQRT":SQRT, "DIM":DIM, "MAX":MAX, "MIN":MIN,             # <<<<<<<<<<<<<<
 *             "NUMBER":NUMBER, "TWS":TWS, "KWD":KWD, "LOC":LOC, "GLB":GLB,
 *             "DELAY":DELAY
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(ABS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_ABS, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(SQRT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_SQRT, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(DIM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_DIM, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_MAX, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(MIN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_MIN, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "atpy/core/parser/parser.pyx":6
 * value2enum={"+":ADD, "-": SUB, "*": MUL, "/":DIV, "**":POW, "%":MOD, "//":FLOOR,
 *             "ABS":ABS, "SQRT":SQRT, "DIM":DIM, "MAX":MAX, "MIN":MIN,
 *             "NUMBER":NUMBER, "TWS":TWS, "KWD":KWD, "LOC":LOC, "GLB":GLB,             # <<<<<<<<<<<<<<
 *             "DELAY":DELAY
 *              }
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(NUMBER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_NUMBER, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(TWS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_TWS, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(KWD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_KWD, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(LOC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_LOC, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(GLB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_GLB, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "atpy/core/parser/parser.pyx":7
 *             "ABS":ABS, "SQRT":SQRT, "DIM":DIM, "MAX":MAX, "MIN":MIN,
 *             "NUMBER":NUMBER, "TWS":TWS, "KWD":KWD, "LOC":LOC, "GLB":GLB,
 *             "DELAY":DELAY             # <<<<<<<<<<<<<<
 *              }
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(DELAY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_DELAY, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_value2enum);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_value2enum, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":11
 * 
 * cdef:
 *     tuple chromatic_terms = ("dQx", "dQy", "d2Qx", "d2Qy", "d3Qx", "d3Qy", "detax" , "detapx", "dbetax", "dalphax","dalphay"             # <<<<<<<<<<<<<<
 *     "dbetay", "ddetax", "ddbetax",  "ddbetay","Wx","Wy")
 * 
 */
  __Pyx_INCREF(__pyx_tuple__22);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_chromatic_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_chromatic_terms, __pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "atpy/core/parser/parser.pyx":14
 *     "dbetay", "ddetax", "ddbetax",  "ddbetay","Wx","Wy")
 * 
 *     tuple driving_terms = ("dnux_dJx", "dnux_dJy", "dnuy_dJy",             # <<<<<<<<<<<<<<
 *         "H11110", "H22000", "H00220","H20110", "H31000", "H11200", "H00310", "H20200", "H20020", "H40000", "H00400",
 *                             "dnux_dJx@0", "dnux_dJy@0", "dnuy_dJy@0",
 */
  __Pyx_INCREF(__pyx_tuple__23);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_driving_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_driving_terms, __pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "atpy/core/parser/parser.pyx":19
 *         "H11110@0", "H22000@0", "H00220@0", "H20110@0", "H31000@0", "H11200@0",
 *                             "H00310@0", "H20200@0", "H20020@0", "H40000@0", "H00400@0" )
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")             # <<<<<<<<<<<<<<
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 */
  __Pyx_INCREF(__pyx_tuple__24);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_monitor_off_momentum_terms, __pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "atpy/core/parser/parser.pyx":20
 *                             "H00310@0", "H20200@0", "H20020@0", "H40000@0", "H00400@0" )
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )             # <<<<<<<<<<<<<<
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")
 */
  __Pyx_INCREF(__pyx_tuple__25);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_off_momentum_sum_terms, __pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "atpy/core/parser/parser.pyx":21
 *     tuple monitor_off_momentum_terms = ("lower_Qx", "high_Qy","lower_Qx", "high_Qy")
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")             # <<<<<<<<<<<<<<
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")
 * 
 */
  __Pyx_INCREF(__pyx_tuple__26);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_da_tracking_terms, __pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "atpy/core/parser/parser.pyx":22
 *     tuple off_momentum_sum_terms = ( "sum_sqr_Qx","sum_sqr_Qy" )
 *     tuple da_tracking_terms = ("DA" ,"DA_SIGMA")
 *     tuple ma_tracking_terms = ("MA" ,"MA_SIGMA")             # <<<<<<<<<<<<<<
 * 
 * cdef class Parser:  #
 */
  __Pyx_INCREF(__pyx_tuple__27);
  __Pyx_XGOTREF(__pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms);
  __Pyx_DECREF_SET(__pyx_v_4atpy_4core_6parser_6parser_ma_tracking_terms, __pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "atpy/core/parser/parser.pyx":645
 * 
 * 
 *     def parse(self):             # <<<<<<<<<<<<<<
 *         cdef AST*   node
 *         cdef bytes name
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4atpy_4core_6parser_6parser_6Parser_5parse, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Parser_parse, NULL, __pyx_n_s_atpy_core_parser_parser, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4atpy_4core_6parser_6parser_Parser->tp_dict, __pyx_n_s_parse, __pyx_t_2) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4atpy_4core_6parser_6parser_Parser);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4atpy_4core_6parser_6parser_6Parser_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Parser___reduce_cython, NULL, __pyx_n_s_atpy_core_parser_parser, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4atpy_4core_6parser_6parser_6Parser_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Parser___setstate_cython, NULL, __pyx_n_s_atpy_core_parser_parser, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "atpy/core/parser/parser.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * import warnings
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "set.from_py":144
 * 
 * @cname("__pyx_convert_set_from_py_size_t")
 * cdef set[X] __pyx_convert_set_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  if (__Pyx_RegisterCleanup()) __PYX_ERR(0, 1, __pyx_L1_error);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init atpy.core.parser.parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init atpy.core.parser.parser");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */

static CYTHON_SMALL_CODE void __Pyx_CleanupGlobals(void) {
  /* CodeObjectCache.cleanup */
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__pyx_code_cache.entries) {
      __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
      int i, count = __pyx_code_cache.count;
      __pyx_code_cache.count = 0;
      __pyx_code_cache.max_count = 0;
      __pyx_code_cache.entries = NULL;
      for (i=0; i<count; i++) {
          Py_DECREF(entries[i].code_object);
      }
      PyMem_Free(entries);
  }
  #endif

Py_CLEAR(__pyx_umethod_PyDict_Type_keys.method);
}
/* #### Code section: cleanup_module ### */
static void __pyx_module_cleanup(CYTHON_UNUSED PyObject *self) {
  __Pyx_CleanupGlobals();
  /*--- Builtin cleanup code ---*/
  Py_CLEAR(__pyx_builtin_ValueError);
  Py_CLEAR(__pyx_builtin_SyntaxError);
  Py_CLEAR(__pyx_builtin_IndexError);
  Py_CLEAR(__pyx_builtin_range);
  Py_CLEAR(__pyx_builtin_KeyError);
  Py_CLEAR(__pyx_builtin_NameError);
  Py_CLEAR(__pyx_builtin_TypeError);
  Py_CLEAR(__pyx_builtin_RuntimeError);
  /*--- Intern cleanup code ---*/
  Py_CLEAR(__pyx_empty_tuple);
  Py_CLEAR(__pyx_cython_runtime);
  Py_CLEAR(__pyx_b);
  Py_CLEAR(__pyx_d);
}
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#if _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
static CYTHON_UNUSED double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyUnicode_Substring */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(text) == -1)) return NULL;
    length = __Pyx_PyUnicode_GET_LENGTH(text);
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    if (stop <= start)
        return __Pyx_NewRef(__pyx_empty_unicode);
    if (start == 0 && stop == length)
        return __Pyx_NewRef(text);
#if CYTHON_PEP393_ENABLED
    return PyUnicode_FromKindAndData(PyUnicode_KIND(text),
        PyUnicode_1BYTE_DATA(text) + start*PyUnicode_KIND(text), stop-start);
#else
    return PyUnicode_FromUnicode(PyUnicode_AS_UNICODE(text)+start, stop-start);
#endif
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    (void) spec;
    (void) type;
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__12;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    (void) module;
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    (void) module;
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* RegisterModuleCleanup */
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject* __pyx_module_cleanup_atexit(PyObject *module, PyObject *unused) {
    CYTHON_UNUSED_VAR(unused);
    __pyx_module_cleanup(module);
    Py_INCREF(Py_None); return Py_None;
}
static int __Pyx_RegisterCleanup(void) {
    static PyMethodDef cleanup_def = {
        "__cleanup", (PyCFunction)__pyx_module_cleanup_atexit, METH_NOARGS, 0};
    PyObject *cleanup_func = 0;
    PyObject *atexit = 0;
    PyObject *reg = 0;
    PyObject *args = 0;
    PyObject *res = 0;
    int ret = -1;
    cleanup_func = PyCFunction_New(&cleanup_def, 0);
    if (!cleanup_func)
        goto bad;
    atexit = PyImport_ImportModule("atexit");
    if (!atexit)
        goto bad;
    reg = PyObject_GetAttrString(atexit, "_exithandlers");
    if (reg && PyList_Check(reg)) {
        PyObject *a, *kw;
        a = PyTuple_New(0);
        kw = PyDict_New();
        if (!a || !kw) {
            Py_XDECREF(a);
            Py_XDECREF(kw);
            goto bad;
        }
        args = PyTuple_Pack(3, cleanup_func, a, kw);
        Py_DECREF(a);
        Py_DECREF(kw);
        if (!args)
            goto bad;
        ret = PyList_Insert(reg, 0, args);
    } else {
        if (!reg)
            PyErr_Clear();
        Py_XDECREF(reg);
        reg = PyObject_GetAttrString(atexit, "register");
        if (!reg)
            goto bad;
        args = PyTuple_Pack(1, cleanup_func);
        if (!args)
            goto bad;
        res = PyObject_CallObject(reg, args);
        if (!res)
            goto bad;
        ret = 0;
    }
bad:
    Py_XDECREF(cleanup_func);
    Py_XDECREF(atexit);
    Py_XDECREF(reg);
    Py_XDECREF(args);
    Py_XDECREF(res);
    return ret;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__34));
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* VoidPtrExport */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
    cobj = PyCapsule_New(p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#if _MSV_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
