#include <iostream>
#include <unordered_map>
#include <vector>
#include <map>
#include "cppconstants.h"

#include <initializer_list>
#include <algorithm>


#include <initializer_list>
#include <vector>
#include <map>
#include <algorithm>
#include <exception>

using namespace std;

using std::vector;
using std::pair;
using std::map;
using std::initializer_list;

template<typename T,const T MaxRow, const T MaxColumn>
class KeywordsHashTable{
public:
    
    typedef T val_type;
    
    val_type sizes[MaxRow];
    uint16_t hash_table[MaxRow][MaxColumn];
    map<val_type,vector<val_type> > keys;
    
    KeywordsHashTable(initializer_list<pair<val_type,vector<val_type> >  > _args )//:size(_args.size() ),
    {
        uint16_t elem_type=0;
        
        std::fill_n( &hash_table[0][0],MaxColumn,MaxRow*MaxColumn);
        for(auto& iter:_args){
            
            keys.insert(iter);
            std::sort(keys.at(iter.first).begin(), keys.at(iter.first).end() );
            sizes[iter.first ]=iter.second.size();
            
            uint32_t cnt=0;
            for(const auto& i:keys.at(iter.first) ){
                hash_table[iter.first ][i]=cnt;
                // cout<<elem_type<<", "<<i<<": "<<hash_table[elem_type][i]<<endl;
                cnt+=1;
            }
            elem_type+=1;
        }
    }
    
    inline val_type* operator[](val_type index){
        return &hash_table[index][0];
    }
    
    
    inline val_type at(val_type row, val_type col){
        if(row>-1 && row<MaxRow && col>-1 && col< MaxColumn ){
            return hash_table[row][col];
            }
        else{
            throw "Error: Out of range at KeywordsHashTable::at!";
            return -1;
        }
    }
};






template <std::size_t Maxsize>
class KeywordsHashTable{
public:
    KeywordsHashTable(const std::initializer_list<uint32_t>& _args):size(_args.size() ), keys(_args)
    {
        
        // std::vector<uint32_t> tmp_args( _args );

        std::sort(keys.begin(), keys.end() );
        std::fill_n(hash_table,Maxsize,Maxsize);
        
        uint32_t cnt=0;
        for(const auto& i:keys){
            hash_table[i]=cnt;
            cnt+=1;
            }
    }
    inline uint32_t& operator[](uint32_t index){
        return hash_table[index];
    }

public:

    const uint32_t size;
    uint32_t hash_table[Maxsize];
    std::vector<uint32_t> keys;
};


class Element{
    public:
    const string name;
    const uint16_t elem_type;
    const uint16_t* hash_table;
    const static KeywordsHashTable<uint16_t,ELEM_NUM, KWD_NUM> k_Keywords_Hash_Table;
    double values[NARG(L) ]
    
    Element(string _name):name(_name),elem_type(ELEMENT),
        hash_table( &k_Keywords_Hash_Table[elem_type][0])
    {}

    inline double& operator[](const uint16_t& index){
        return values[  hash_table[elem_type][index]  ]
    }

    inline double& at(const uint16_t& index){
        uint16_t kwd_index=k_Keywords_Hash_Table.at(elem_type,index);
        if(kwd_index<k_Keywords_Hash_Table.sizes[elem_type] ){
            return values[kwd_index];
        }
        else{
            throw "out of range at Element::at!";
        }
    }

    std::vector<uint16_t> keywords()                          
    {                                                               
        std::map<uint16_t,double> tmp(k_Keywords_Hash_Table.keys[elem_type] );  
        return tmp;                                                 
    };

    std::map<uint16_t, double> keywords_map()                          
    {                                                               
        std::map<uint16_t,double> tmp;                              
        for(auto iter:k_Keywords_Hash_Table.keys[elem_type] ){                         
            tmp[iter] = values[ hash_table[iter] ];                
            // std::cout<<iter.first<<","<<keywords[iter.second]<<std::endl;     
        }                                                           
        return tmp;                                                 
    };

    void display(){
        uint32_t cnt=0;
        for(const auto i:k_Keywords_Hash_Table.hash_table){
            std::cout<<cnt<<":"<<i<<std::endl;
            cnt+=1;
        }
    }
};



const KeywordsHashTable<uint16_t,ELEM_NUM, KWD_NUM> Element::k_Keywords_Hash_Table { {MARKER,{K1,L,ANGLE, NSLICE} }
                                                                                    };

int main() {
    Element elem0;
    elem0.display();
    return 0;
}



// #define _GET_KEYWORDS_FUNCTION_()  double& get_keywords(KWD index){return keywords[ Keywords_Hash_Table.at(index) ];  };


#define _KEYWORDS_MAP_FUNCTION_()                                       \
    std::map<uint32_t, double> keywords_map()                          \
        {                                                               \
            std::map<uint32_t,double> tmp;                              \
            for(auto iter:Keywords_Hash_Table){                         \
                tmp[iter.first] = keywords[iter.second];                \
                std::cout<<iter.first<<","<<keywords[iter.second]<<std::endl;     \
            }                                                           \
            return tmp;                                                 \
        };



#define _BRACKET_OPERATOR_OVERRIDE_(class_name)                                                               \
    double& class_name::operator[](const uint32_t& index){                                                      \
        return keywords[ Keywords_Hash_Table.at(index) ];                                           \
    };                                                                                      
















class Marker:public Element{
public:
    Marker(){
        for(auto iter=0;iter<4;++iter){
            keywords[iter]=2*iter;
            }
    };
    // _GET_KEYWORDS_FUNCTION_()
    _KEYWORDS_MAP_FUNCTION_()
    virtual double& operator[](const uint32_t& index);
    
private:
    static const std::unordered_map< uint32_t,uint32_t > Keywords_Hash_Table;
    double keywords[NARG(L,ANGLE,K1,NSLICE) ];
};

const std::unordered_map< uint32_t,uint32_t > Marker::Keywords_Hash_Table={{L,0},{ANGLE,1},{K1,2},{NSLICE,3} };

_BRACKET_OPERATOR_OVERRIDE_(Marker)






class Drift:public Element{
public:
    Drift(){
        for(auto iter=0;iter<3;++iter){
            keywords[iter]=iter;
            }
        };
    // _GET_KEYWORDS_FUNCTION_()
    _KEYWORDS_MAP_FUNCTION_()
    virtual double& operator[](const uint32_t& index);
    
private:
    static const std::unordered_map< uint32_t,uint32_t > Keywords_Hash_Table;
    double keywords[NARG(L,NSLICE) ];
};

const std::unordered_map< uint32_t,uint32_t > Drift::Keywords_Hash_Table={{L,0},{NSLICE,2}};

_BRACKET_OPERATOR_OVERRIDE_(Drift)









int main() {
    double keywords[NARG(1,2,3,5)] {10,21.1,30.2,4.5};
    std::unordered_map<uint32_t,double> test {{1, 3.0}, {2,3.2}, {3,3.3}};
    Marker mk0;
    Drift d1;
    std::map<uint32_t,double> tmp=mk0.keywords_map();
    for(auto iter=tmp.begin(); iter !=tmp.end(); iter++){
        std::cout<<iter->first<<","<<iter->second<<std::endl;
        }
    
    std::cout << sizeof(mk0)<<","<<mk0[NSLICE] <<std::endl;
    std::cout << sizeof(d1)<<","<<d1[NSLICE] <<std::endl;
    std::cout << tmp.size()<<","<<tmp[K1] <<std::endl;
    std::cout << NARG(0) <<std::endl;
    return 0;
}